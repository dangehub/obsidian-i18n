{
    "manifest": {
        "id": "obsidian42-brat",
        "author": "",
        "version": "1.0.0",
        "pluginVersion": "1.0.3"
    },
    "description": {
        "original": "Easily install a beta version of a plugin for testing.",
        "translation": "Easily install a beta version of a plugin for testing."
    },
    "dict": {
        "Notice(\"Failed to read the daily note template\")": "Notice(\"Failed to read the daily note template\")",
        "Notice(\"Unable to create new file.\")": "Notice(\"Unable to create new file.\")",
        "Notice(\n    `BRAT\n${msg}\n${additionalInfo}`,\n    timeoutInSeconds * 1e3\n  )": "Notice(\n    `BRAT\n${msg}\n${additionalInfo}`,\n    timeoutInSeconds * 1e3\n  )",
        "Notice(`BRAT\n${msg1}`, 3e4)": "Notice(`BRAT\n${msg1}`, 3e4)",
        ".log(\"error in isPrivateRepo\", URL2, e)": ".log(\"error in isPrivateRepo\", URL2, e)",
        ".log(\"error in grabReleaseFileFromRepository\", URL, error)": ".log(\"error in grabReleaseFileFromRepository\", URL, error)",
        ".log(\"grabManifestJsonFromRepository manifestJsonPath\", manifestJsonPath)": ".log(\"grabManifestJsonFromRepository manifestJsonPath\", manifestJsonPath)",
        ".log(\"Token validation error:\", error)": ".log(\"Token validation error:\", error)",
        ".log(\"Token valid:\", tokenValid)": ".log(\"Token valid:\", tokenValid)",
        ".log(\"grabManifestJsonFromRepository response\", response)": ".log(\"grabManifestJsonFromRepository response\", response)",
        ".log(\n        `error in grabManifestJsonFromRepository for ${manifestJsonPath}`,\n        error\n      )": ".log(\n        `error in grabManifestJsonFromRepository for ${manifestJsonPath}`,\n        error\n      )",
        ".log(\"error in grabCommmunityPluginList\", error)": ".log(\"error in grabCommmunityPluginList\", error)",
        ".log(\"error in grabCommmunityThemesList\", error)": ".log(\"error in grabCommmunityThemesList\", error)",
        ".log(\"error in grabCommmunityThemeCssFile\", error)": ".log(\"error in grabCommmunityThemeCssFile\", error)",
        ".log(\"error in grabCommmunityThemeManifestFile\", error)": ".log(\"error in grabCommmunityThemeManifestFile\", error)",
        ".log(\"error in grabLastCommitInfoForAFile\", error)": ".log(\"error in grabLastCommitInfoForAFile\", error)",
        ".log(msg + `[Theme Info](https://github.com/${cssGithubRepository})": ".log(msg + `[Theme Info](https://github.com/${cssGithubRepository})",
        ".log(\"BRAT: No internet detected.\")": ".log(\"BRAT: No internet detected.\")",
        ".log(msg1, true)": ".log(msg1, true)",
        ".log(\"BRAT: lastUpdateOnline\", lastUpdateOnline)": ".log(\"BRAT: lastUpdateOnline\", lastUpdateOnline)",
        ".log(msg2, true)": ".log(msg2, true)",
        ".log(msg, true)": ".log(msg, true)",
        ".log({ reallyGetManifestOrNot, version })": ".log({ reallyGetManifestOrNot, version })",
        ".log(\n        \"BRAT: addPlugin\",\n        repositoryPath,\n        updatePluginFiles,\n        seeIfUpdatedOnly,\n        reportIfNotUpdted,\n        specifyVersion,\n        forceReinstall,\n        enableAfterInstall\n      )": ".log(\n        \"BRAT: addPlugin\",\n        repositoryPath,\n        updatePluginFiles,\n        seeIfUpdatedOnly,\n        reportIfNotUpdted,\n        specifyVersion,\n        forceReinstall,\n        enableAfterInstall\n      )",
        ".log(\"rFiles\", rFiles)": ".log(\"rFiles\", rFiles)",
        ".log(\"BRAT: rFiles.manifest\", usingBetaManifest, rFiles)": ".log(\"BRAT: rFiles.manifest\", usingBetaManifest, rFiles)",
        ".log(`${repositoryPath} reinstalled`, true)": ".log(`${repositoryPath} reinstalled`, true)",
        ".log(\n            \"BRAT - Local Manifest Load\",\n            primaryManifest.id,\n            JSON.stringify(e, null, 2)": ".log(\n            \"BRAT - Local Manifest Load\",\n            primaryManifest.id,\n            JSON.stringify(e, null, 2)",
        ".log(\n            msg + `[Release Info](https://github.com/${repositoryPath}/releases/tag/${primaryManifest.version})": ".log(\n            msg + `[Release Info](https://github.com/${repositoryPath}/releases/tag/${primaryManifest.version})",
        ".log(\"reload plugin\", e)": ".log(\"reload plugin\", e)",
        ".log(\"BRAT: \" + textToLog)": ".log(\"BRAT: \" + textToLog)",
        ".log(`${results.display} plugin disabled`, false)": ".log(`${results.display} plugin disabled`, false)",
        ".log(results.info)": ".log(results.info)",
        ".log(`${results.display} plugin enabled`, false)": ".log(`${results.display} plugin enabled`, false)",
        ".log(\"BRAT: \" + logDescription, ...outputs)": ".log(\"BRAT: \" + logDescription, ...outputs)",
        ".log(\"loading \" + this.APP_NAME)": ".log(\"loading \" + this.APP_NAME)",
        " log(textToLog, verbose = false)": " log(textToLog, verbose = false)",
        ".log(\"unloading \" + this.APP_NAME)": ".log(\"unloading \" + this.APP_NAME)",
        ".error(`Failed to read the daily note template '${templatePath}'`, err)": ".error(`Failed to read the daily note template '${templatePath}'`, err)",
        ".error(`Failed to create file: '${normalizedPath}'`, err)": ".error(`Failed to create file: '${normalizedPath}'`, err)",
        ".error(\n          \"BRAT: validateRepository\",\n          repositoryPath,\n          getBetaManifest,\n          reportIssues\n        )": ".error(\n          \"BRAT: validateRepository\",\n          repositoryPath,\n          getBetaManifest,\n          reportIssues\n        )",
        ".error(\"Failed to load settings:\", error)": ".error(\"Failed to load settings:\", error)",
        "name: \"Plugins: Add a beta plugin for testing\"": "name: \"插件：添加测试的 beta 插件\"",
        "name: \"Plugins: Add a beta plugin with frozen version based on a release tag\"": "name: \"Plugins: Add a beta plugin with frozen version based on a release tag\"",
        "name: \"Plugins: Check for updates to all beta plugins and UPDATE\"": "name: \"Plugins: Check for updates to all beta plugins and UPDATE\"",
        "name: \"Plugins: Only check for updates to beta plugins, but don't Update\"": "name: \"Plugins: Only check for updates to beta plugins, but don't Update\"",
        "name: \"Plugins: Choose a single plugin version to update\"": "name: \"Plugins: Choose a single plugin version to update\"",
        "name: \"Plugins: Choose a single plugin to reinstall\"": "name: \"Plugins: Choose a single plugin to reinstall\"",
        "name: \"Plugins: Restart a plugin that is already installed\"": "name: \"Plugins: Restart a plugin that is already installed\"",
        "name: \"Plugins: Disable a plugin - toggle it off\"": "name: \"Plugins: Disable a plugin - toggle it off\"",
        "name: \"Plugins: Enable a plugin - toggle it on\"": "name: \"Plugins: Enable a plugin - toggle it on\"",
        "name: \"Plugins: Open the GitHub repository for a plugin\"": "name: \"Plugins: Open the GitHub repository for a plugin\"",
        "name: \"Themes: Open the GitHub repository for a theme (appearance)\"": "name: \"Themes: Open the GitHub repository for a theme (appearance)\"",
        "name: \"Plugins: Open Plugin Settings Tab\"": "name: \"Plugins: Open Plugin Settings Tab\"",
        "name: \"Themes: Grab a beta theme for testing from a Github repository\"": "name: \"Themes: Grab a beta theme for testing from a Github repository\"",
        "name: \"Themes: Update beta themes\"": "name: \"Themes: Update beta themes\"",
        "name: \"All Commands list\"": "name: \"All Commands list\"",
        "text: \"Github repository for beta theme:\"": "text: \"Github repository for beta theme:\"",
        "text: \"Never mind\"": "text: \"Never mind\"",
        "text: \"Add Theme\"": "text: \"Add Theme\"",
        "text: \"Beta Plugin List\"": "text: \"Beta Plugin List\"",
        "text: `The following is a list of beta plugins added via the command palette \"Add a beta plugin for testing\" or \"Add a beta plugin with frozen version for testing\". A frozen version is a specific release of a plugin based on its releease tag. `": "text: `The following is a list of beta plugins added via the command palette \"Add a beta plugin for testing\" or \"Add a beta plugin with frozen version for testing\". A frozen version is a specific release of a plugin based on its releease tag. `",
        "text: `Click the x button next to a plugin to remove it from the list.`": "text: `Click the x button next to a plugin to remove it from the list.`",
        "text: \"Note: \"": "text: \"Note: \"",
        "text: \"This does not delete the plugin, this should be done from the  Community Plugins tab in Settings.\"": "text: \"This does not delete the plugin, this should be done from the  Community Plugins tab in Settings.\"",
        "text: \"Beta Themes List\"": "text: \"Beta Themes List\"",
        "text: \"Monitoring\"": "text: \"Monitoring\"",
        "text: \"Github repository for beta plugin:\"": "text: \"Github repository for beta plugin:\"",
        "text: \"Add Plugin\"": "text: \"Add Plugin\"",
        "settings:\", error);\n    });\n  }\n  showRibbonButton() {\n    this.addRibbonIcon(\"": "settings:\", error);\n    });\n  }\n  showRibbonButton() {\n    this.addRibbonIcon(\"",
        ".setButtonText(\"Add Beta plugin\")": ".setButtonText(\"Add Beta plugin\")",
        ".setButtonText(\"Click once more to confirm removal\")": ".setButtonText(\"Click once more to confirm removal\")",
        ".setButtonText(\"Add Beta plugin with frozen version\")": ".setButtonText(\"Add Beta plugin with frozen version\")",
        ".setButtonText(\"Add Beta Theme\")": ".setButtonText(\"Add Beta Theme\")",
        ".setName(\"Auto-enable plugins after installation\")": ".setName(\"Auto-enable plugins after installation\")",
        ".setName(\"Auto-update plugins at startup\")": ".setName(\"Auto-update plugins at startup\")",
        ".setName(\"Auto-update themes at startup\")": ".setName(\"Auto-update themes at startup\")",
        ".setName(\"Enable Notifications\")": ".setName(\"Enable Notifications\")",
        ".setName(\"Enable Logging\")": ".setName(\"Enable Logging\")",
        ".setName(\"BRAT Log File Location\")": ".setName(\"BRAT Log File Location\")",
        ".setName(\"Enable Verbose Logging\")": ".setName(\"Enable Verbose Logging\")",
        ".setName(\"Debugging Mode\")": ".setName(\"Debugging Mode\")",
        ".setName(\"Personal Access Token\")": ".setName(\"Personal Access Token\")",
        ".setDesc(\n      'If enabled beta plugins will be automatically enabled after installtion by default. Note: you can toggle this on and off for each plugin in the \"Add Plugin\" form.'\n    )": ".setDesc(\n      'If enabled beta plugins will be automatically enabled after installtion by default. Note: you can toggle this on and off for each plugin in the \"Add Plugin\" form.'\n    )",
        ".setDesc(\n      \"If enabled all beta plugins will be checked for updates each time Obsidian starts. Note: this does not update frozen version plugins.\"\n    )": ".setDesc(\n      \"If enabled all beta plugins will be checked for updates each time Obsidian starts. Note: this does not update frozen version plugins.\"\n    )",
        ".setDesc(\n      \"If enabled all beta themes will be checked for updates each time Obsidian starts.\"\n    )": ".setDesc(\n      \"If enabled all beta themes will be checked for updates each time Obsidian starts.\"\n    )",
        ".setDesc(\n      \"BRAT will provide popup notifications for its various activities. Turn this off means  no notifications from BRAT.\"\n    )": ".setDesc(\n      \"BRAT will provide popup notifications for its various activities. Turn this off means  no notifications from BRAT.\"\n    )",
        ".setDesc(\"Plugin updates will be logged to a file in the log file.\")": ".setDesc(\"Plugin updates will be logged to a file in the log file.\")",
        ".setDesc(\"Logs will be saved to this file. Don't add .md to the file name.\")": ".setDesc(\"Logs will be saved to this file. Don't add .md to the file name.\")",
        ".setDesc(\"Get a lot  more information in  the log.\")": ".setDesc(\"Get a lot  more information in  the log.\")",
        ".setDesc(\n      \"Atomic Bomb level console logging. Can be used for troubleshoting and development.\"\n    )": ".setDesc(\n      \"Atomic Bomb level console logging. Can be used for troubleshoting and development.\"\n    )",
        ".setDesc(\n      \"If you need to access private repositories, enter the personal access token here.\"\n    )": ".setDesc(\n      \"If you need to access private repositories, enter the personal access token here.\"\n    )",
        ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name\"\n        )": ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name\"\n        )",
        ".setPlaceholder(\"Example: BRAT-log\")": ".setPlaceholder(\"Example: BRAT-log\")",
        ".setPlaceholder(\"Enter your personal access token\")": ".setPlaceholder(\"Enter your personal access token\")",
        ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name)\"\n        )": ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name)\"\n        )",
        ".setPlaceholder(\"Specify the release version tag (example: 1.0.0)\")": ".setPlaceholder(\"Specify the release version tag (example: 1.0.0)\")",
        ".setTooltip(\"Delete this beta plugin\")": ".setTooltip(\"Delete this beta plugin\")",
        ".setTooltip(\"Delete this beta theme\")": ".setTooltip(\"Delete this beta theme\")",
        ".appendText(\"Enable after installing the plugin\")": ".appendText(\"Enable after installing the plugin\")",
        ".innerText = \"Learn more about my work at:\"": ".innerText = \"Learn more about my work at:\"",
        ".innerText = \"https://tfthacker.com\"": ".innerText = \"https://tfthacker.com\""
    }
}
