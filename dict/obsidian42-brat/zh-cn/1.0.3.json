{
    "manifest": {
        "id": "obsidian42-brat",
        "author": "",
        "version": "1.0.0",
        "pluginVersion": "1.0.3"
    },
    "description": {
        "original": "Easily install a beta version of a plugin for testing.",
        "translation": "轻松安装插件的测试版进行测试。"
    },
    "dict": {
        "Notice(\"Failed to read the daily note template\")": "Notice(\"Failed to read the daily note template\")",
        "Notice(\"Unable to create new file.\")": "Notice(\"Unable to create new file.\")",
        "Notice(\n    `BRAT\n${msg}\n${additionalInfo}`,\n    timeoutInSeconds * 1e3\n  )": "Notice(\n    `BRAT\n${msg}\n${additionalInfo}`,\n    timeoutInSeconds * 1e3\n  )",
        "Notice(`BRAT\n${msg1}`, 3e4)": "Notice(`BRAT\n${msg1}`, 3e4)",
        ".log(\"error in isPrivateRepo\", URL2, e)": ".log(\"error in isPrivateRepo\", URL2, e)",
        ".log(\"error in grabReleaseFileFromRepository\", URL, error)": ".log(\"error in grabReleaseFileFromRepository\", URL, error)",
        ".log(\"grabManifestJsonFromRepository manifestJsonPath\", manifestJsonPath)": ".log(\"grabManifestJsonFromRepository manifestJsonPath\", manifestJsonPath)",
        ".log(\"Token validation error:\", error)": ".log(\"Token validation error:\", error)",
        ".log(\"Token valid:\", tokenValid)": ".log(\"Token valid:\", tokenValid)",
        ".log(\"grabManifestJsonFromRepository response\", response)": ".log(\"grabManifestJsonFromRepository response\", response)",
        ".log(\n        `error in grabManifestJsonFromRepository for ${manifestJsonPath}`,\n        error\n      )": ".log(\n        `error in grabManifestJsonFromRepository for ${manifestJsonPath}`,\n        error\n      )",
        ".log(\"error in grabCommmunityPluginList\", error)": ".log(\"error in grabCommmunityPluginList\", error)",
        ".log(\"error in grabCommmunityThemesList\", error)": ".log(\"error in grabCommmunityThemesList\", error)",
        ".log(\"error in grabCommmunityThemeCssFile\", error)": ".log(\"error in grabCommmunityThemeCssFile\", error)",
        ".log(\"error in grabCommmunityThemeManifestFile\", error)": ".log(\"error in grabCommmunityThemeManifestFile\", error)",
        ".log(\"error in grabLastCommitInfoForAFile\", error)": ".log(\"error in grabLastCommitInfoForAFile\", error)",
        ".log(msg + `[Theme Info](https://github.com/${cssGithubRepository})": ".log(msg + `[Theme Info](https://github.com/${cssGithubRepository})",
        ".log(\"BRAT: No internet detected.\")": ".log(\"BRAT: No internet detected.\")",
        ".log(msg1, true)": ".log(msg1, true)",
        ".log(\"BRAT: lastUpdateOnline\", lastUpdateOnline)": ".log(\"BRAT: lastUpdateOnline\", lastUpdateOnline)",
        ".log(msg2, true)": ".log(msg2, true)",
        ".log(msg, true)": ".log(msg, true)",
        ".log({ reallyGetManifestOrNot, version })": ".log({ reallyGetManifestOrNot, version })",
        ".log(\n        \"BRAT: addPlugin\",\n        repositoryPath,\n        updatePluginFiles,\n        seeIfUpdatedOnly,\n        reportIfNotUpdted,\n        specifyVersion,\n        forceReinstall,\n        enableAfterInstall\n      )": ".log(\n        \"BRAT: addPlugin\",\n        repositoryPath,\n        updatePluginFiles,\n        seeIfUpdatedOnly,\n        reportIfNotUpdted,\n        specifyVersion,\n        forceReinstall,\n        enableAfterInstall\n      )",
        ".log(\"rFiles\", rFiles)": ".log(\"rFiles\", rFiles)",
        ".log(\"BRAT: rFiles.manifest\", usingBetaManifest, rFiles)": ".log(\"BRAT: rFiles.manifest\", usingBetaManifest, rFiles)",
        ".log(`${repositoryPath} reinstalled`, true)": ".log(`${repositoryPath} reinstalled`, true)",
        ".log(\n            \"BRAT - Local Manifest Load\",\n            primaryManifest.id,\n            JSON.stringify(e, null, 2)": ".log(\n            \"BRAT - Local Manifest Load\",\n            primaryManifest.id,\n            JSON.stringify(e, null, 2)",
        ".log(\n            msg + `[Release Info](https://github.com/${repositoryPath}/releases/tag/${primaryManifest.version})": ".log(\n            msg + `[Release Info](https://github.com/${repositoryPath}/releases/tag/${primaryManifest.version})",
        ".log(\"reload plugin\", e)": ".log(\"reload plugin\", e)",
        ".log(\"BRAT: \" + textToLog)": ".log(\"BRAT: \" + textToLog)",
        ".log(`${results.display} plugin disabled`, false)": ".log(`${results.display} plugin disabled`, false)",
        ".log(results.info)": ".log(results.info)",
        ".log(`${results.display} plugin enabled`, false)": ".log(`${results.display} plugin enabled`, false)",
        ".log(\"BRAT: \" + logDescription, ...outputs)": ".log(\"BRAT: \" + logDescription, ...outputs)",
        ".log(\"loading \" + this.APP_NAME)": ".log(\"loading \" + this.APP_NAME)",
        " log(textToLog, verbose = false)": " log(textToLog, verbose = false)",
        ".log(\"unloading \" + this.APP_NAME)": ".log(\"unloading \" + this.APP_NAME)",
        ".error(`Failed to read the daily note template '${templatePath}'`, err)": ".error(`Failed to read the daily note template '${templatePath}'`, err)",
        ".error(`Failed to create file: '${normalizedPath}'`, err)": ".error(`Failed to create file: '${normalizedPath}'`, err)",
        ".error(\n          \"BRAT: validateRepository\",\n          repositoryPath,\n          getBetaManifest,\n          reportIssues\n        )": ".error(\n          \"BRAT: validateRepository\",\n          repositoryPath,\n          getBetaManifest,\n          reportIssues\n        )",
        ".error(\"Failed to load settings:\", error)": ".error(\"Failed to load settings:\", error)",
        "name: \"Plugins: Add a beta plugin for testing\"": "name: \"插件：添加测试的 beta 插件\"",
        "name: \"Plugins: Add a beta plugin with frozen version based on a release tag\"": "name: \"插件: 根据发布标签添加一个版本冻结的测试版插件\"",
        "name: \"Plugins: Check for updates to all beta plugins and UPDATE\"": "name: \"插件: 检查所有测试版插件的更新并进行更新\"",
        "name: \"Plugins: Only check for updates to beta plugins, but don't Update\"": "name: \"插件: 仅检查测试版插件的更新，但不进行更新\"",
        "name: \"Plugins: Choose a single plugin version to update\"": "name: \"插件：选择一个插件进行更新\"",
        "name: \"Plugins: Choose a single plugin to reinstall\"": "name: \"插件: 选择一个插件进行重新安装\"",
        "name: \"Plugins: Restart a plugin that is already installed\"": "name: \"插件: 重启已安装的插件\"",
        "name: \"Plugins: Disable a plugin - toggle it off\"": "name: \"插件: 禁用插件 - 关闭它\"",
        "name: \"Plugins: Enable a plugin - toggle it on\"": "name: \"插件: 启用插件 - 开启它\"",
        "name: \"Plugins: Open the GitHub repository for a plugin\"": "name: \"插件: 打开插件的GitHub仓库\"",
        "name: \"Themes: Open the GitHub repository for a theme (appearance)\"": "name: \"主题: 打开主题的GitHub仓库（外观）\"",
        "name: \"Plugins: Open Plugin Settings Tab\"": "name: \"插件: 打开插件设置选项卡\"",
        "name: \"Themes: Grab a beta theme for testing from a Github repository\"": "name: \"主题: 从GitHub仓库获取测试版主题进行测试\"",
        "name: \"Themes: Update beta themes\"": "name: \"主题: 更新测试版主题\"",
        "name: \"All Commands list\"": "name: \"所有命令列表\"",
        "text: \"Github repository for beta theme:\"": "text: \"Github repository for beta theme:\"",
        "text: \"Never mind\"": "text: \"取消\"",
        "text: \"Add Theme\"": "text: \"添加主题\"",
        "text: \"Beta Plugin List\"": "text: \"Beta Plugin List\"",
        "text: `The following is a list of beta plugins added via the command palette \"Add a beta plugin for testing\" or \"Add a beta plugin with frozen version for testing\". A frozen version is a specific release of a plugin based on its releease tag. `": "text: `The following is a list of beta plugins added via the command palette \"Add a beta plugin for testing\" or \"Add a beta plugin with frozen version for testing\". A frozen version is a specific release of a plugin based on its releease tag. `",
        "text: `Click the x button next to a plugin to remove it from the list.`": "text: `Click the x button next to a plugin to remove it from the list.`",
        "text: \"Note: \"": "text: \"Note: \"",
        "text: \"This does not delete the plugin, this should be done from the  Community Plugins tab in Settings.\"": "text: \"这不会删除插件，您应该从“设置”中的“社区插件”选项卡中删除它。\"",
        "text: \"Beta Themes List\"": "text: \"Beta Themes List\"",
        "text: \"Monitoring\"": "text: \"Monitoring\"",
        "text: \"Github repository for beta plugin:\"": "text: \"Github repository for beta plugin:\"",
        "text: \"Add Plugin\"": "text: \"添加插件\"",
        "settings:\", error);\n    });\n  }\n  showRibbonButton() {\n    this.addRibbonIcon(\"": "settings:\", error);\n    });\n  }\n  showRibbonButton() {\n    this.addRibbonIcon(\"",
        ".setButtonText(\"Add Beta plugin\")": ".setButtonText(\"添加测试版插件\")",
        ".setButtonText(\"Click once more to confirm removal\")": ".setButtonText(\"再点击一次以确认删除\")",
        ".setButtonText(\"Add Beta plugin with frozen version\")": ".setButtonText(\"添加带有冻结版本的Beta插件\")",
        ".setButtonText(\"Add Beta Theme\")": ".setButtonText(\"添加测试版主题\")",
        ".setName(\"Auto-enable plugins after installation\")": ".setName(\"安装后自动启用插件\")",
        ".setName(\"Auto-update plugins at startup\")": ".setName(\"启动时自动更新插件\")",
        ".setName(\"Auto-update themes at startup\")": ".setName(\"启动时自动更新主题\")",
        ".setName(\"Enable Notifications\")": ".setName(\"启用通知\")",
        ".setName(\"Enable Logging\")": ".setName(\"启用日志记录\")",
        ".setName(\"BRAT Log File Location\")": ".setName(\"BRAT日志文件位置\")",
        ".setName(\"Enable Verbose Logging\")": ".setName(\"启用详细日志记录\")",
        ".setName(\"Debugging Mode\")": ".setName(\"调试模式\")",
        ".setName(\"Personal Access Token\")": ".setName(\"个人访问令牌\")",
        ".setDesc(\n      'If enabled beta plugins will be automatically enabled after installtion by default. Note: you can toggle this on and off for each plugin in the \"Add Plugin\" form.'\n    )": ".setDesc(\n      '如果启用，默认情况下，Beta插件将在安装后自动启用。注意：您可以在“添加插件”表单中为每个插件切换此功能。'\n    )",
        ".setDesc(\n      \"If enabled all beta plugins will be checked for updates each time Obsidian starts. Note: this does not update frozen version plugins.\"\n    )": ".setDesc(\n      \"如果启用，每次启动Obsidian时都会检查所有测试版插件是否有更新。注意：这不会更新已冻结版本的插件。\"\n    )",
        ".setDesc(\n      \"If enabled all beta themes will be checked for updates each time Obsidian starts.\"\n    )": ".setDesc(\n      \"如果启用，每次启动Obsidian时都会检查所有测试版主题是否有更新。\"\n    )",
        ".setDesc(\n      \"BRAT will provide popup notifications for its various activities. Turn this off means  no notifications from BRAT.\"\n    )": ".setDesc(\n      \"BRAT将为各种活动提供弹出通知。关闭此选项表示BRAT将不会显示任何通知。\"\n    )",
        ".setDesc(\"Plugin updates will be logged to a file in the log file.\")": ".setDesc(\"插件更新将被记录到日志文件中。\")",
        ".setDesc(\"Logs will be saved to this file. Don't add .md to the file name.\")": ".setDesc(\"日志将被保存到这个文件中。不要在文件名中添加.md后缀。\")",
        ".setDesc(\"Get a lot  more information in  the log.\")": ".setDesc(\"在日志中获取更多信息。\")",
        ".setDesc(\n      \"Atomic Bomb level console logging. Can be used for troubleshoting and development.\"\n    )": ".setDesc(\n      \"原子弹级控制台日志。可用于故障排除和开发。\"\n    )",
        ".setDesc(\n      \"If you need to access private repositories, enter the personal access token here.\"\n    )": ".setDesc(\n      \"If you need to access private repositories, enter the personal access token here.\"\n    )",
        ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name\"\n        )": ".setPlaceholder(\n          \"仓库(例如：https://github.com/GitubUserName/repository-name)\"\n        )",
        ".setPlaceholder(\"Example: BRAT-log\")": ".setPlaceholder(\"示例: BRAT-log\")",
        ".setPlaceholder(\"Enter your personal access token\")": ".setPlaceholder(\"输入您的个人访问令牌\")",
        ".setPlaceholder(\n          \"Repository (example: https://github.com/GitubUserName/repository-name)\"\n        )": ".setPlaceholder(\n          \"仓库(例如：https://github.com/GitubUserName/repository-name)\"\n        )",
        ".setPlaceholder(\"Specify the release version tag (example: 1.0.0)\")": ".setPlaceholder(\"指定发布版本标签(例如：1.0.0)\")",
        ".setTooltip(\"Delete this beta plugin\")": ".setTooltip(\"删除此测试版插件\")",
        ".setTooltip(\"Delete this beta theme\")": ".setTooltip(\"删除此测试版主题\")",
        ".appendText(\"Enable after installing the plugin\")": ".appendText(\"安装插件后启用\")",
        ".innerText = \"Learn more about my work at:\"": ".innerText = \"了解我的工作请访问：\"",
        ".innerText = \"https://tfthacker.com\"": ".innerText = \"https://tfthacker.com\""
    }
}
