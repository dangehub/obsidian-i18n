{
  "manifest": {
    "translationVersion": 1732291313351,
    "pluginVersion": "1.1.0"
  },
  "description": {
    "original": "Automatically sets a featured image property in your notes based on the first image, YouTube link, or Auto Card Link image found in your document. This allows you to create rich note galleries using Folder Notes and Dataview.",
    "translation": "Automatically sets a featured image property in your notes based on the first image, YouTube link, or Auto Card Link image found in your document. This allows you to create rich note galleries using Folder Notes and Dataview."
  },
  "dict": {
    "Notice(newFeature ? `Dry run: Would change featured image to: ${newFeature}` : `Dry run: Would remove featured image`)": "Notice(newFeature ? `Dry run: Would change featured image to: ${newFeature}` : `Dry run: Would remove featured image`)",
    "Notice(newFeature ? `Featured image set to ${newFeature}` : \"Featured image removed\")": "Notice(newFeature ? `Featured image set to ${newFeature}` : \"Featured image removed\")",
    "Notice(\"No file is currently active\")": "Notice(\"No file is currently active\")",
    "Notice(`Starting ${this.settings.dryRun ? \"dry run of \" : \"\"}${operationName}...`)": "Notice(`Starting ${this.settings.dryRun ? \"dry run of \" : \"\"}${operationName}...`)",
    "Notice(`Starting ${this.settings.dryRun ? \"dry run of \" : \"\"}removal of featured images from all files...`)": "Notice(`Starting ${this.settings.dryRun ? \"dry run of \" : \"\"}removal of featured images from all files...`)",
    "Notice(`Finished ${this.settings.dryRun ? \"dry run of \" : \"\"}removing featured images from ${removedCount} files.`)": "Notice(`Finished ${this.settings.dryRun ? \"dry run of \" : \"\"}removing featured images from ${removedCount} files.`)",
    "name: \"Set featured images in all files\"": "name: \"Set featured images in all files\"",
    "name: \"Set featured images in current folder\"": "name: \"Set featured images in current folder\"",
    "name: \"Remove featured images in all files\"": "name: \"Remove featured images in all files\"",
    "text: \"Note: The original modification dates of all files will be preserved.\"": "text: \"Note: The original modification dates of all files will be preserved.\"",
    ".setButtonText(\"Cancel\")": ".setButtonText(\"Cancel\")",
    ".setButtonText(\"Proceed\")": ".setButtonText(\"Proceed\")",
    ".setName(\"Show notifications\")": ".setName(\"Show notifications\")",
    ".setName(\"Excluded folders\")": ".setName(\"Excluded folders\")",
    ".setName(\"Frontmatter\")": ".setName(\"Frontmatter\")",
    ".setName(\"Frontmatter property\")": ".setName(\"Frontmatter property\")",
    ".setName(\"Only update if frontmatter property exists\")": ".setName(\"Only update if frontmatter property exists\")",
    ".setName(\"Use media links\")": ".setName(\"Use media links\")",
    ".setName(\"Require exclamation mark for YouTube thumbnails\")": ".setName(\"Require exclamation mark for YouTube thumbnails\")",
    ".setName(\"Download WebP\")": ".setName(\"Download WebP\")",
    ".setName(\"Local media\")": ".setName(\"Local media\")",
    ".setName(\"Thumbnail download folder\")": ".setName(\"Thumbnail download folder\")",
    ".setName(\"Local image extensions\")": ".setName(\"Local image extensions\")",
    ".setName(\"Developer\")": ".setName(\"Developer\")",
    ".setName(\"Debug mode\")": ".setName(\"Debug mode\")",
    ".setName(\"Dry run\")": ".setName(\"Dry run\")",
    ".setDesc(\"Show notifications when the featured image is set, updated or removed.\")": ".setDesc(\"Show notifications when the featured image is set, updated or removed.\")",
    ".setDesc(\"Comma separated list of folders to exclude from the featured image plugin.\")": ".setDesc(\"Comma separated list of folders to exclude from the featured image plugin.\")",
    ".setDesc(\"The name of the frontmatter property to update with the featured image\")": ".setDesc(\"The name of the frontmatter property to update with the featured image\")",
    ".setDesc(\"Enable this to only update the frontmatter property if it already exists.\")": ".setDesc(\"Enable this to only update the frontmatter property if it already exists.\")",
    ".setDesc(\"Use Obsidian media links (e.g. ![[image.png]]) instead of plain text (e.g. image.png) for the featured image property.\")": ".setDesc(\"Use Obsidian media links (e.g. ![[image.png]]) instead of plain text (e.g. image.png) for the featured image property.\")",
    ".setDesc(\"If enabled, only YouTube links prefixed with an exclamation mark will be considered for thumbnail download.\")": ".setDesc(\"If enabled, only YouTube links prefixed with an exclamation mark will be considered for thumbnail download.\")",
    ".setDesc(\"Download WebP versions of images from YouTube if available, otherwise download JPG.\")": ".setDesc(\"Download WebP versions of images from YouTube if available, otherwise download JPG.\")",
    ".setDesc(\"YouTube thumbnails and external Auto Card Link images will be downloaded to this folder.\")": ".setDesc(\"YouTube thumbnails and external Auto Card Link images will be downloaded to this folder.\")",
    ".setDesc(\"Comma-separated list of image file extensions to search for in documents.\")": ".setDesc(\"Comma-separated list of image file extensions to search for in documents.\")",
    ".setDesc(\"Enable debug mode to log detailed information to the console.\")": ".setDesc(\"Enable debug mode to log detailed information to the console.\")",
    ".setDesc(\"Enable dry run to prevent any changes from being made to your files.\")": ".setDesc(\"Enable dry run to prevent any changes from being made to your files.\")",
    "Log(\"Plugin loaded, debug mode:\", this.settings.debugMode, \"dry run:\", this.settings.dryRun)": "Log(\"Plugin loaded, debug mode:\", this.settings.debugMode, \"dry run:\", this.settings.dryRun)",
    "Log(`FEATURE UPDATED\n- File: ${file.path}\n- Current feature: ${currentFeature}\n- New feature: ${newFeature}`)": "Log(`FEATURE UPDATED\n- File: ${file.path}\n- Current feature: ${currentFeature}\n- New feature: ${newFeature}`)",
    "Log(\"Auto Card Link image found:\", match.groups.autoCardImage)": "Log(\"Auto Card Link image found:\", match.groups.autoCardImage)",
    "Log(\"Invalid Auto Card Link URL:\", imagePath)": "Log(\"Invalid Auto Card Link URL:\", imagePath)",
    "Log(\"Failed to generate hashed filename for:\", imagePath)": "Log(\"Failed to generate hashed filename for:\", imagePath)",
    "Log(\"Dry run: Skipping Auto Card Link image download, using mock path\")": "Log(\"Dry run: Skipping Auto Card Link image download, using mock path\")",
    "Log(\"Auto Card Link image already exists, skipping download\")": "Log(\"Auto Card Link image already exists, skipping download\")",
    "Log(\"Unknown Content-Type for image:\", contentType)": "Log(\"Unknown Content-Type for image:\", contentType)",
    "Log(\"Failed to download Auto Card Link image, error:\", error)": "Log(\"Failed to download Auto Card Link image, error:\", error)",
    "Log(\"Dry run: Skipping frontmatter update\")": "Log(\"Dry run: Skipping frontmatter update\")",
    "Log(\"Dry run: Skipping thumbnail download, using mock path\")": "Log(\"Dry run: Skipping thumbnail download, using mock path\")",
    "Log(\"Failed to download WebP thumbnail\")": "Log(\"Failed to download WebP thumbnail\")",
    "Log(\"Failed to download maxresdefault.jpg\")": "Log(\"Failed to download maxresdefault.jpg\")",
    "Log(\"Failed to download hqdefault.jpg:\")": "Log(\"Failed to download hqdefault.jpg:\")",
    "Log(`Thumbnail for video ${videoId} could not be downloaded`)": "Log(`Thumbnail for video ${videoId} could not be downloaded`)",
    "Log(\"Invalid YouTube URL:\", url)": "Log(\"Invalid YouTube URL:\", url)",
    "Log(`Error processing file ${file.path}:`, error)": "Log(`Error processing file ${file.path}:`, error)",
    "Log(\"FEATURE REMOVED\\n- File: \", file.path)": "Log(\"FEATURE REMOVED\\n- File: \", file.path)",
    "\"Update all featured images\"": "\"Update all featured images\"",
    "\"This will scan all markdown files in your vault and update or add featured images based on the first image, YouTube link, or Auto Card Link image found in each file. Proceed?\"": "\"This will scan all markdown files in your vault and update or add featured images based on the first image, YouTube link, or Auto Card Link image found in each file. Proceed?\"",
    "\"bulk update of featured images\"": "\"bulk update of featured images\"",
    "\"updating featured images\"": "\"updating featured images\"",
    "\"Update folder featured images\"": "\"Update folder featured images\"",
    "`This will scan all markdown files in \"${currentFolder}\" and its subfolders, and update or add featured images based on the first image, YouTube link, or Auto Card Link image found in each file. Proceed?`": "`This will scan all markdown files in \"${currentFolder}\" and its subfolders, and update or add featured images based on the first image, YouTube link, or Auto Card Link image found in each file. Proceed?`",
    "\"bulk update of featured images in folder\"": "\"bulk update of featured images in folder\"",
    "\"Remove all featured images\"": "\"Remove all featured images\"",
    "`This will remove the \"${this.settings.frontmatterProperty}\" property from the frontmatter of all markdown files in your vault. Proceed?`": "`This will remove the \"${this.settings.frontmatterProperty}\" property from the frontmatter of all markdown files in your vault. Proceed?`",
    "`Processed ${i + 1} of ${totalFiles} files. Updated ${updatedCount} featured images${errorCount > 0 ? `. Errors: ${errorCount}` : \"\"}`": "`Processed ${i + 1} of ${totalFiles} files. Updated ${updatedCount} featured images${errorCount > 0 ? `. Errors: ${errorCount}` : \"\"}`",
    "`Finished ${this.settings.dryRun ? \"dry run of \" : \"\"}${progressText}. Updated: ${updatedCount} files${errorCount > 0 ? `. Errors: ${errorCount}` : \"\"}`": "`Finished ${this.settings.dryRun ? \"dry run of \" : \"\"}${progressText}. Updated: ${updatedCount} files${errorCount > 0 ? `. Errors: ${errorCount}` : \"\"}`"
  }
}