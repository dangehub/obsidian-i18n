{
  "manifest": {
    "translationVersion": -639075600000,
    "pluginVersion": "1.6.1"
  },
  "description": {
    "original": "Rename pasted images and all the other attchments added to the vault",
    "translation": "Rename pasted images and all the other attchments added to the vault"
  },
  "dict": {
    "Notice(\"Error: No active file found.\")": "Notice(\"Error: No active file found.\")",
    "Notice(`Failed to rename ${newName}: ${err}`)": "Notice(`Failed to rename ${newName}: ${err}`)",
    "Notice(`Failed to rename ${newName}: no active editor`)": "Notice(`Failed to rename ${newName}: no active editor`)",
    "Notice(`Renamed ${originName} to ${newName}`)": "Notice(`Renamed ${originName} to ${newName}`)",
    "Notice(\"Failed to batch rename images: the generated name is not meaningful\")": "Notice(\"Failed to batch rename images: the generated name is not meaningful\")",
    ".log(\"DEBUG is enabled\")": ".log(\"DEBUG is enabled\")",
    ".log(`Plugin loading: ${pkg.name} ${pkg.version} BUILD_ENV=${\"production\"}`)": ".log(`Plugin loading: ${pkg.name} ${pkg.version} BUILD_ENV=${\"production\"}`)",
    "name: \"obsidian-paste-image-rename\"": "name: \"obsidian-paste-image-rename\"",
    "name: \"Batch rename embeded files (in the current file)\"": "name: \"Batch rename embeded files (in the current file)\"",
    "name: \"Batch rename all images instantly (in the current file)\"": "name: \"Batch rename all images instantly (in the current file)\"",
    "text: \"Original path\"": "text: \"Original path\"",
    "text: \"Renamed Name\"": "text: \"Renamed Name\"",
    "text: \"Origin path\"": "text: \"Origin path\"",
    "text: \"New path\"": "text: \"New path\"",
    ".setText(\"Batch rename embeded files\")": ".setText(\"Batch rename embeded files\")",
    ".setText(\"Rename image\")": ".setText(\"Rename image\")",
    ".setButtonText(\"Rename all\")": ".setButtonText(\"Rename all\")",
    ".setButtonText(\"Cancel\")": ".setButtonText(\"Cancel\")",
    ".setButtonText(\"Yes\")": ".setButtonText(\"Yes\")",
    ".setButtonText(\"No\")": ".setButtonText(\"No\")",
    ".setButtonText(\"Rename\")": ".setButtonText(\"Rename\")",
    ".setName(\"Name pattern\")": ".setName(\"Name pattern\")",
    ".setName(\"Extension pattern\")": ".setName(\"Extension pattern\")",
    ".setName(\"Name replace\")": ".setName(\"Name replace\")",
    ".setName(\"New name\")": ".setName(\"New name\")",
    ".setName(\"Image name pattern\")": ".setName(\"Image name pattern\")",
    ".setName(\"Duplicate number at start (or end)\")": ".setName(\"Duplicate number at start (or end)\")",
    ".setName(\"Duplicate number delimiter\")": ".setName(\"Duplicate number delimiter\")",
    ".setName(\"Always add duplicate number\")": ".setName(\"Always add duplicate number\")",
    ".setName(\"Auto rename\")": ".setName(\"Auto rename\")",
    ".setName(\"Handle all attachments\")": ".setName(\"Handle all attachments\")",
    ".setName(\"Exclude extension pattern\")": ".setName(\"Exclude extension pattern\")",
    ".setName(\"Disable rename notice\")": ".setName(\"Disable rename notice\")",
    ".setDesc(\"Please input the name pattern to match files (regex)\")": ".setDesc(\"Please input the name pattern to match files (regex)\")",
    ".setDesc(\"Please input the extension pattern to match files (regex)\")": ".setDesc(\"Please input the extension pattern to match files (regex)\")",
    ".setDesc(\"Please input the string to replace the matched name (use $1, $2 for regex groups)\")": ".setDesc(\"Please input the string to replace the matched name (use $1, $2 for regex groups)\")",
    ".setDesc(\"Please input the new name for the image (without extension)\")": ".setDesc(\"Please input the new name for the image (without extension)\")",
    ".setDesc(`If enabled, duplicate number will be added at the start as prefix for the image name, otherwise it will be added at the end as suffix for the image name.`)": ".setDesc(`If enabled, duplicate number will be added at the start as prefix for the image name, otherwise it will be added at the end as suffix for the image name.`)",
    ".setDesc(`The delimiter to generate the number prefix/suffix for duplicated names. For example, if the value is \"-\", the suffix will be like \"-1\", \"-2\", \"-3\", and the prefix will be like \"1-\", \"2-\", \"3-\". Only characters that are valid in file names are allowed.`)": ".setDesc(`The delimiter to generate the number prefix/suffix for duplicated names. For example, if the value is \"-\", the suffix will be like \"-1\", \"-2\", \"-3\", and the prefix will be like \"1-\", \"2-\", \"3-\". Only characters that are valid in file names are allowed.`)",
    ".setDesc(`If enabled, duplicate number will always be added to the image name. Otherwise, it will only be added when the name is duplicated.`)": ".setDesc(`If enabled, duplicate number will always be added to the image name. Otherwise, it will only be added when the name is duplicated.`)",
    ".setDesc(`By default, the rename modal will always be shown to confirm before renaming, if this option is set, the image will be auto renamed after pasting.`)": ".setDesc(`By default, the rename modal will always be shown to confirm before renaming, if this option is set, the image will be auto renamed after pasting.`)",
    ".setDesc(`By default, the plugin only handles images that starts with \"Pasted image \" in name,\n\t\t\twhich is the prefix Obsidian uses to create images from pasted content.\n\t\t\tIf this option is set, the plugin will handle all attachments that are created in the vault.`)": ".setDesc(`By default, the plugin only handles images that starts with \"Pasted image \" in name,\n\t\t\twhich is the prefix Obsidian uses to create images from pasted content.\n\t\t\tIf this option is set, the plugin will handle all attachments that are created in the vault.`)",
    ".setDesc(`This option is only useful when \"Handle all attachments\" is enabled.\n\t\t\tWrite a Regex pattern to exclude certain extensions from being handled. Only the first line will be used.`)": ".setDesc(`This option is only useful when \"Handle all attachments\" is enabled.\n\t\t\tWrite a Regex pattern to exclude certain extensions from being handled. Only the first line will be used.`)",
    ".setDesc(`Turn off this option if you don't want to see the notice when renaming images.\n\t\t\tNote that Obsidian may display a notice when a link has changed, this option cannot disable that.`)": ".setDesc(`Turn off this option if you don't want to see the notice when renaming images.\n\t\t\tNote that Obsidian may display a notice when a link has changed, this option cannot disable that.`)",
    ".innerText = 'Error: \"Name pattern\" could not be empty'": ".innerText = 'Error: \"Name pattern\" could not be empty'",
    ".innerText = 'Error: \"New name\" could not be empty'": ".innerText = 'Error: \"New name\" could not be empty'",
    "Confirm rename all": "Confirm rename all",
    "`Are you sure? This will rename all the ${this.state.renameTasks.length} images matched the pattern.`": "`Are you sure? This will rename all the ${this.state.renameTasks.length} images matched the pattern.`",
    "The pattern indicates how the new name should be generated.": "The pattern indicates how the new name should be generated.",
    "Available variables:": "Available variables:",
    "name of the active file, without \".md\" extension.": "name of the active file, without \".md\" extension.",
    "this variable is read from the markdown file's frontmatter, from the same key \"imageNameKey\".": "this variable is read from the markdown file's frontmatter, from the same key \"imageNameKey\".",
    "use \"$FORMAT\" to format the current date, \"$FORMAT\" must be a Moment.js format string, e.g. {{DATE:YYYY-MM-DD}}.": "use \"$FORMAT\" to format the current date, \"$FORMAT\" must be a Moment.js format string, e.g. {{DATE:YYYY-MM-DD}}.",
    "Here are some examples from pattern to image names (repeat in sequence), variables: fileName = \"My note\", imageNameKey = \"foo\":": "Here are some examples from pattern to image names (repeat in sequence), variables: fileName = \"My note\", imageNameKey = \"foo\":",
    "My note, My note-1, My note-2": "My note, My note-1, My note-2",
    "foo, foo-1, foo-2": "foo, foo-1, foo-2",
    "foo-20220408, foo-20220408-1, foo-20220408-2": "foo-20220408, foo-20220408-1, foo-20220408-2",
    "debugLog(\"renameAll\"": "debugLog(\"renameAll\"",
    "debugLog(\"new renameTasks\"": "debugLog(\"new renameTasks\"",
    "debugLog(\"pasted image created\"": "debugLog(\"pasted image created\"",
    "debugLog(\"handleAllAttachments for file\"": "debugLog(\"handleAllAttachments for file\"",
    "debugLog(\"excluded file by ext\"": "debugLog(\"excluded file by ext\"",
    "debugLog(\"generated newName:\"": "debugLog(\"generated newName:\"",
    "debugLog(\"deduplicated newName:\"": "debugLog(\"deduplicated newName:\"",
    "debugLog(\"replace text\"": "debugLog(\"replace text\"",
    "debugLog(\"current line -> replaced line\"": "debugLog(\"current line -> replaced line\"",
    "debugLog(\"confirmedName:\"": "debugLog(\"confirmedName:\"",
    "debugLog(\"modals count\"": "debugLog(\"modals count\"",
    "debugLog(\"frontmatter\"": "debugLog(\"frontmatter\"",
    "debugLog(\"sibling files\"": "debugLog(\"sibling files\"",
    "debugLog(\"dupNameRegex\"": "debugLog(\"dupNameRegex\"",
    "debugLog(\"active file\"": "debugLog(\"active file\"",
    "debugLog(\"doRename\"": "debugLog(\"doRename\""
  }
}