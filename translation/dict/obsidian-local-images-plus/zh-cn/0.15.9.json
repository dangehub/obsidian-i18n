{
  "manifest": {
    "translationVersion": -639075600000,
    "pluginVersion": "0.15.9"
  },
  "description": {
    "original": "Local Images Plus plugin searches for all external media links in your notes, downloads and saves them locally and adjusts the links in your notes to point to the saved files.",
    "translation": "Local Images Plus plugin searches for all external media links in your notes, downloads and saves them locally and adjusts the links in your notes to point to the saved files."
  },
  "dict": {
    ".setName(\"Show notifications\")": ".setName(\"Show notifications\")",
    ".setName(\"Disable additional commands\")": ".setName(\"Disable additional commands\")",
    ".setName(\"Automatic processing\")": ".setName(\"Automatic processing\")",
    ".setName(\"Automatic processing interval\")": ".setName(\"Automatic processing interval\")",
    ".setName(\"Number of retries for every single attachment\")": ".setName(\"Number of retries for every single attachment\")",
    ".setName(\"Process all new markdown files\")": ".setName(\"Process all new markdown files\")",
    ".setName(\"Process all new attachements\")": ".setName(\"Process all new attachements\")",
    ".setName(\"Use MD5 for new attachements\")": ".setName(\"Use MD5 for new attachements\")",
    ".setName(\"Download unknown filetypes\")": ".setName(\"Download unknown filetypes\")",
    ".setName(\"Convert PNG to JPEG (Web Images)\")": ".setName(\"Convert PNG to JPEG (Web Images)\")",
    ".setName(\"Convert PNG to JPEG (Pasted Images)\")": ".setName(\"Convert PNG to JPEG (Pasted Images)\")",
    ".setName(\"Jpeg Quality\")": ".setName(\"Jpeg Quality\")",
    ".setName(\"File size lower limit in Kb\")": ".setName(\"File size lower limit in Kb\")",
    ".setName(\"Exclusions\")": ".setName(\"Exclusions\")",
    ".setName(\"Do not create Obsidian attachment folder (For compatibility with other plugins)\")": ".setName(\"Do not create Obsidian attachment folder (For compatibility with other plugins)\")",
    ".setName(\"Preserve link captions\")": ".setName(\"Preserve link captions\")",
    ".setName(\"Add original filename or 'Open file' tag\")": ".setName(\"Add original filename or 'Open file' tag\")",
    ".setName(\"Include\")": ".setName(\"Include\")",
    ".setName(\"Remove files completely\")": ".setName(\"Remove files completely\")",
    ".setName(\"How to write paths in tags\")": ".setName(\"How to write paths in tags\")",
    ".setName(\"Folder to save new attachements\")": ".setName(\"Folder to save new attachements\")",
    ".setName(\"Move/delete/rename media folder\")": ".setName(\"Move/delete/rename media folder\")",
    ".setName(\"Media folder\")": ".setName(\"Media folder\")",
    ".setName(\"Debug\")": ".setName(\"Debug\")",
    ".setDesc(\"Show notifications when pages were processed.\")": ".setDesc(\"Show notifications when pages were processed.\")",
    ".setDesc(\"Do not show additional commands in command palette. Reload the plugin in settings to take effect (turn off/on).\")": ".setDesc(\"Do not show additional commands in command palette. Reload the plugin in settings to take effect (turn off/on).\")",
    ".setDesc(\"Process notes on create/copy/paste.\")": ".setDesc(\"Process notes on create/copy/paste.\")",
    ".setDesc(\"Interval in seconds for processing update. It takes some time to reveal changed content of a note to plugins.\")": ".setDesc(\"Interval in seconds for processing update. It takes some time to reveal changed content of a note to plugins.\")",
    ".setDesc(\"If an error occurs during downloading (network etc.) try to re-download several times.\")": ".setDesc(\"If an error occurs during downloading (network etc.) try to re-download several times.\")",
    ".setDesc(\"Process all new created/cloud-synced files with corresponding extensions.\")": ".setDesc(\"Process all new created/cloud-synced files with corresponding extensions.\")",
    ".setDesc(\"The plugin will also move all attachements from obsidian default folder to plugin folder.\")": ".setDesc(\"The plugin will also move all attachements from obsidian default folder to plugin folder.\")",
    ".setDesc(\"The plugin will use MD5 when renaming all new attachements.\")": ".setDesc(\"The plugin will use MD5 when renaming all new attachements.\")",
    ".setDesc(\"Download unknown filetypes and save them with .unknown extension.\")": ".setDesc(\"Download unknown filetypes and save them with .unknown extension.\")",
    ".setDesc(\"Convert all downloaded PNG files to JPEG. May reduce file size by several times, but can also affect performance.\")": ".setDesc(\"Convert all downloaded PNG files to JPEG. May reduce file size by several times, but can also affect performance.\")",
    ".setDesc(\"Convert all pasted PNG files to JPEG. May reduce file size by several times, but can also affect performance.\")": ".setDesc(\"Convert all pasted PNG files to JPEG. May reduce file size by several times, but can also affect performance.\")",
    ".setDesc(\"Jpeg quality selection (30 to 100).\")": ".setDesc(\"Jpeg quality selection (30 to 100).\")",
    ".setDesc(\"Do not download files with size less than this value. Set 0 for no limit.\")": ".setDesc(\"Do not download files with size less than this value. Set 0 for no limit.\")",
    ".setDesc(\"The plugin will not download attachements with these extensions.\")": ".setDesc(\"The plugin will not download attachements with these extensions.\")",
    ".setDesc(\"The plugin will not create an Obsidian attachments folder. This may cause the plugin to behave incorrectly. \")": ".setDesc(\"The plugin will not create an Obsidian attachments folder. This may cause the plugin to behave incorrectly. \")",
    ".setDesc(\"Add media links captions to converted tags.\")": ".setDesc(\"Add media links captions to converted tags.\")",
    ".setDesc(\"Add [[original filename]] or [original filename](link to attachement) after replaced tag (only for file:// protocol or dropped/pasted files ).\")": ".setDesc(\"Add [[original filename]] or [original filename](link to attachement) after replaced tag (only for file:// protocol or dropped/pasted files ).\")",
    ".setDesc(\"Include only files matching this regex pattern when running on all notes.\")": ".setDesc(\"Include only files matching this regex pattern when running on all notes.\")",
    ".setDesc(\"Do not move orphaned files into the garbage can.\")": ".setDesc(\"Do not move orphaned files into the garbage can.\")",
    ".setDesc(\"Select whether to write full paths in tags or not.\")": ".setDesc(\"Select whether to write full paths in tags or not.\")",
    ".setDesc(\"Select where all new attachements will be saved.\\nYou can use templates e.g. _resouces/${date}/${notename}\")": ".setDesc(\"Select where all new attachements will be saved.\\nYou can use templates e.g. _resouces/${date}/${notename}\")",
    ".setDesc(\"Folder to keep all downloaded media files.\")": ".setDesc(\"Folder to keep all downloaded media files.\")",
    ".setDesc(\"Enable debug output to console.\")": ".setDesc(\"Enable debug output to console.\")",
    ".createEl(\"a\", { text: \"Support the project! \", href: \"https://www.buymeacoffee.com/sergeikorneev\", cls: \"donheader_txt\" })": ".createEl(\"a\", { text: \"Support the project! \", href: \"https://www.buymeacoffee.com/sergeikorneev\", cls: \"donheader_txt\" })",
    ".createEl(\"h3\", { text: \"Interface settings\" })": ".createEl(\"h3\", { text: \"Interface settings\" })",
    ".createEl(\"h3\", { text: \"Processing settings\" })": ".createEl(\"h3\", { text: \"Processing settings\" })",
    ".createEl(\"h3\", { text: \"Note settings\" })": ".createEl(\"h3\", { text: \"Note settings\" })",
    ".createEl(\"h3\", { text: \"Orphaned attachments\" })": ".createEl(\"h3\", { text: \"Orphaned attachments\" })",
    ".createEl(\"h3\", { text: \"Media folder settings\" })": ".createEl(\"h3\", { text: \"Media folder settings\" })",
    ".createEl(\"h3\", { text: \"Troubleshooting\" })": ".createEl(\"h3\", { text: \"Troubleshooting\" })",
    "name: 'GPSLatitude'": "name: 'GPSLatitude'",
    "name: 'GPSLongitude'": "name: 'GPSLongitude'",
    "name: 'ModifyDate'": "name: 'ModifyDate'",
    "name: 'DateTimeOriginal'": "name: 'DateTimeOriginal'",
    "name: 'CreateDate'": "name: 'CreateDate'",
    "name: ' + name + '": "name: ' + name + '",
    "name: \" + fileName, false);\n        if (!fileName) {\n            throw new Error(\"": "name: \" + fileName, false);\n        if (!fileName) {\n            throw new Error(\"",
    "name: \"Localize attachments for the current note (plugin folder)\"": "name: \"Localize attachments for the current note (plugin folder)\"",
    "name: \"Localize attachments for the current note (Obsidian folder)\"": "name: \"Localize attachments for the current note (Obsidian folder)\"",
    "name: \"Set the first found # header as a note name.\"": "name: \"Set the first found # header as a note name.\"",
    "name: \"Localize attachments for all your notes (plugin folder)\"": "name: \"Localize attachments for all your notes (plugin folder)\"",
    "name: \"Convert selection to URI\"": "name: \"Convert selection to URI\"",
    "name: \"Convert selection from html to markdown\"": "name: \"Convert selection from html to markdown\"",
    "name: \"Remove all orphaned attachments (Obsidian folder)\"": "name: \"Remove all orphaned attachments (Obsidian folder)\"",
    "name: \"Remove all orphaned attachments (Plugin folder)\"": "name: \"Remove all orphaned attachments (Plugin folder)\"",
    ".addOption(\"fullDirPath\", \"Full path\")": ".addOption(\"fullDirPath\", \"Full path\")",
    ".addOption(\"onlyRelative\", \"Relative to note\")": ".addOption(\"onlyRelative\", \"Relative to note\")",
    ".addOption(\"baseFileName\", \"Only filename\")": ".addOption(\"baseFileName\", \"Only filename\")",
    ".addOption(\"obsFolder\", \"Copy Obsidian settings\")": ".addOption(\"obsFolder\", \"Copy Obsidian settings\")",
    ".addOption(\"inFolderBelow\", \"In the root folder specified below\")": ".addOption(\"inFolderBelow\", \"In the root folder specified below\")",
    ".addOption(\"nextToNoteS\", \"Next to note in the folder specified below\")": ".addOption(\"nextToNoteS\", \"Next to note in the folder specified below\")",
    "new Error('Expected an instance of stream.Readable')": "new Error('Expected an instance of stream.Readable')",
    "new Error('Stream closed')": "new Error('Stream closed')",
    "new Error('peekData should be defined')": "new Error('peekData should be defined')",
    "new Error('`options.position` must be equal or greater than `tokenizer.position`')": "new Error('`options.position` must be equal or greater than `tokenizer.position`')",
    "new Error('Cannot peek from a negative offset in a stream')": "new Error('Cannot peek from a negative offset in a stream')",
    "new Error(`File not a file: ${sourceFilePath}`)": "new Error(`File not a file: ${sourceFilePath}`)",
    "new Error(\"Invalid DOCTYPE\")": "new Error(\"Invalid DOCTYPE\")",
    "new Error(`Unclosed DOCTYPE`)": "new Error(`Unclosed DOCTYPE`)",
    "new Error(`Invalid Tag instead of DOCTYPE`)": "new Error(`Invalid Tag instead of DOCTYPE`)",
    "new Error(\"External entites are not supported\")": "new Error(\"External entites are not supported\")",
    "new Error(`Invalid entity name ${name}`)": "new Error(`Invalid entity name ${name}`)",
    "new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`)": "new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`)",
    "new Error(\"Pi Tag is not closed.\")": "new Error(\"Pi Tag is not closed.\")",
    "new Error(`Unexpected end of ${rawTagName}`)": "new Error(`Unexpected end of ${rawTagName}`)",
    "new Error(\"XML data is accepted in String or Bytes[] form.\")": "new Error(\"XML data is accepted in String or Bytes[] form.\")",
    "new Error(\"Entity value can't have '&'\")": "new Error(\"Entity value can't have '&'\")",
    "new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")": "new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")",
    "new Error(\"An entity with value '&' is not permitted\")": "new Error(\"An entity with value '&' is not permitted\")",
    "new Error('Replacement string cannot contain reserved filename characters')": "new Error('Replacement string cannot contain reserved filename characters')",
    "new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')": "new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')",
    "new Error(\"Cannot find module '\"+i+\"'\")": "new Error(\"Cannot find module '\"+i+\"'\")",
    "new Error('Bad alphabet')": "new Error('Bad alphabet')",
    "new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')": "new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')",
    "new Error('Invalid string. Length must be a multiple of 4')": "new Error('Invalid string. Length must be a multiple of 4')",
    "new Error(\"Invalid BMP File\")": "new Error(\"Invalid BMP File\")",
    "new Error('Invalid flush value')": "new Error('Invalid flush value')",
    "new Error('invalid number of gzip magic number bytes read')": "new Error('invalid number of gzip magic number bytes read')",
    "new Error('deflateParams Not supported')": "new Error('deflateParams Not supported')",
    "new Error('Unknown mode ' + this.mode);\n\t  }\n\n\t  if (this.err !== exports.Z_OK) {\n\t    this._error('Init error')": "new Error('Unknown mode ' + this.mode);\n\t  }\n\n\t  if (this.err !== exports.Z_OK) {\n\t    this._error('Init error')",
    "new Error('invalid input')": "new Error('invalid input')",
    "new Error('zlib binding closed')": "new Error('zlib binding closed')",
    "new Error('Invalid code point')": "new Error('Invalid code point')",
    "new Error('Unhandled \"error\" event. (' + er + ')": "new Error('Unhandled \"error\" event. (' + er + ')",
    "new Error('Possible EventEmitter memory leak detected. ' +\n\t            existing.length + ' \"' + String(type) + '\" listeners ' +\n\t            'added. Use emitter.setMaxListeners() to ' +\n\t            'increase limit.')": "new Error('Possible EventEmitter memory leak detected. ' +\n\t            existing.length + ' \"' + String(type) + '\" listeners ' +\n\t            'added. Use emitter.setMaxListeners() to ' +\n\t            'increase limit.')",
    "new Error('Invalid EXIF header')": "new Error('Invalid EXIF header')",
    "new Error('Invalid TIFF header')": "new Error('Invalid TIFF header')",
    "new Error('Invalid TIFF data')": "new Error('Invalid TIFF data')",
    "new Error('Invalid JPEG section offset')": "new Error('Invalid JPEG section offset')",
    "new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"')": "new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"')",
    "new Error(\"invalid ACn encoding\")": "new Error(\"invalid ACn encoding\")",
    "new Error(\"marker was not found\")": "new Error(\"marker was not found\")",
    "new Error(\"SOI not found\")": "new Error(\"SOI not found\")",
    "new Error(\"DQT: invalid table spec\")": "new Error(\"DQT: invalid table spec\")",
    "new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n\t        }\n\t        fileMarker = readUint16();\n\t      }\n\t      if (frames.length != 1)\n\t        throw new Error(\"only single frame JPEGs supported\")": "new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n\t        }\n\t        fileMarker = readUint16();\n\t      }\n\t      if (frames.length != 1)\n\t        throw new Error(\"only single frame JPEGs supported\")",
    "new Error(\"Unsupported amount of components\")": "new Error(\"Unsupported amount of components\")",
    "new Error(\"JPX Error: Invalid box field size\")": "new Error(\"JPX Error: Invalid box field size\")",
    "new Error(\"JPX Error: No size marker found in JPX stream\")": "new Error(\"JPX Error: No size marker found in JPX stream\")",
    "new Error(\"JPX Error: Unsupported COD options (\" + unsupported.join(\", \")": "new Error(\"JPX Error: Unsupported COD options (\" + unsupported.join(\", \")",
    "new Error(\"JPX Error: Codestream code 0xFF53 (COC) is \" + \"not implemented\")": "new Error(\"JPX Error: Codestream code 0xFF53 (COC) is \" + \"not implemented\")",
    "new Error(\"JPX Error: Out of packets\")": "new Error(\"JPX Error: Out of packets\")",
    "new Error('http status code: '+res.statusCode))\n\t    if (!body)\n\t      return cb(new Error('no body result')": "new Error('http status code: '+res.statusCode))\n\t    if (!body)\n\t      return cb(new Error('no body result')",
    "new Error('your browser does not support XHR loading')": "new Error('your browser does not support XHR loading')",
    "new Error(\"Width/Height invalid.\")": "new Error(\"Width/Height invalid.\")",
    "new Error(\"Background index out of range.\")": "new Error(\"Background index out of range.\")",
    "new Error(\"Background index explicitly passed as 0.\")": "new Error(\"Background index explicitly passed as 0.\")",
    "new Error(\"Loop count invalid.\")": "new Error(\"Loop count invalid.\")",
    "new Error(\"x/y invalid.\")": "new Error(\"x/y invalid.\")",
    "new Error(\"Not enough pixels for the frame size.\")": "new Error(\"Not enough pixels for the frame size.\")",
    "new Error(\"Must supply either a local or global palette.\")": "new Error(\"Must supply either a local or global palette.\")",
    "new Error(\"Disposal out of range.\")": "new Error(\"Disposal out of range.\")",
    "new Error(\"Transparent color index.\")": "new Error(\"Transparent color index.\")",
    "new Error(\"Invalid GIF 87a/89a header.\")": "new Error(\"Invalid GIF 87a/89a header.\")",
    "new Error(\"Invalid graphics extension block.\")": "new Error(\"Invalid graphics extension block.\")",
    "new Error(\"slide too late\")": "new Error(\"slide too late\")",
    "new Error(\"block gone\")": "new Error(\"block gone\")",
    "new Error(\"bug2\")": "new Error(\"bug2\")",
    "new Error('no data provided')": "new Error('no data provided')",
    "new Error('no data in BMFont file')": "new Error('no data in BMFont file')",
    "new Error('malformed file at line ' + i + ' -- needs page id=N')": "new Error('malformed file at line ' + i + ' -- needs page id=N')",
    "new Error('malformed file at line ' + i + ' -- needs page file=\"path\"')": "new Error('malformed file at line ' + i + ' -- needs page file=\"path\"')",
    "new Error('invalid buffer length for BMFont')": "new Error('invalid buffer length for BMFont')",
    "new Error('BMFont missing BMF byte header')": "new Error('BMFont missing BMF byte header')",
    "new Error('Only supports BMFont Binary v3 (BMFont App v1.10)')": "new Error('Only supports BMFont Binary v3 (BMFont App v1.10)')",
    "new Error('malformed file -- no <pages> element')": "new Error('malformed file -- no <pages> element')",
    "new Error('malformed file -- page \"id\" attribute is NaN')": "new Error('malformed file -- page \"id\" attribute is NaN')",
    "new Error('malformed file -- needs page \"file\" attribute')": "new Error('malformed file -- needs page \"file\" attribute')",
    "new Error('Missing url option from options for request method.')": "new Error('Missing url option from options for request method.')",
    "new Error('phin \\'form\\' option must be of type Object if present.')": "new Error('phin \\'form\\' option must be of type Object if present.')",
    "new Error('Invalid / unknown URL protocol. Expected HTTP or HTTPS.')": "new Error('Invalid / unknown URL protocol. Expected HTTP or HTTPS.')",
    "new Error('Timeout has been reached.')": "new Error('Timeout has been reached.')",
    "new Error('Couldn\\'t stringify object. (Likely due to a circular reference.)')": "new Error('Couldn\\'t stringify object. (Likely due to a circular reference.)')",
    "new Error('Ran out of data')": "new Error('Ran out of data')",
    "new Error('unrecognised depth')": "new Error('unrecognised depth')",
    "new Error('extra data found')": "new Error('extra data found')",
    "new Error('input color type:' + options.inputColorType + ' is not supported at present')": "new Error('input color type:' + options.inputColorType + ' is not supported at present')",
    "new Error('Stream not writable')": "new Error('Stream not writable')",
    "new Error('There are some read requests waiting on finished stream')": "new Error('There are some read requests waiting on finished stream')",
    "new Error('unrecognised filter types')": "new Error('unrecognised filter types')",
    "new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0')": "new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0')",
    "new Error('bad png - invalid compressed data response')": "new Error('bad png - invalid compressed data response')",
    "new Error('option color type:' + options.colorType + ' is not supported at present')": "new Error('option color type:' + options.colorType + ' is not supported at present')",
    "new Error('option input color type:' + options.inputColorType + ' is not supported at present')": "new Error('option input color type:' + options.inputColorType + ' is not supported at present')",
    "new Error('option bit depth:' + options.bitDepth + ' is not supported at present')": "new Error('option bit depth:' + options.bitDepth + ' is not supported at present')",
    "new Error('bad png - invalid inflate data response')": "new Error('bad png - invalid inflate data response')",
    "new Error('Invalid file signature')": "new Error('Invalid file signature')",
    "new Error('Expected IHDR on beggining')": "new Error('Expected IHDR on beggining')",
    "new Error('Unsupported compression method')": "new Error('Unsupported compression method')",
    "new Error('Unsupported filter method')": "new Error('Unsupported filter method')",
    "new Error('Unsupported interlace method')": "new Error('Unsupported interlace method')",
    "new Error('Transparency chunk must be after palette')": "new Error('Transparency chunk must be after palette')",
    "new Error('More transparent colors than palette size')": "new Error('More transparent colors than palette size')",
    "new Error('Expected palette not found')": "new Error('Expected palette not found')",
    "new Error('bitblt reading outside image')": "new Error('bitblt reading outside image')",
    "new Error('bitblt writing outside image')": "new Error('bitblt writing outside image')",
    "new Error('There are some read requests waitng on finished stream')": "new Error('There are some read requests waitng on finished stream')",
    "new Error('unrecognised content at end of stream')": "new Error('unrecognised content at end of stream')",
    "new Error('setTimeout has not been defined')": "new Error('setTimeout has not been defined')",
    "new Error('clearTimeout has not been defined')": "new Error('clearTimeout has not been defined')",
    "new Error('process.binding is not supported')": "new Error('process.binding is not supported')",
    "new Error('process.chdir is not supported')": "new Error('process.chdir is not supported')",
    "new Error('stream.unshift() after end event')": "new Error('stream.unshift() after end event')",
    "new Error('stream.push() after EOF')": "new Error('stream.push() after EOF')",
    "new Error('_read() is not implemented')": "new Error('_read() is not implemented')",
    "new Error('\"endReadable()\" called on non-empty stream')": "new Error('\"endReadable()\" called on non-empty stream')",
    "new Error('write callback called multiple times')": "new Error('write callback called multiple times')",
    "new Error('_transform() is not implemented')": "new Error('_transform() is not implemented')",
    "new Error('Calling transform done when ws.length != 0')": "new Error('Calling transform done when ws.length != 0')",
    "new Error('Calling transform done when still transforming')": "new Error('Calling transform done when still transforming')",
    "new Error('Cannot pipe, not readable')": "new Error('Cannot pipe, not readable')",
    "new Error('write after end')": "new Error('write after end')",
    "new Error('_write() is not implemented')": "new Error('_write() is not implemented')",
    "new Error('Invalid value for opts.mode')": "new Error('Invalid value for opts.mode')",
    "new Error('XHR error')": "new Error('XHR error')",
    "new Error('Argument must be a Buffer')": "new Error('Argument must be a Buffer')",
    "new Error(\"callback argument missing\")": "new Error(\"callback argument missing\")",
    "new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\")": "new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\")",
    "new Error(\"Internal XMLHttpRequest Error\")": "new Error(\"Internal XMLHttpRequest Error\")",
    "new Error(\"XMLHttpRequest timeout\")": "new Error(\"XMLHttpRequest timeout\")",
    "new Error(\"Headers cannot be set on an XDomainRequest object\")": "new Error(\"Headers cannot be set on an XDomainRequest object\")",
    "new Error('Buffer length is incorrect')": "new Error('Buffer length is incorrect')",
    "new Error('Cant access the filesystem. You can use the getBase64 method.')": "new Error('Cant access the filesystem. You can use the getBase64 method.')",
    "new Error('Could not find MIME for Buffer <' + path + '>')": "new Error('Could not find MIME for Buffer <' + path + '>')",
    "new Error('Invalid settings specified for the resizer.')": "new Error('Invalid settings specified for the resizer.')",
    "new Error('Native crypto module could not be used to get secure random number.')": "new Error('Native crypto module could not be used to get secure random number.')",
    "new Error('Malformed UTF-8 data')": "new Error('Malformed UTF-8 data')",
    "new Error('Tokenizer instance wasn\\'t specified.')": "new Error('Tokenizer instance wasn\\'t specified.')",
    "new Error('Node of type ' + this.node.type + ' doesn\\'t have \"' + property + '\" collection.')": "new Error('Node of type ' + this.node.type + ' doesn\\'t have \"' + property + '\" collection.')",
    "new Error('Unknown compat-transform: ' + transformName + '. ' + 'Available transforms are: ' + Object.keys(compatTransforms).join(', ')": "new Error('Unknown compat-transform: ' + transformName + '. ' + 'Available transforms are: ' + Object.keys(compatTransforms).join(', ')",
    "new Error('Unknown optimization-transform: ' + transformName + '. ' + 'Available transforms are: ' + Array.from(optimizationTransforms.keys()).join(', ')": "new Error('Unknown optimization-transform: ' + transformName + '. ' + 'Available transforms are: ' + Array.from(optimizationTransforms.keys()).join(', ')",
    "new Error('NFA/DFA: Flags are not supported yet.')": "new Error('NFA/DFA: Flags are not supported yet.')",
    "new Error('Unknown repeatition: ' + node.quantifier.kind + '.')": "new Error('Unknown repeatition: ' + node.quantifier.kind + '.')",
    "new Error('NFA/DFA: Only simple chars are supported yet.')": "new Error('NFA/DFA: Only simple chars are supported yet.')",
    "new Error('You must pass a function to execute')": "new Error('You must pass a function to execute')",
    "new Error(\"Failed to generate file name for media file.\")": "new Error(\"Failed to generate file name for media file.\")",
    "new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``)": "new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``)",
    "new TypeError('Expected a string')": "new TypeError('Expected a string')",
    "new TypeError('\"block\" argument must be a function')": "new TypeError('\"block\" argument must be a function')",
    "new TypeError('Bad argument')": "new TypeError('Bad argument')",
    "new TypeError('Not a string or buffer')": "new TypeError('Not a string or buffer')",
    "new TypeError('Invalid strategy: ' + strategy);\n\t  }\n\n\t  if (this._level !== level || this._strategy !== strategy) {\n\t    var self = this;\n\t    this.flush(binding.Z_SYNC_FLUSH, function () {\n\t      assert(self._handle, 'zlib binding closed')": "new TypeError('Invalid strategy: ' + strategy);\n\t  }\n\n\t  if (this._level !== level || this._strategy !== strategy) {\n\t    var self = this;\n\t    this.flush(binding.Z_SYNC_FLUSH, function () {\n\t      assert(self._handle, 'zlib binding closed')",
    "new TypeError('\"size\" argument must be of type number')": "new TypeError('\"size\" argument must be of type number')",
    "new TypeError('\"list\" argument must be an Array of Buffers')": "new TypeError('\"list\" argument must be an Array of Buffers')",
    "new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '')": "new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '')",
    "new TypeError('Argument must be a Buffer')": "new TypeError('Argument must be a Buffer')",
    "new TypeError('val must be string, number or Buffer')": "new TypeError('val must be string, number or Buffer')",
    "new TypeError('\"buffer\" argument must be a Buffer instance')": "new TypeError('\"buffer\" argument must be a Buffer instance')",
    "new TypeError('argument should be a Buffer')": "new TypeError('argument should be a Buffer')",
    "new TypeError('encoding must be a string')": "new TypeError('encoding must be a string')",
    "new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0);\n\t      if ((encoding === 'utf8' && code < 128) ||\n\t          encoding === 'latin1')": "new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0);\n\t      if ((encoding === 'utf8' && code < 128) ||\n\t          encoding === 'latin1')",
    "new TypeError('The value \"' + val +\n\t        '\" is invalid for argument \"value\"')": "new TypeError('The value \"' + val +\n\t        '\" is invalid for argument \"value\"')",
    "new TypeError('\"defaultMaxListeners\" must be a positive number')": "new TypeError('\"defaultMaxListeners\" must be a positive number')",
    "new TypeError('\"n\" argument must be a positive number')": "new TypeError('\"n\" argument must be a positive number')",
    "new TypeError('\"listener\" argument must be a function')": "new TypeError('\"listener\" argument must be a function')",
    "new TypeError(\"Invalid attempt to spread non-iterable instance\")": "new TypeError(\"Invalid attempt to spread non-iterable instance\")",
    "new TypeError('iterator must be a function')": "new TypeError('iterator must be a function')",
    "new TypeError('Arguments to path.resolve must be strings')": "new TypeError('Arguments to path.resolve must be strings')",
    "new TypeError('Arguments to path.join must be strings')": "new TypeError('Arguments to path.join must be strings')",
    "new TypeError('\"callback\" argument must be a function')": "new TypeError('\"callback\" argument must be a function')",
    "new TypeError('Invalid non-string/buffer chunk')": "new TypeError('Invalid non-string/buffer chunk')",
    "new TypeError('May not write null values to stream')": "new TypeError('May not write null values to stream')",
    "new TypeError('Unknown encoding: ' + encoding);\n\t  this._writableState.defaultEncoding = encoding;\n\t  return this;\n\t};\n\n\tfunction decodeChunk(state, chunk, encoding) {\n\t  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string')": "new TypeError('Unknown encoding: ' + encoding);\n\t  this._writableState.defaultEncoding = encoding;\n\t  return this;\n\t};\n\n\tfunction decodeChunk(state, chunk, encoding) {\n\t  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string')",
    "new TypeError(\"Cannot call a class as a function\")": "new TypeError(\"Cannot call a class as a function\")",
    "new TypeError('Argument must not be a number')": "new TypeError('Argument must not be a number')",
    "new TypeError('Argument must be a number')": "new TypeError('Argument must be a number')",
    "new TypeError(\"Invalid attempt to destructure non-iterable instance\")": "new TypeError(\"Invalid attempt to destructure non-iterable instance\")",
    "new TypeError(\"Super expression must either be null or a function\")": "new TypeError(\"Super expression must either be null or a function\")",
    "new TypeError('Callback must be a function')": "new TypeError('Callback must be a function')",
    "new TypeError('Unknown Assertion kind: ' + node.kind);\n    }\n  },\n  CharacterClass: function CharacterClass(node) {\n    var expressions = node.expressions.map(gen$1).join('')": "new TypeError('Unknown Assertion kind: ' + node.kind);\n    }\n  },\n  CharacterClass: function CharacterClass(node) {\n    var expressions = node.expressions.map(gen$1).join('')",
    "new TypeError('Expected \"Disjunction\" node, got \"' + node.type + '\"')": "new TypeError('Expected \"Disjunction\" node, got \"' + node.type + '\"')",
    "msg = \"Invalid space after '<'.\";": "msg = \"Invalid space after '<'.\";",
    "msg = \"Tag '\"+tagName+\"' is an invalid name.\";": "msg = \"Tag '\"+tagName+\"' is an invalid name.\";",
    "msg = 'invalid distance too far back';": "msg = 'invalid distance too far back';",
    "msg = 'invalid distance code';": "msg = 'invalid distance code';",
    "msg = 'invalid literal/length code';": "msg = 'invalid literal/length code';",
    "msg = 'incorrect header check';": "msg = 'incorrect header check';",
    "msg = 'unknown compression method';": "msg = 'unknown compression method';",
    "msg = 'invalid window size';": "msg = 'invalid window size';",
    "msg = 'unknown header flags set';": "msg = 'unknown header flags set';",
    "msg = 'header crc mismatch';": "msg = 'header crc mismatch';",
    "msg = 'invalid block type';": "msg = 'invalid block type';",
    "msg = 'invalid stored block lengths';": "msg = 'invalid stored block lengths';",
    "msg = 'too many length or distance symbols';": "msg = 'too many length or distance symbols';",
    "msg = 'invalid code lengths set';": "msg = 'invalid code lengths set';",
    "msg = 'invalid bit length repeat';": "msg = 'invalid bit length repeat';",
    "msg = 'invalid code -- missing end-of-block';": "msg = 'invalid code -- missing end-of-block';",
    "msg = 'invalid literal/lengths set';": "msg = 'invalid literal/lengths set';",
    "msg = 'invalid distances set';": "msg = 'invalid distances set';",
    "msg = 'incorrect data check';": "msg = 'incorrect data check';",
    "msg = 'incorrect length check';": "msg = 'incorrect length check';",
    "msg = 'Could not load Buffer from <' + src + '> ' + '(HTTP: ' + response.statusCode + ')';": "msg = 'Could not load Buffer from <' + src + '> ' + '(HTTP: ' + response.statusCode + ')';",
    "msg = \"were deleted completely.\";": "msg = \"were deleted completely.\";",
    "msg = \"were moved to the system garbage can.\";": "msg = \"were moved to the system garbage can.\";",
    "msg = \"were moved to the Obsidian garbage can.\";": "msg = \"were moved to the Obsidian garbage can.\";",
    "logError(`LocalImagesPlus: error: ${error}`, false)": "logError(`LocalImagesPlus: error: ${error}`, false)",
    "logError(\"Cannot generate md5: \" + e, false)": "logError(\"Cannot generate md5: \" + e, false)",
    "logError(\"replaceAsync: \\r\\nstr: \" + str + \"\\r\\nregex: \")": "logError(\"replaceAsync: \\r\\nstr: \" + str + \"\\r\\nregex: \")",
    "logError(\"cur regex:  \" + element)": "logError(\"cur regex:  \" + element)",
    "logError(\"match: \")": "logError(\"match: \")",
    "logError(\"repl: \" + replp +\n                    \"\\r\\nahc: \" + anchor +\n                    \"\\r\\nlink: \" + link +\n                    \"\\r\\ncaption: \" + caption)": "logError(\"repl: \" + replp +\n                    \"\\r\\nahc: \" + anchor +\n                    \"\\r\\nlink: \" + link +\n                    \"\\r\\ncaption: \" + caption)",
    "logError(\"el: \" + element[0] + \"  el2: \" + element[1] + element[2])": "logError(\"el: \" + element[0] + \"  el2: \" + element[1] + element[2])",
    "logError(\"IsUrl: \" + link, false)": "logError(\"IsUrl: \" + link, false)",
    "logError(\"Cannot convert to jpeg: \" + e, false)": "logError(\"Cannot convert to jpeg: \" + e, false)",
    "logError(\"base64ToBuff: \\r\\n\", false)": "logError(\"base64ToBuff: \\r\\n\", false)",
    "logError(\"Cannot read base64: \" + e, false)": "logError(\"Cannot read base64: \" + e, false)",
    "logError(\"Cannot read the file: \" + e, false)": "logError(\"Cannot read the file: \" + e, false)",
    "logError(\"readFromDisk: \" + file, false)": "logError(\"readFromDisk: \" + file, false)",
    "logError(\"Downloading: \" + url, false)": "logError(\"Downloading: \" + url, false)",
    "logError(\"Cannot download the file: \" + e, false)": "logError(\"Cannot download the file: \" + e, false)",
    "logError(\"processImageTag: \" + match)": "logError(\"processImageTag: \" + match)",
    "logError(\"ReadBase64: \\r\\n\" + fpath, false)": "logError(\"ReadBase64: \\r\\n\" + fpath, false)",
    "logError(\"Readlocal: \\r\\n\" + fpath, false)": "logError(\"Readlocal: \\r\\n\" + fpath, false)",
    "logError(\"\\r\\n\\nDownloading (try)": "logError(\"\\r\\n\\nDownloading (try)",
    "logError(\"Cannot get an attachment content!\", fileDatafalse)": "logError(\"Cannot get an attachment content!\", fileDatafalse)",
    "logError(\"Lower limit of the file size!\", false)": "logError(\"Lower limit of the file size!\", false)",
    "logError(\"Image processing failed: \" + error, false)": "logError(\"Image processing failed: \" + error, false)",
    "logError(\"file: \" + link + \" content: \" + contentData + \" file ext: \" + fileExt, false)": "logError(\"file: \" + link + \" content: \" + contentData + \" file ext: \" + fileExt, false)",
    "logError(\"File name: \" + fileName, false)": "logError(\"File name: \" + fileName, false)",
    "logError(\"processactive\")": "logError(\"processactive\")",
    "logError(\"Cannot find \" + el.link + \" skipping...\")": "logError(\"Cannot find \" + el.link + \" skipping...\")",
    "logError(\"oldbindata\")": "logError(\"oldbindata\")",
    "logError(\"oldext\")": "logError(\"oldext\")",
    "logError(\"converting to Jpeg\")": "logError(\"converting to Jpeg\")",
    "logError(\"Deleting duplicate file: \" + oldpath)": "logError(\"Deleting duplicate file: \" + oldpath)",
    "logError(\"Renaming existing: \" + oldpath)": "logError(\"Renaming existing: \" + oldpath)",
    "logError(`renaming  ${oldpath}  to  ${newpath}`)": "logError(`renaming  ${oldpath}  to  ${newpath}`)",
    "logError(\"New file created: \")": "logError(\"New file created: \")",
    "logError(\"File modified: \\r\\n\")": "logError(\"File modified: \\r\\n\")",
    "logError(\"file created  \")": "logError(\"file created  \")",
    "logError(\" unloaded.\")": "logError(\" unloaded.\")",
    "showBalloon(`LocalImagesPlus: Error while handling file ${file.name}, ${error.toString()`": "showBalloon(`LocalImagesPlus: Error while handling file ${file.name}, ${error.toString()`",
    "showBalloon(`Please select a note or click inside selected note in canvas.`, this.settings.showNotifications)": "showBalloon(`Please select a note or click inside selected note in canvas.`, this.settings.showNotifications)",
    "showBalloon(\"This command requires the settings 'Next to note in the folder specified below' and pattern '${notename}' at the end to be enabled, also the path cannot contain ${date} pattern.\\nPlease, change settings first!\\r\\n\", this.settings.showNotifications)": "showBalloon(\"This command requires the settings 'Next to note in the folder specified below' and pattern '${notename}' at the end to be enabled, also the path cannot contain ${date} pattern.\\nPlease, change settings first!\\r\\n\", this.settings.showNotifications)",
    "showBalloon(\"Please, select a note or click inside a note in canvas!\", this.settings.showNotifications)": "showBalloon(\"Please, select a note or click inside a note in canvas!\", this.settings.showNotifications)",
    "showBalloon(\"The attachment folder \" + oldRootdir + \" does not exist!\", this.settings.showNotifications)": "showBalloon(\"The attachment folder \" + oldRootdir + \" does not exist!\", this.settings.showNotifications)",
    "showBalloon(\"No orphaned files found!\", this.settings.showNotifications)": "showBalloon(\"No orphaned files found!\", this.settings.showNotifications)",
    "showBalloon(\"This command cannot run on vault's root or on subfolder next to note!\\nPlease, change settings first!\\r\\n\", this.settings.showNotifications)": "showBalloon(\"This command cannot run on vault's root or on subfolder next to note!\\nPlease, change settings first!\\r\\n\", this.settings.showNotifications)",
    "showBalloon(\"You obsidian media folder set to '\" + obsmdir + \"', and has been created by the plugin. Please, try again. \", this.settings.showNotifications)": "showBalloon(\"You obsidian media folder set to '\" + obsmdir + \"', and has been created by the plugin. Please, try again. \", this.settings.showNotifications)",
    "showBalloon(`The note was renamed to ` + fullPath, this.settings.showNotifications)": "showBalloon(`The note was renamed to ` + fullPath, this.settings.showNotifications)",
    "showBalloon(`Cannot rename.`, this.settings.showNotifications)": "showBalloon(`Cannot rename.`, this.settings.showNotifications)",
    "showBalloon(\"Attachment folder \" + rootdir + \" was moved to trash can.\", this.settings.showNotifications)": "showBalloon(\"Attachment folder \" + rootdir + \" was moved to trash can.\", this.settings.showNotifications)",
    "showBalloon(\"Attachment folder was renamed to \" + newRootDir_, this.settings.showNotifications)": "showBalloon(\"Attachment folder was renamed to \" + newRootDir_, this.settings.showNotifications)",
    "showBalloon(\"Cannot move attachment folder: \\r\\n\" + e, this.settings.showNotifications)": "showBalloon(\"Cannot move attachment folder: \\r\\n\" + e, this.settings.showNotifications)",
    "showBalloon(\"Cannot get current note! \", this.settings.showNotifications)": "showBalloon(\"Cannot get current note! \", this.settings.showNotifications)",
    "showBalloon(`Attachements for \"${file.path}\" were processed.`, this.settings.showNotifications)": "showBalloon(`Attachements for \"${file.path}\" were processed.`, this.settings.showNotifications)",
    "showBalloon(`WARNING!\\r\\nAttachements for \"${file.path}\" were processed, but some attachements were not downloaded/replaced...`, this.settings.showNotifications)": "showBalloon(`WARNING!\\r\\nAttachements for \"${file.path}\" were processed, but some attachements were not downloaded/replaced...`, this.settings.showNotifications)",
    "showBalloon(`Page \"${file.path}\" has been processed, but nothing was changed.`, this.settings.showNotifications)": "showBalloon(`Page \"${file.path}\" has been processed, but nothing was changed.`, this.settings.showNotifications)",
    "showBalloon(\"Media links were found, processing...\", this.settings.showNotifications)": "showBalloon(\"Media links were found, processing...\", this.settings.showNotifications)",
    "showBalloon(itemcount + \" attachements for note \" + note.path + \" were processed.\"": "showBalloon(itemcount + \" attachements for note \" + note.path + \" were processed.\""
  }
}