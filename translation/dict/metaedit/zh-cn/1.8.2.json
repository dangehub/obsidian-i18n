{
  "manifest": {
    "translationVersion": 1733729753395,
    "pluginVersion": "1.8.2"
  },
  "description": {
    "original": "MetaEdit helps you manage your metadata.",
    "translation": "MetaEdit helps you manage your metadata."
  },
  "dict": {
    "Notice(`Frontmatter in file '${file.name}' already has property '${propName}. Will not add.'`)": "Notice(`Frontmatter in file '${file.name}' already has property '${propName}. Will not add.'`)",
    "Notice(this.formatOutputString(error)": "Notice(this.formatOutputString(error)",
    "Notice(this.formatOutputString(warning)": "Notice(this.formatOutputString(warning)",
    "Notice(`'${board.property} not found in ${board.boardName} for file \"${linkFile.name}\".'`)": "Notice(`'${board.property} not found in ${board.boardName} for file \"${linkFile.name}\".'`)",
    ".log(this.formatOutputString(log)": ".log(this.formatOutputString(log)",
    ".log('Loading MetaEdit')": ".log('Loading MetaEdit')",
    ".log('Unloading MetaEdit')": ".log('Unloading MetaEdit')",
    ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)": ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)",
    ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')": ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')",
    ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')": ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')",
    ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)": ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', ')": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', ')",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists)",
    ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)": ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)",
    ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)": ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)",
    ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')": ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')",
    ".error(INVALID_ELEMENT_ERROR)": ".error(INVALID_ELEMENT_ERROR)",
    ".error(INFINITE_LOOP_ERROR)": ".error(INFINITE_LOOP_ERROR)",
    ".error(e)": ".error(e)",
    ".error(this.formatOutputString(error)": ".error(this.formatOutputString(error)",
    "name: \"\", choices: [\"": "name: \"\", choices: [\"",
    "name: 'applyStyles'": "name: 'applyStyles'",
    "name: 'arrow'": "name: 'arrow'",
    "name: 'computeStyles'": "name: 'computeStyles'",
    "name: 'eventListeners'": "name: 'eventListeners'",
    "name: 'flip'": "name: 'flip'",
    "name: 'hide'": "name: 'hide'",
    "name: 'offset'": "name: 'offset'",
    "name: 'popperOffsets'": "name: 'popperOffsets'",
    "name: 'preventOverflow'": "name: 'preventOverflow'",
    "name: \"sameWidth\"": "name: \"sameWidth\"",
    "name: 'Run MetaEdit'": "name: 'Run MetaEdit'",
    "text: 'reference'": "text: 'reference'",
    "text: 'MetaEdit Settings'": "text: 'MetaEdit Settings'",
    "text: \"Single: property values are just one value. \"": "text: \"Single: property values are just one value. \"",
    "text: \"Multi: properties are arrays. \"": "text: \"Multi: properties are arrays. \"",
    "text: \"Some Multi: all options are single, except those specified in the settings (click button).\"": "text: \"Some Multi: all options are single, except those specified in the settings (click button).\"",
    ".setName(\"Progress Properties\")": ".setName(\"Progress Properties\")",
    ".setName(\"Auto Properties\")": ".setName(\"Auto Properties\")",
    ".setName(\"Ignore Properties\")": ".setName(\"Ignore Properties\")",
    ".setName(\"Edit Mode\")": ".setName(\"Edit Mode\")",
    ".setName(\"Kanban Board Helper\")": ".setName(\"Kanban Board Helper\")",
    ".setName(\"UI Elements\")": ".setName(\"UI Elements\")",
    ".setDesc(\"Update properties automatically.\")": ".setDesc(\"Update properties automatically.\")",
    ".setDesc(\"Quick switch for values you know the value of.\")": ".setDesc(\"Quick switch for values you know the value of.\")",
    ".setDesc(\"Hide these properties from the menu.\")": ".setDesc(\"Hide these properties from the menu.\")",
    ".setDesc(\"Update properties in links in kanban boards automatically when a card is moved to a new lane.\")": ".setDesc(\"Update properties in links in kanban boards automatically when a card is moved to a new lane.\")",
    ".setDesc(\"Toggle UI elements: the 'Edit Meta' right-click menu option.\")": ".setDesc(\"Toggle UI elements: the 'Edit Meta' right-click menu option.\")",
    ".setTooltip(\"Toggle Progress Properties\")": ".setTooltip(\"Toggle Progress Properties\")",
    ".setTooltip(\"Toggle Auto Properties\")": ".setTooltip(\"Toggle Auto Properties\")",
    ".setTooltip(\"Toggle Ignored Properties\")": ".setTooltip(\"Toggle Ignored Properties\")",
    ".setTooltip(\"Configure which properties are Multi.\")": ".setTooltip(\"Configure which properties are Multi.\")",
    ".setTooltip(\"Toggle Kanban Helper\")": ".setTooltip(\"Toggle Kanban Helper\")",
    ".setTooltip(\"Toggle UI elements\")": ".setTooltip(\"Toggle UI elements\")",
    ".setTitle(\"Edit Meta\")": ".setTitle(\"Edit Meta\")",
    ".setTitle(\"Add YAML property to all files in this folder (and subfolders)\")": ".setTitle(\"Add YAML property to all files in this folder (and subfolders)\")"
  }
}