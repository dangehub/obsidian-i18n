{
  "manifest": {
    "translationVersion": -639075600000,
    "pluginVersion": "2.0.7"
  },
  "description": {
    "original": "Write novels, screenplays, and other long projects in Obsidian.",
    "translation": "Write novels, screenplays, and other long projects in Obsidian."
  },
  "dict": {
    "Notice(\"Obsidian cannot open files that begin with a dot. Consider a different name.\")": "Notice(\"Obsidian cannot open files that begin with a dot. Consider a different name.\")",
    "Notice(\"Compile complete.\")": "Notice(\"Compile complete.\")",
    "Notice(`${type === \"undo\" ? \"Undid\" : \"Redid\"} scene reordering`)": "Notice(`${type === \"undo\" ? \"Undid\" : \"Redid\"} scene reordering`)",
    "Notice(\"Writing goal met!\")": "Notice(\"Writing goal met!\")",
    "log('done saving!')": "log('done saving!')",
    "log('clicked ' + this.label)": "log('clicked ' + this.label)",
    ".log(`[Longform] Running compile step ${step.description.name} with context:`, context)": ".log(`[Longform] Running compile step ${step.description.name} with context:`, context)",
    ".log(`[Longform] Compile workflow \"${workflow.name}\" finished with final result:`, currentInput)": ".log(`[Longform] Compile workflow \"${workflow.name}\" finished with final result:`, currentInput)",
    ".log(\"[Longform] Attempting to open:\", filePath)": ".log(\"[Longform] Attempting to open:\", filePath)",
    ".log(\"[Longform] Writing to:\", filePath)": ".log(\"[Longform] Writing to:\", filePath)",
    ".log(`[Longform] Attempted to migrate settings with version ${settings.version} > current (${LONGFORM_CURRENT_PLUGIN_DATA_VERSION})": ".log(`[Longform] Attempted to migrate settings with version ${settings.version} > current (${LONGFORM_CURRENT_PLUGIN_DATA_VERSION})",
    ".log(`[Longform] Migrating ${projectPath} to Projects 2.0…`)": ".log(`[Longform] Migrating ${projectPath} to Projects 2.0…`)",
    ".log(`[Longform] Error appending deprecation notice to old index file`, error)": ".log(`[Longform] Error appending deprecation notice to old index file`, error)",
    ".log(`[Longform] Wrote only draft to ${vaultPath}`)": ".log(`[Longform] Wrote only draft to ${vaultPath}`)",
    ".log(`[Longform] Error creating folder during migration`, error)": ".log(`[Longform] Error creating folder during migration`, error)",
    ".log(`[Longform] Wrote ${oldDraft.name} to ${vaultPath}`)": ".log(`[Longform] Wrote ${oldDraft.name} to ${vaultPath}`)",
    ".log(`[Longform] File in user script folder modified, reloading scripts…`)": ".log(`[Longform] File in user script folder modified, reloading scripts…`)",
    ".log(\"[Longform] Cleared user script steps.\")": ".log(\"[Longform] Cleared user script steps.\")",
    ".log(`[Longform] Loaded ${userSteps.length} user script steps.`)": ".log(`[Longform] Loaded ${userSteps.length} user script steps.`)",
    ".log(`[Longform] Error loading draft at ${fileWithMetadata.file.path}: invalid longform.format. Ignoring.`)": ".log(`[Longform] Error loading draft at ${fileWithMetadata.file.path}: invalid longform.format. Ignoring.`)",
    ".log(`[Longform] Attempted to insert frontmatter into existing draft at ${file.path}; ignoring.`)": ".log(`[Longform] Attempted to insert frontmatter into existing draft at ${file.path}; ignoring.`)",
    ".log(`[Longform] Cannot create project at ${path}, already exists.`)": ".log(`[Longform] Cannot create project at ${path}, already exists.`)",
    ".log(`[Longform] Starting Longform ${this.manifest.version}…`)": ".log(`[Longform] Starting Longform ${this.manifest.version}…`)",
    ".log(\"[Longform] No workflows found; adding default workflow.\")": ".log(\"[Longform] No workflows found; adding default workflow.\")",
    ".error(`[Longform] Error using plugin [${pluginUsed}]:`, error)": ".error(`[Longform] Error using plugin [${pluginUsed}]:`, error)",
    ".error(`[Longform] Failed to create new note at \"${path}\"`, e)": ".error(`[Longform] Failed to create new note at \"${path}\"`, e)",
    ".error(\"[Longform] Attempted to use Templater plugin while disabled.\")": ".error(\"[Longform] Attempted to use Templater plugin while disabled.\")",
    ".error(\"[Longform] Attempted to use core template plugin while disabled.\")": ".error(\"[Longform] Attempted to use core template plugin while disabled.\")",
    ".error(\"[Longform] insertDraftIntoFrontmatter: processFrontMatter error:\", error)": ".error(\"[Longform] insertDraftIntoFrontmatter: processFrontMatter error:\", error)",
    ".error(\"[Longform] Could not open\", filePath, err)": ".error(\"[Longform] Could not open\", filePath, err)",
    ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)": ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)",
    ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')": ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')",
    ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')": ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')",
    ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)": ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)",
    ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)": ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)",
    ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')": ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')",
    ".error(`[Longform] skipping user script ${file} due to error:`, e)": ".error(`[Longform] skipping user script ${file} due to error:`, e)",
    ".error(`[Longform] Failed to load user script ${path}. No exports detected.`)": ".error(`[Longform] Failed to load user script ${path}. No exports detected.`)",
    ".error(\"[Longform] error manually loading frontmatter:\", error)": ".error(\"[Longform] error manually loading frontmatter:\", error)",
    ".error(\"[Longform] Error calling file-explorer.revealInFolder:\", error)": ".error(\"[Longform] Error calling file-explorer.revealInFolder:\", error)",
    ".error(`[Longform] No manifest.dir for saving sessions.`)": ".error(`[Longform] No manifest.dir for saving sessions.`)",
    "name: \"Default Workflow\"": "name: \"Default Workflow\"",
    "name: \"Concatenate Text\"": "name: \"Concatenate Text\"",
    "name: \"Separator\"": "name: \"Separator\"",
    "name: \"Prepend Title\"": "name: \"Prepend Title\"",
    "name: \"Title Format\"": "name: \"Title Format\"",
    "name: \"Remove Comments\"": "name: \"Remove Comments\"",
    "name: \"Remove Markdown Comments\"": "name: \"Remove Markdown Comments\"",
    "name: \"Remove HTML Comments\"": "name: \"Remove HTML Comments\"",
    "name: \"Remove Links\"": "name: \"Remove Links\"",
    "name: \"Remove Wikilinks\"": "name: \"Remove Wikilinks\"",
    "name: \"Remove External Links\"": "name: \"Remove External Links\"",
    "name: \"Remove Strikethroughs\"": "name: \"Remove Strikethroughs\"",
    "name: \"Strip Frontmatter\"": "name: \"Strip Frontmatter\"",
    "name: \"Save as Note\"": "name: \"Save as Note\"",
    "name: \"Output path\"": "name: \"Output path\"",
    "name: \"Open Compiled Manuscript\"": "name: \"Open Compiled Manuscript\"",
    "name: \"sameWidth\"": "name: \"sameWidth\"",
    "name: \"Compile current project with current workflow\"": "name: \"Compile current project with current workflow\"",
    "name: \"Compile project…\"": "name: \"Compile project…\"",
    "name: \"Previous scene\"": "name: \"Previous scene\"",
    "name: \"Previous scene at indent level\"": "name: \"Previous scene at indent level\"",
    "name: \"Next scene\"": "name: \"Next scene\"",
    "name: \"Next scene at indent level\"": "name: \"Next scene at indent level\"",
    "name: \"Open current note’s project\"": "name: \"Open current note’s project\"",
    "name: \"Open Longform pane\"": "name: \"Open Longform pane\"",
    "name: \"Jump to project\"": "name: \"Jump to project\"",
    "name: \"Jump to scene in current project\"": "name: \"Jump to scene in current project\"",
    "name: \"Reveal current project in navigation\"": "name: \"Reveal current project in navigation\"",
    "name: \"Focus new scene field\"": "name: \"Focus new scene field\"",
    "name: \"Indent scene\"": "name: \"Indent scene\"",
    "name: \"Unindent scene\"": "name: \"Unindent scene\"",
    "name: \"Insert multi-scene frontmatter\"": "name: \"Insert multi-scene frontmatter\"",
    "name: \"Insert single-scene frontmatter\"": "name: \"Insert single-scene frontmatter\"",
    "name: \"Start new writing session\"": "name: \"Start new writing session\"",
    "description: \"\",\n        isScript: false,\n        availableKinds: [],\n        options: [],\n    },\n    optionValues: {},\n    compile: (a) => a,\n};\n\nfunction formatOptionValues(values) {\n    const formattedOptions = {};\n    for (const key of Object.keys(values)) {\n        let v = values[key];\n        if (typeof v === \"": "description: \"\",\n        isScript: false,\n        availableKinds: [],\n        options: [],\n    },\n    optionValues: {},\n    compile: (a) => a,\n};\n\nfunction formatOptionValues(values) {\n    const formattedOptions = {};\n    for (const key of Object.keys(values)) {\n        let v = values[key];\n        if (typeof v === \"",
    "description: \"A starter workflow. Feel free to edit, rename, or delete it and create your own.\"": "description: \"A starter workflow. Feel free to edit, rename, or delete it and create your own.\"",
    "description: \"Combines all scenes together in order into a manuscript.\"": "description: \"Combines all scenes together in order into a manuscript.\"",
    "description: \"Text to put between joined scenes.\"": "description: \"Text to put between joined scenes.\"",
    "description: \"Prepends the scene title to the scene text.\"": "description: \"Prepends the scene title to the scene text.\"",
    "description: \"Format of title. $1 will be replaced with title. $2, if present, will be replaced with scene number. Wrapping text in $3{} will repeat that text a number of times equal to the scene’s indentation level plus one—e.g., $3{#} for unindented scenes becomes “#”.\"": "description: \"Format of title. $1 will be replaced with title. $2, if present, will be replaced with scene number. Wrapping text in $3{} will repeat that text a number of times equal to the scene’s indentation level plus one—e.g., $3{#} for unindented scenes becomes “#”.\"",
    "description: \"Text to put between title and scene text.\"": "description: \"Text to put between title and scene text.\"",
    "description: \"Removes markdown and/or html comments.\"": "description: \"Removes markdown and/or html comments.\"",
    "description: \"Remove markdown-style comments (%% text %%)\"": "description: \"Remove markdown-style comments (%% text %%)\"",
    "description: \"Remove HTML-style comments (<!-- text -->)\"": "description: \"Remove HTML-style comments (<!-- text -->)\"",
    "description: \"Removes wiki and/or external links.\"": "description: \"Removes wiki and/or external links.\"",
    "description: \"Remove brackets from [[wikilinks]].\"": "description: \"Remove brackets from [[wikilinks]].\"",
    "description: \"Remove external links, leaving only the anchor text.\"": "description: \"Remove external links, leaving only the anchor text.\"",
    "description: \"Removes struck-through ~~text~~.\"": "description: \"Removes struck-through ~~text~~.\"",
    "description: \"Removes the YAML frontmatter section from the scene or manuscript.\"": "description: \"Removes the YAML frontmatter section from the scene or manuscript.\"",
    "description: \"Saves your manuscript as a note in your vault.\"": "description: \"Saves your manuscript as a note in your vault.\"",
    "description: \"Path for the created manuscript note, relative to your project. $1 will be replaced with your project’s title.\"": "description: \"Path for the created manuscript note, relative to your project. $1 will be replaced with your project’s title.\"",
    "description: \"If checked, open the compiled manuscript in a new pane.\"": "description: \"If checked, open the compiled manuscript in a new pane.\"",
    "description: \"\",\n\t\t\t\t\tsteps: []\n\t\t\t\t},\n\t\t\t\t$workflows\n\t\t\t);\n\t\t} else if (workflowInputState == \"": "description: \"\",\n\t\t\t\t\tsteps: []\n\t\t\t\t},\n\t\t\t\t$workflows\n\t\t\t);\n\t\t} else if (workflowInputState == \"",
    "text:`, context);\n            statusCallback({\n                kind: \"CompileStatusStep\",\n                stepIndex: index,\n                totalSteps: workflow.steps.length,\n                stepKind: kind,\n            });\n            // TODO: how to enforce typings here?\n            try {\n                // handle the case where we're going scene -> manuscript -> scene\n                if (draft.format === \"single\" && kind === CompileStepKind.Manuscript) {\n                    const result = yield step.compile({\n                        contents: currentInput[0].contents,\n                    }, context);\n                    currentInput[0].contents = result;\n                }\n                else {\n                    currentInput = yield step.compile(currentInput, context);\n                }\n            }\n            catch (error) {\n                console.error(\"[Longform]\", error);\n                statusCallback({\n                    kind: \"CompileStatusError\",\n                    error: `": "text:`, context);\n            statusCallback({\n                kind: \"CompileStatusStep\",\n                stepIndex: index,\n                totalSteps: workflow.steps.length,\n                stepKind: kind,\n            });\n            // TODO: how to enforce typings here?\n            try {\n                // handle the case where we're going scene -> manuscript -> scene\n                if (draft.format === \"single\" && kind === CompileStepKind.Manuscript) {\n                    const result = yield step.compile({\n                        contents: currentInput[0].contents,\n                    }, context);\n                    currentInput[0].contents = result;\n                }\n                else {\n                    currentInput = yield step.compile(currentInput, context);\n                }\n            }\n            catch (error) {\n                console.error(\"[Longform]\", error);\n                statusCallback({\n                    kind: \"CompileStatusError\",\n                    error: `",
    "text: \"Add Compile Step to Workflow\"": "text: \"Add Compile Step to Workflow\"",
    "text: `New Draft of ${title}`": "text: `New Draft of ${title}`",
    "text: \"Create Project\"": "text: \"Create Project\"",
    ".setName(\"Copy Scenes\")": ".setName(\"Copy Scenes\")",
    ".setName(\"Composition\")": ".setName(\"Composition\")",
    ".setName(\"New scene template\")": ".setName(\"New scene template\")",
    ".setName(\"Show scene numbers in Scenes tab\")": ".setName(\"Show scene numbers in Scenes tab\")",
    ".setName(\"Compile\")": ".setName(\"Compile\")",
    ".setName(\"User script step folder\")": ".setName(\"User script step folder\")",
    ".setName(\"Word Counts & Sessions\")": ".setName(\"Word Counts & Sessions\")",
    ".setName(\"Show word counts in status bar\")": ".setName(\"Show word counts in status bar\")",
    ".setName(\"Start new writing sessions each day\")": ".setName(\"Start new writing sessions each day\")",
    ".setName(\"Session word count goal\")": ".setName(\"Session word count goal\")",
    ".setName(\"Goal applies to\")": ".setName(\"Goal applies to\")",
    ".setName(\"Notify on goal reached\")": ".setName(\"Notify on goal reached\")",
    ".setName(\"Count deletions against goal\")": ".setName(\"Count deletions against goal\")",
    ".setName(\"Sessions to keep\")": ".setName(\"Sessions to keep\")",
    ".setName(\"Store session data\")": ".setName(\"Store session data\")",
    ".setName(\"Session storage file\")": ".setName(\"Session storage file\")",
    ".setName(\"Credits\")": ".setName(\"Credits\")",
    ".setDesc(\"If on, all scenes in the current draft will be copied to the new one.\")": ".setDesc(\"If on, all scenes in the current draft will be copied to the new one.\")",
    ".setDesc(\"If on, shows numbers for scenes with subscenes separated by periods, e.g. 1.1.2. Create subscenes by dragging a scene to an indent under an existing scene, or us an indent command.\")": ".setDesc(\"If on, shows numbers for scenes with subscenes separated by periods, e.g. 1.1.2. Create subscenes by dragging a scene to an indent under an existing scene, or us an indent command.\")",
    ".setDesc(\".js files in this folder will be available as User Script Steps in the Compile panel.\")": ".setDesc(\".js files in this folder will be available as User Script Steps in the Compile panel.\")",
    ".setDesc(\"Click the status item to show the focused note’s project.\")": ".setDesc(\"Click the status item to show the focused note’s project.\")",
    ".setDesc(\"You can always manually start a new session by running the Longform: Start New Writing Session command. Turning this off will cause writing sessions to carry over across multiple days until you manually start a new one.\")": ".setDesc(\"You can always manually start a new session by running the Longform: Start New Writing Session command. Turning this off will cause writing sessions to carry over across multiple days until you manually start a new one.\")",
    ".setDesc(\"A number of words to target for a given writing session.\")": ".setDesc(\"A number of words to target for a given writing session.\")",
    ".setDesc(\"You can set your word count goal to target all Longform writing, or you can make each project or scene have its own discrete goal.\")": ".setDesc(\"You can set your word count goal to target all Longform writing, or you can make each project or scene have its own discrete goal.\")",
    ".setDesc(\"If on, deleting words will count as negative words written. You cannot go below zero for a session.\")": ".setDesc(\"If on, deleting words will count as negative words written. You cannot go below zero for a session.\")",
    ".setDesc(\"Number of sessions to store locally.\")": ".setDesc(\"Number of sessions to store locally.\")",
    ".setDesc(\"Where your writing session data is stored. By default, data is stored alongside other Longform settings in the plugin’s data.json file. You may instead store it in a separate .json file in the plugin folder, or in a file in your vault. You may want to do this for selective sync or git reasons.\")": ".setDesc(\"Where your writing session data is stored. By default, data is stored alongside other Longform settings in the plugin’s data.json file. You may instead store it in a separate .json file in the plugin folder, or in a file in your vault. You may want to do this for selective sync or git reasons.\")",
    ".setDesc(\"Location in your vault to store session JSON. Created if does not exist, overwritten if it does.\")": ".setDesc(\"Location in your vault to store session JSON. Created if does not exist, overwritten if it does.\")",
    ".setPlaceholder(\"templates/Scene.md\")": ".setPlaceholder(\"templates/Scene.md\")",
    ".setPlaceholder(\"my/script/steps/\")": ".setPlaceholder(\"my/script/steps/\")",
    ".setTitle(\"Rename\")": ".setTitle(\"Rename\")",
    ".setTitle(\"Delete\")": ".setTitle(\"Delete\")",
    ".setTitle(\"Open in new pane\")": ".setTitle(\"Open in new pane\")",
    ".setTitle(\"Add new scene above\")": ".setTitle(\"Add new scene above\")",
    ".setTitle(\"Add new scene below\")": ".setTitle(\"Add new scene below\")",
    ".setTitle(\"Ignore note in Longform\")": ".setTitle(\"Ignore note in Longform\")",
    ".setTitle(\"Add new workflow\")": ".setTitle(\"Add new workflow\")",
    ".setTitle(`Rename \"${currentWorkflowName}\"`)": ".setTitle(`Rename \"${currentWorkflowName}\"`)",
    ".setTitle(`Delete \"${currentWorkflowName}\"`)": ".setTitle(`Delete \"${currentWorkflowName}\"`)",
    ".setTitle(\"Create Longform Project\")": ".setTitle(\"Create Longform Project\")",
    ".innerText = `${status.error}. See dev console for more details.`": ".innerText = `${status.error}. See dev console for more details.`",
    ".innerText = \"Compiled manuscript.\"": ".innerText = \"Compiled manuscript.\"",
    ".innerText = \"default??\"": ".innerText = \"default??\"",
    ".innerText = `Loaded ${steps.length} step${steps.length !== 1 ? \"s\" : \"\"}:`": ".innerText = `Loaded ${steps.length} step${steps.length !== 1 ? \"s\" : \"\"}:`",
    ".innerText = \"No steps loaded.\"": ".innerText = \"No steps loaded.\"",
    "The first step must be of Scene or Join type; compilation begins with all scenes as input.": "The first step must be of Scene or Join type; compilation begins with all scenes as input.",
    "A Manuscript step must occur after a Join step; Manuscript steps run on a single file, not all scenes.": "A Manuscript step must occur after a Join step; Manuscript steps run on a single file, not all scenes.",
    "A Scene or Join step cannot occur after a Join step; at this point in the workflow, steps must operate on a single file.": "A Scene or Join step cannot occur after a Join step; at this point in the workflow, steps must operate on a single file.",
    "This workflow contains a step that could not be loaded. Please delete or replace it.": "This workflow contains a step that could not be loaded. Please delete or replace it.",
    "Single-scene projects do not support Join steps.": "Single-scene projects do not support Join steps.",
    ".textContent = \"User Script Steps\"": ".textContent = \"User Script Steps\"",
    ".textContent = \"Choose a step from the following options to add to your current compile\\n    workflow.\"": ".textContent = \"Choose a step from the following options to add to your current compile\\n    workflow.\"",
    ".textContent = \"Built-in Steps\"": ".textContent = \"Built-in Steps\"",
    ".textContent = \"X\"": ".textContent = \"X\"",
    ".textContent = \"▼\"": ".textContent = \"▼\"",
    ".textContent = \"Create a new workflow to begin →\"": ".textContent = \"Create a new workflow to begin →\"",
    ".textContent = \"+ Add Step\"": ".textContent = \"+ Add Step\"",
    ".textContent = \"Add all\"": ".textContent = \"Add all\"",
    ".textContent = \"Ignore all\"": ".textContent = \"Ignore all\"",
    ".textContent = \"Add\"": ".textContent = \"Add\"",
    ".textContent = \"Ignore\"": ".textContent = \"Ignore\"",
    ".textContent = \"Project Metadata\"": ".textContent = \"Project Metadata\"",
    ".textContent = \"Title\"": ".textContent = \"Title\"",
    ".textContent = \"Scene Folder\"": ".textContent = \"Scene Folder\"",
    ".textContent = \"Changing scene folder does not move scenes. If you’re moving\\n                scenes to a new folder, move them in your vault first, then\\n                change this setting.\"": ".textContent = \"Changing scene folder does not move scenes. If you’re moving\\n                scenes to a new folder, move them in your vault first, then\\n                change this setting.\"",
    ".textContent = \"Scene Template\"": ".textContent = \"Scene Template\"",
    ".textContent = \"This file will be used as a template when creating new scenes\\n                via the New Scene… field. If you use a templating plugin\\n                (Templater or the core plugin) it will be used to process this\\n                template.\"": ".textContent = \"This file will be used as a template when creating new scenes\\n                via the New Scene… field. If you use a templating plugin\\n                (Templater or the core plugin) it will be used to process this\\n                template.\"",
    ".textContent = \"Project:\"": ".textContent = \"Project:\"",
    ".textContent = \"Scene:\"": ".textContent = \"Scene:\"",
    ".textContent = \"Draft:\"": ".textContent = \"Draft:\"",
    ".textContent = \"Word Count\"": ".textContent = \"Word Count\"",
    ".textContent = \"Drafts\"": ".textContent = \"Drafts\"",
    ".textContent = \"Longform has been upgraded and requires a migration to a new format.\\n      Deprecated index files will be deleted, and some scene files may move.\\n      It’s recommended to back up your vault before migrating.\"": ".textContent = \"Longform has been upgraded and requires a migration to a new format.\\n      Deprecated index files will be deleted, and some scene files may move.\\n      It’s recommended to back up your vault before migrating.\"",
    ".textContent = \"Migrate\"": ".textContent = \"Migrate\"",
    ".textContent = \"Create\"": ".textContent = \"Create\"",
    ".textContent = \" with copied scenes\"": ".textContent = \" with copied scenes\"",
    ".textContent = \"Create a new version of this project. Use the name/version field below to\\n    give your draft an internal name that describes it relative to the larger\\n    project.\"": ".textContent = \"Create a new version of this project. Use the name/version field below to\\n    give your draft an internal name that describes it relative to the larger\\n    project.\"",
    ".textContent = \"Draft Name/Version\"": ".textContent = \"Draft Name/Version\"",
    ".textContent = \"Because this project type involves multiple notes, Longform will create\\n        an enclosing folder for your project and its scenes. You can always\\n        rename the folder, the index file, or both.\"": ".textContent = \"Because this project type involves multiple notes, Longform will create\\n        an enclosing folder for your project and its scenes. You can always\\n        rename the folder, the index file, or both.\"",
    ".textContent = \"Multi\"": ".textContent = \"Multi\"",
    ".textContent = \"Single\"": ".textContent = \"Single\"",
    ".addOption(\"all\", \"words written across all projects\")": ".addOption(\"all\", \"words written across all projects\")",
    ".addOption(\"project\", \"each project individually\")": ".addOption(\"project\", \"each project individually\")",
    ".addOption(\"note\", \"each scene or single-scene project\")": ".addOption(\"note\", \"each scene or single-scene project\")",
    ".addOption(\"data\", \"with Longform settings\")": ".addOption(\"data\", \"with Longform settings\")",
    ".addOption(\"plugin-folder\", \"as a .json file in the longform/ plugin folder\")": ".addOption(\"plugin-folder\", \"as a .json file in the longform/ plugin folder\")",
    ".addOption(\"file\", \"as a file in your vault\")": ".addOption(\"file\", \"as a file in your vault\")",
    ".innerHTML = `Compile workflows run their steps in order.<br/><b>Scene</b> workflows\n      run once per scene.<br/><b>Join</b> workflows run once and combine the\n      rest of your scene steps into a single manuscript.<br/><b>Manuscript</b>\n      steps run once on the joined manuscript.<br/>Drag to rearrange.\n      <a href=\"": ".innerHTML = `Compile workflows run their steps in order.<br/><b>Scene</b> workflows\n      run once per scene.<br/><b>Join</b> workflows run once and combine the\n      rest of your scene steps into a single manuscript.<br/><b>Manuscript</b>\n      steps run once on the joined manuscript.<br/>Drag to rearrange.\n      <a href=\"",
    ".innerHTML = `To begin, find or create a folder somewhere in your vault in which \n      you would like to create your novel. Right-click it and select \n      <code>Create Longform Project.</code>`": ".innerHTML = `To begin, find or create a folder somewhere in your vault in which \n      you would like to create your novel. Right-click it and select \n      <code>Create Longform Project.</code>`",
    ".innerHTML = `You can view the docs and an explanation of what this migration does <a href=\"": ".innerHTML = `You can view the docs and an explanation of what this migration does <a href=\"",
    ".innerHTML =\n                \"This file will be used as a template when creating new scenes via the New Scene… field. If you use a templating plugin (Templater or the core plugin) it will be used to process this template. This setting applies to all projects and can be overridden per-project in the Project > Project Metadata settings in the Longform pane.\"": ".innerHTML =\n                \"This file will be used as a template when creating new scenes via the New Scene… field. If you use a templating plugin (Templater or the core plugin) it will be used to process this template. This setting applies to all projects and can be overridden per-project in the Project > Project Metadata settings in the Longform pane.\"",
    ".innerHTML =\n                \"User Script Steps are automatically loaded from this folder. Changes to .js files in this folder are synced with Longform after a slight delay. If your script does not appear here or in the Compile tab, you may have an error in your script—check the dev console for it.\"": ".innerHTML =\n                \"User Script Steps are automatically loaded from this folder. Changes to .js files in this folder are synced with Longform after a slight delay. If your script does not appear here or in the Compile tab, you may have an error in your script—check the dev console for it.\"",
    ".innerHTML =\n                'Longform written and maintained by <a href=\"": ".innerHTML =\n                'Longform written and maintained by <a href=\"",
    ".innerHTML =\n                'Read the source code and report issues at <a href=\"": ".innerHTML =\n                'Read the source code and report issues at <a href=\"",
    ".innerHTML =\n                'Icon made by <a href=\"": ".innerHTML =\n                'Icon made by <a href=\"",
    ".innerHTML = `A <i>single-scene project</i> is a single note, perhaps a short story or\n        essay, that includes its own YAML frontmatter which is used by Longform to\n        track your project.`": ".innerHTML = `A <i>single-scene project</i> is a single note, perhaps a short story or\n        essay, that includes its own YAML frontmatter which is used by Longform to\n        track your project.`",
    ".innerHTML = `A <i>multi-scene project</i> is comprised of many ordered notes, called “scenes,”\n        that you can combine together into your manuscript. It also includes an index\n        file, the YAML frontmatter of which is used by Longform to track your project.`": ".innerHTML = `A <i>multi-scene project</i> is comprised of many ordered notes, called “scenes,”\n        that you can combine together into your manuscript. It also includes an index\n        file, the YAML frontmatter of which is used by Longform to track your project.`",
    "text(\"Longform has found \")": "text(\"Longform has found \")",
    "text(\" new file\")": "text(\" new file\")",
    "text(\" in your scenes folder.\")": "text(\" in your scenes folder.\")",
    "text(\"You are creating a new draft\")": "text(\"You are creating a new draft\")",
    "text(\" from your current draft\\n        \")": "text(\" from your current draft\\n        \")",
    "text(\"You are creating a \")": "text(\"You are creating a \")",
    "My Project Title": "My Project Title",
    "Scenes": "Scenes",
    "Project": "Project",
    "Compile": "Compile"
  }
}