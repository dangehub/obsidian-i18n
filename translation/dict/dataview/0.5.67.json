{
  "manifest": {
    "translationVersion": 1732714859589,
    "pluginVersion": "0.5.67"
  },
  "description": {
    "original": "Complex data views for the data-obsessed.",
    "translation": "Complex data views for the data-obsessed."
  },
  "dict": {
    ".setName(\"Enable inline queries\")": ".setName(\"Enable inline queries\")",
    ".setName(\"Enable JavaScript queries\")": ".setName(\"Enable JavaScript queries\")",
    ".setName(\"Enable inline JavaScript queries\")": ".setName(\"Enable inline JavaScript queries\")",
    ".setName(\"Enable inline field highlighting in reading view\")": ".setName(\"Enable inline field highlighting in reading view\")",
    ".setName(\"Enable inline field highlighting in Live Preview\")": ".setName(\"Enable inline field highlighting in Live Preview\")",
    ".setName(\"Codeblocks\")": ".setName(\"Codeblocks\")",
    ".setName(\"DataviewJS keyword\")": ".setName(\"DataviewJS keyword\")",
    ".setName(\"Inline query prefix\")": ".setName(\"Inline query prefix\")",
    ".setName(\"JavaScript inline query prefix\")": ".setName(\"JavaScript inline query prefix\")",
    ".setName(\"Code block inline queries\")": ".setName(\"Code block inline queries\")",
    ".setName(\"View\")": ".setName(\"View\")",
    ".setName(\"Display result count\")": ".setName(\"Display result count\")",
    ".setName(\"Warn on empty result\")": ".setName(\"Warn on empty result\")",
    ".setName(\"Render null as\")": ".setName(\"Render null as\")",
    ".setName(\"Automatic view refreshing\")": ".setName(\"Automatic view refreshing\")",
    ".setName(\"Refresh interval\")": ".setName(\"Refresh interval\")",
    ".setName(\"Date format\")": ".setName(\"Date format\")",
    ".setName(\"Date + time format\")": ".setName(\"Date + time format\")",
    ".setName(\"Tables\")": ".setName(\"Tables\")",
    ".setName(\"Primary column name\")": ".setName(\"Primary column name\")",
    ".setName(\"Grouped column name\")": ".setName(\"Grouped column name\")",
    ".setName(\"Tasks\")": ".setName(\"Tasks\")",
    ".setName(\"Automatic task completion tracking\")": ".setName(\"Automatic task completion tracking\")",
    ".setName(\"Use emoji shorthand for completion\")": ".setName(\"Use emoji shorthand for completion\")",
    ".setName(\"Completion field name\")": ".setName(\"Completion field name\")",
    ".setName(\"Completion date format\")": ".setName(\"Completion date format\")",
    ".setName(\"Recursive sub-task completion\")": ".setName(\"Recursive sub-task completion\")",
    ".setDesc(\"Enable or disable executing regular inline Dataview queries.\")": ".setDesc(\"Enable or disable executing regular inline Dataview queries.\")",
    ".setDesc(\"Enable or disable executing DataviewJS queries.\")": ".setDesc(\"Enable or disable executing DataviewJS queries.\")",
    ".setDesc(\"Enable or disable executing inline DataviewJS queries. Requires that DataviewJS queries are enabled.\")": ".setDesc(\"Enable or disable executing inline DataviewJS queries. Requires that DataviewJS queries are enabled.\")",
    ".setDesc(\"Enables or disables visual highlighting / pretty rendering for inline fields in reading view.\")": ".setDesc(\"Enables or disables visual highlighting / pretty rendering for inline fields in reading view.\")",
    ".setDesc(\"Enables or disables visual highlighting / pretty rendering for inline fields in Live Preview.\")": ".setDesc(\"Enables or disables visual highlighting / pretty rendering for inline fields in Live Preview.\")",
    ".setDesc(\"Keyword for DataviewJS blocks. Defaults to 'dataviewjs'. Reload required for changes to take effect.\")": ".setDesc(\"Keyword for DataviewJS blocks. Defaults to 'dataviewjs'. Reload required for changes to take effect.\")",
    ".appendText(\"Example with default field name and date format: - [x] my task [completion:: 2022-01-01]\")": ".appendText(\"Example with default field name and date format: - [x] my task [completion:: 2022-01-01]\")",
    ".appendText(\"Example: - [x] my task ✅ 2022-01-01\")": ".appendText(\"Example: - [x] my task ✅ 2022-01-01\")",
    ".appendText(\"Text used as inline field key for task completion date when toggling a task's checkbox in a Dataview view.\")": ".appendText(\"Text used as inline field key for task completion date when toggling a task's checkbox in a Dataview view.\")",
    "\"that links to the source file/group.\")": "\"that links to the source file/group.\")",
    "\" Currently: \" +": "\" Currently: \" +",
    "return \"Got the end of the input\"": "return \"Got the end of the input\"",
    "\"Expected one of the following:": "\"Expected one of the following:",
    "\"Not a comment\"": "\"Not a comment\"",
    "\"-- PARSING FAILED \"": "\"-- PARSING FAILED \"",
    "message: \"Dataview: No results to show for list query.\"": "message: \"Dataview: No results to show for list query.\"",
    "message: \"Dataview: No results to show for task query.\"": "message: \"Dataview: No results to show for task query.\"",
    "message: \"Dataview: No results to show for table query.\"": "message: \"Dataview: No results to show for table query.\"",
    "Error(\"Super expression must either be null or a function\"": "Error(\"Super expression must either be null or a function\"",
    "Error(\"Invalid unit value \"": "Error(\"Invalid unit value \"",
    "Error(\"Value format \"": "Error(\"Value format \"",
    "Error(\"Unknown duration argument \"": "Error(\"Unknown duration argument \"",
    "Error(\"need to specify a reason the Duration is invalid\"": "Error(\"need to specify a reason the Duration is invalid\"",
    "Error(\"need to specify a reason the Interval is invalid\"": "Error(\"need to specify a reason the Interval is invalid\"",
    "Error(\"Can't include meridiem when specifying 24-hour format\"": "Error(\"Can't include meridiem when specifying 24-hour format\"",
    "Error(\"fromSeconds requires a numerical input\"": "Error(\"fromSeconds requires a numerical input\"",
    "Error(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"": "Error(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"",
    "Error(\"Can't mix ordinal dates with month/day\"": "Error(\"Can't mix ordinal dates with month/day\"",
    "Error(\"fromFormat requires an input string and a format\"": "Error(\"fromFormat requires an input string and a format\"",
    "Error(\"need to specify a reason the DateTime is invalid\"": "Error(\"need to specify a reason the DateTime is invalid\"",
    "Error(\"min requires all arguments be DateTimes\"": "Error(\"min requires all arguments be DateTimes\"",
    "Error(\"max requires all arguments be DateTimes\"": "Error(\"max requires all arguments be DateTimes\"",
    "Error(\"Unknown datetime argument: \"": "Error(\"Unknown datetime argument: \"",
    "Error(\"The bits [\"": "Error(\"The bits [\"",
    "Error(\"not a parser: \"": "Error(\"not a parser: \"",
    "Error(\"not a number: \"": "Error(\"not a number: \"",
    "Error(\"not a function: \"": "Error(\"not a function: \"",
    "Error(\"not a string: \"": "Error(\"not a string: \"",
    "Error(\"seqMap needs at least one argument\"": "Error(\"seqMap needs at least one argument\"",
    "Error(\"not a regexp: \"": "Error(\"not a regexp: \"",
    "Error('unsupported regexp flag \"'": "Error('unsupported regexp flag \"'",
    "Error(\"not a string, regexp, or parser: \"": "Error(\"not a string, regexp, or parser: \"",
    "Error(\".parse must be called with a string or Buffer as its argument\"": "Error(\".parse must be called with a string or Buffer as its argument\"",
    "Error(\"infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause\"": "Error(\"infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause\"",
    "Error(\"not an array: \"": "Error(\"not an array: \"",
    "Error(\"seqObj: duplicate key \"": "Error(\"seqObj: duplicate key \"",
    "Error(\"duplicate key in bitSeqObj: \"": "Error(\"duplicate key in bitSeqObj: \"",
    "Error(\"Value specified to byte constructor (\"": "Error(\"Value specified to byte constructor (\"",
    "Error(\"Option columns is empty\"": "Error(\"Option columns is empty\"",
    "Error(\"Unable to serialize unrecognized input\"": "Error(\"Unable to serialize unrecognized input\"",
    "Error(\"Comment character same as delimiter\"": "Error(\"Comment character same as delimiter\"",
    "Error(\"Input must be a string\"": "Error(\"Input must be a string\"",
    "Error(\"Not implemented.\"": "Error(\"Not implemented.\"",
    "Error(\"Unrecognized transferable value: \"": "Error(\"Unrecognized transferable value: \"",
    "Error(\"Cannot find module '\"": "Error(\"Cannot find module '\"",
    "Error('resolver must be a function'": "Error('resolver must be a function'",
    "Error('Cannot resolve promise with itself'": "Error('Cannot resolve promise with itself'",
    "Error('must be an array'": "Error('must be an array'",
    "Error(\"Cannot call a class as a function\"": "Error(\"Cannot call a class as a function\"",
    "Error('Failed to get type for BinaryArray'": "Error('Failed to get type for BinaryArray'",
    "error(\"Couldn't convert value into a JSON string: \"": "error(\"Couldn't convert value into a JSON string: \"",
    "Error('Unkown type: '": "Error('Unkown type: '",
    "Error('Database version must be a number.'": "Error('Database version must be a number.'",
    "Error('Driver not found.'": "Error('Driver not found.'",
    "Error('No available storage method found.'": "Error('No available storage method found.'",
    "Error(`Unrecognized argument type for argument '${arg}'`": "Error(`Unrecognized argument type for argument '${arg}'`",
    "Error(`No implementation of '${this.name}' found for arguments: ${types.join(\", \")}`": "Error(`No implementation of '${this.name}' found for arguments: ${types.join(\", \")}`",
    "Error(\"object() requires an even number of arguments\"": "Error(\"object() requires an even number of arguments\"",
    "Error(\"keys should be of type string for object(key1, value1, ...)\"": "Error(\"keys should be of type string for object(key1, value1, ...)\"",
    "Error(\"extract(object, key1, ...) must be called with string keys\"": "Error(\"extract(object, key1, ...) must be called with string keys\"",
    "Error(`Invalid regexp '${pat}' in regexreplace`": "Error(`Invalid regexp '${pat}' in regexreplace`",
    "Error('Invalid argument expected string'": "Error('Invalid argument expected string'",
    "Error(`Invalid argument not valid semver ('${v}' received)`": "Error(`Invalid argument not valid semver ('${v}' received)`",
    "Error('Function called outside component initialization'": "Error('Function called outside component initialization'",
    "Error(`The number of headers (${headers.length}) must match the number of columns (${values[0].length})`": "Error(`The number of headers (${headers.length}) must match the number of columns (${values[0].length})`",
    "Error(\"reduce(array, op) supports '+', '-', '/', '*', '&', and '|'\"": "Error(\"reduce(array, op) supports '+', '-', '/', '*', '&', and '|'\"",
    "Error(`Unrecognized level '${level}' (expected 1, 2, 3, 4, 5, or 6)`": "Error(`Unrecognized level '${level}' (expected 1, 2, 3, 4, 5, or 6)`",
    "Error(`Could not find CSV for path '${path}' (relative to origin '${originFile !== null && originFile !== void 0 ? originFile : \"/\"}')`": "Error(`Could not find CSV for path '${path}' (relative to origin '${originFile !== null && originFile !== void 0 ? originFile : \"/\"}')`",
    "Error(`Failed to parse query in 'pagePaths': ${ex}`": "Error(`Failed to parse query in 'pagePaths': ${ex}`",
    ".desc(\"whitespace\"": ".desc(\"whitespace\"",
    ".desc(\"a digit\"": ".desc(\"a digit\"",
    ".desc(\"optional digits\"": ".desc(\"optional digits\"",
    ".desc(\"a letter\"": ".desc(\"a letter\"",
    ".desc(\"optional letters\"": ".desc(\"optional letters\"",
    ".desc(\"optional whitespace\"": ".desc(\"optional whitespace\"",
    ".desc(\"none of '\"": ".desc(\"none of '\"",
    ".desc(\"boolean ('true' or 'false')\"": ".desc(\"boolean ('true' or 'false')\"",
    ".desc(\"tag ('#hello/stuff')\"": ".desc(\"tag ('#hello/stuff')\"",
    ".desc(\"variable identifier\"": ".desc(\"variable identifier\"",
    ".desc(\"file link\"": ".desc(\"file link\"",
    ".desc(\"'+' or '-'\"": ".desc(\"'+' or '-'\"",
    ".desc(\"'*' or '/' or '%'\"": ".desc(\"'*' or '/' or '%'\"",
    ".desc(\"'>=' or '<=' or '!=' or '=' or '>' or '<'\"": ".desc(\"'>=' or '<=' or '!=' or '=' or '>' or '<'\"",
    ".desc(\"'and' or 'or'\"": ".desc(\"'and' or 'or'\"",
    ".desc(\"date in format YYYY-MM[-DDTHH-MM-SS.MS]\"": ".desc(\"date in format YYYY-MM[-DDTHH-MM-SS.MS]\"",
    ".desc(\"date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand\"": ".desc(\"date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand\"",
    ".desc(\"duration like 4hr2min\"": ".desc(\"duration like 4hr2min\"",
    ".desc(\"list ('[1, 2, 3]')\"": ".desc(\"list ('[1, 2, 3]')\"",
    ".desc(\"object ('{ a: 1, b: 2 }')\"": ".desc(\"object ('{ a: 1, b: 2 }')\"",
    ".desc(\"negated field\"": ".desc(\"negated field\"",
    ".desc(\"TABLE or LIST or TASK or CALENDAR\"": ".desc(\"TABLE or LIST or TASK or CALENDAR\"",
    ".desc(\"WHERE <expression>\"": ".desc(\"WHERE <expression>\"",
    ".desc(\"LIMIT <value>\"": ".desc(\"LIMIT <value>\"",
    ".desc(\"FLATTEN <value> [AS <name>]\"": ".desc(\"FLATTEN <value> [AS <name>]\"",
    ".desc(\"GROUP BY <value> [AS <name>]\"": ".desc(\"GROUP BY <value> [AS <name>]\"",
    "\"Evaluation Error: \"": "\"Evaluation Error: \"",
    ".setDesc(\"If enabled, views will automatically refresh when files in your vault change; this can negatively affect\" +\n            \" some functionality like embeds in views, so turn it off if such functionality is not working.\")": ".setDesc(\"If enabled, views will automatically refresh when files in your vault change; this can negatively affect\" +\n            \" some functionality like embeds in views, so turn it off if such functionality is not working.\")",
    ".setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\" +\n            \"that links to the source file/group.\")": ".setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\" +\n            \"that links to the source file/group.\")",
    "super(`Invalid DateTime: ${reason.toMessage()}`);": "super(`Invalid DateTime: ${reason.toMessage()}`);",
    "super(`Invalid Interval: ${reason.toMessage()}`);": "super(`Invalid Interval: ${reason.toMessage()}`);",
    "super(`Invalid Duration: ${reason.toMessage()}`);": "super(`Invalid Duration: ${reason.toMessage()}`);",
    "super(`Invalid unit ${unit}`);": "super(`Invalid unit ${unit}`);",
    "super(\"Zone is an abstract class\");": "super(\"Zone is an abstract class\");",
    "Error(`Invalid unit value ${value}`)": "Error(`Invalid unit value ${value}`)",
    "Error(`Value format ${format} is out of range for property format`)": "Error(`Value format ${format} is out of range for property format`)",
    "Error(`Unrecognized transfer type '${transferable[\"___transfer-type\"]}'`)": "Error(`Unrecognized transfer type '${transferable[\"___transfer-type\"]}'`)",
    "Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')": "Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')",
    "Error(\"Can't call config() after localforage \" + 'has been used.')": "Error(\"Can't call config() after localforage \" + 'has been used.')",
    "Error(\"Not a number for format( (${ f }): ${ d }\")": "Error(\"Not a number for format( (${ f }): ${ d }\")",
    "Error(`Can't handle format (${f}) on date string (${d})`)": "Error(`Can't handle format (${f}) on date string (${d})`)",
    "Error(`Could not find CSV for path '${path}' (relative to origin '${originFile ?? \"/\"}')`)": "Error(`Could not find CSV for path '${path}' (relative to origin '${originFile ?? \"/\"}')`)",
    "Error(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`": "Error(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`",
    "Error(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`": "Error(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`",
    "Error(\n        \"Can't include meridiem when specifying 24-hour format\"": "Error(\n        \"Can't include meridiem when specifying 24-hour format\"",
    "Error(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`": "Error(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`",
    "Error(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"": "Error(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"",
    "Error(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`": "Error(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`",
    "Error(n+\" requires integer length in range [0, 6].\")": "Error(n+\" requires integer length in range [0, 6].\")",
    "Error('Method ' + methodName + ' is not implemented by the current driver')": "Error('Method ' + methodName + ' is not implemented by the current driver')",
    "Error(\n      `Invalid operator type, expected string but got ${typeof op}`": "Error(\n      `Invalid operator type, expected string but got ${typeof op}`",
    "Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`": "Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`",
    ".warn(key + ' used as a key, but it is not a string.')": ".warn(key + ' used as a key, but it is not a string.')",
    ".warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.')": ".warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.')",
    ".warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.')": ".warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.')",
    ".warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed')": ".warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed')",
    "invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`)": "invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`)",
    "invalid(\"missing or invalid start\")": "invalid(\"missing or invalid start\")",
    "invalid(\"missing or invalid end\")": "invalid(\"missing or invalid end\")",
    "invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    )": "invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    )",
    "Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  )": "Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  )",
    "Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`)": "Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`)",
    "Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)": "Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)",
    "invalid(\"invalid input\")": "invalid(\"invalid input\")",
    "Invalid(\"invalid input\")": "Invalid(\"invalid input\")",
    "invalid(\"Timestamp out of range\")": "invalid(\"Timestamp out of range\")",
    "invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      )": "invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      )",
    "invalid(\"created by diffing an invalid DateTime\")": "invalid(\"created by diffing an invalid DateTime\")",
    ".failure(`Failed to load data from path '${path}'.`)": ".failure(`Failed to load data from path '${path}'.`)",
    ".failure(`Could not find file \"${source.file}\" during link lookup - does it exist?`)": ".failure(`Could not find file \"${source.file}\" during link lookup - does it exist?`)",
    ".failure(`Unrecognized operator '${source.op}'.`)": ".failure(`Unrecognized operator '${source.op}'.`)",
    ".failure(`Unrecognized value '${left}'`)": ".failure(`Unrecognized value '${left}'`)",
    ".failure(`Unrecognized value '${right}'`)": ".failure(`Unrecognized value '${right}'`)",
    ".failure(`No implementation found for '${leftType} ${op} ${rightType}'`)": ".failure(`No implementation found for '${leftType} ${op} ${rightType}'`)",
    ".failure(`Unrecognized function name '${func}'`)": ".failure(`Unrecognized function name '${func}'`)",
    ".failure(`Cannot call type '${Values.typeOf(func)}' as a function`)": ".failure(`Cannot call type '${Values.typeOf(func)}' as a function`)",
    ".failure(\"Can only index with a string or number\")": ".failure(\"Can only index with a string or number\")",
    ".failure(\"Unrecognized object to index into: \" + object)": ".failure(\"Unrecognized object to index into: \" + object)",
    ".failure('can only index into objects with strings (a.b or a[\"b\"])')": ".failure('can only index into objects with strings (a.b or a[\"b\"])')",
    ".failure('can only index into links with strings (a.b or a[\"b\"])')": ".failure('can only index into links with strings (a.b or a[\"b\"])')",
    ".failure(\"Array indexing requires either a number (to get a specific element), or a string (to map all elements inside the array)\")": ".failure(\"Array indexing requires either a number (to get a specific element), or a string (to map all elements inside the array)\")",
    ".failure(\"string indexing requires a numeric index (string[index])\")": ".failure(\"string indexing requires a numeric index (string[index])\")",
    ".failure(\"date indexing requires a string representing the unit\")": ".failure(\"date indexing requires a string representing the unit\")",
    ".failure(\"duration indexing requires a string representing the unit\")": ".failure(\"duration indexing requires a string representing the unit\")",
    ".failure(\"Failed to execute 'limit' statement: \" + limiting.error)": ".failure(\"Failed to execute 'limit' statement: \" + limiting.error)",
    ".failure(`Failed to execute 'limit' statement: limit should be a number, but got '${Values.typeOf(limiting.value)}' (${limiting.value})`)": ".failure(`Failed to execute 'limit' statement: limit should be a number, but got '${Values.typeOf(limiting.value)}' (${limiting.value})`)",
    ".failure(\"Unrecognized query operation '\" + op.type + \"'\")": ".failure(\"Unrecognized query operation '\" + op.type + \"'\")",
    ".failure(`Every row during operation '${op.type}' failed with an error; first": ".failure(`Every row during operation '${op.type}' failed with an error; first",
    ".failure(`Every row during final data extraction failed with an error; first": ".failure(`Every row during final data extraction failed with an error; first",
    ".failure(`Failed to parse expression \"${expression}\"`)": ".failure(`Failed to parse expression \"${expression}\"`)",
    ".failure(\"Cannot render calendar queries to markdown.\")": ".failure(\"Cannot render calendar queries to markdown.\")",
    "\"Dataview: Query returned 0 results.\"": "\"Dataview: Query returned 0 results.\"",
    "missing Intl.DateTimeFormat.formatToParts support": "missing Intl.DateTimeFormat.formatToParts support",
    ".info('Redefining LocalForage driver: ' + driverName)": ".info('Redefining LocalForage driver: ' + driverName)",
    ".fail(`Unrecognized query type '${type}'`)": ".fail(`Unrecognized query type '${type}'`)",
    "description: \"Cache metadata about files and sections in the dataview index.\"": "description: \"Cache metadata about files and sections in the dataview index.\"",
    "`Dataview: custom view not found for '${simpleViewPath}' or '${complexViewPath}'.`": "`Dataview: custom view not found for '${simpleViewPath}' or '${complexViewPath}'.`",
    "`Dataview: Failed to execute view '${viewFile.path}'.\n\n${ex}`": "`Dataview: Failed to execute view '${viewFile.path}'.\n\n${ex}`",
    "\"Dataview JS queries are disabled. You can enable them in the Dataview settings.\"": "\"Dataview JS queries are disabled. You can enable them in the Dataview settings.\"",
    "\"Dataview (for inline JS query '\" + this.script + \"'): \"": "\"Dataview (for inline JS query '\" + this.script + \"'): \"",
    "\"Dataview (for inline query '\" + this.fieldText + \"'): \"": "\"Dataview (for inline query '\" + this.fieldText + \"'): \"",
    "`Dataview (inline field '${potentialField}'): ${field.error}`": "`Dataview (inline field '${potentialField}'): ${field.error}`",
    "`Dataview (inline field '${code}'): ${field.error}`": "`Dataview (inline field '${code}'): ${field.error}`",
    "`Dataview (for inline query '${fieldValue}'): ${intermediateResult.error}`": "`Dataview (for inline query '${fieldValue}'): ${intermediateResult.error}`",
    "\"Date-time format for task completion date when toggling a task's checkbox in a Dataview view (see Luxon date format options).\"": "\"Date-time format for task completion date when toggling a task's checkbox in a Dataview view (see Luxon date format options).\"",
    "'Only available when \"automatic task completion tracking\" is enabled and \"use emoji shorthand for completion\" is disabled.'": "'Only available when \"automatic task completion tracking\" is enabled and \"use emoji shorthand for completion\" is disabled.'",
    "\"Currently: \"": "\"Currently: \"",
    "\"(disabled; enable in settings)\"": "\"(disabled; enable in settings)\"",
    "`Dataview (for inline JS query '${code}'): ${e}`": "`Dataview (for inline JS query '${code}'): ${e}`",
    "name: \"Force refresh all views and blocks\"": "name: \"Force refresh all views and blocks\"",
    "name: \"Drop all cached file metadata\"": "name: \"Drop all cached file metadata\"",
    "name: \"Rebuild current view\"": "name: \"Rebuild current view\"",
    "name: \"Dataview Indexer \"": "name: \"Dataview Indexer \"",
    ".setDesc(\"If enabled, views will automatically refresh when files in your vault change; this can negatively affect\" +\n            \" some functionality like embeds in views, so turn it off if such functionality is not working.\")": ".setDesc(\"If enabled, views will automatically refresh when files in your vault change; this can negatively affect\" +\n            \" some functionality like embeds in views, so turn it off if such functionality is not working.\")",
    ".setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\" +\n            \"that links to the source file/group.\")": ".setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\" +\n            \"that links to the source file/group.\")",
    "Error('Could not dynamically require \"'": "Error('Could not dynamically require \"'",
    "Error(\"Can't call config() after localforage \"": "Error(\"Can't call config() after localforage \"",
    "Error('Method '": "Error('Method '",
    ".setDesc(\"The prefix to inline queries (to mark them as Dataview queries). Defaults to '='.\")": ".setDesc(\"The prefix to inline queries (to mark them as Dataview queries). Defaults to '='.\")",
    ".setDesc(\"The prefix to JavaScript inline queries (to mark them as DataviewJS queries). Defaults to '$='.\")": ".setDesc(\"The prefix to JavaScript inline queries (to mark them as DataviewJS queries). Defaults to '$='.\")",
    ".setDesc(\"If toggled off, the small number in the result header of TASK and TABLE queries will be hidden.\")": ".setDesc(\"If toggled off, the small number in the result header of TASK and TABLE queries will be hidden.\")",
    ".setDesc(\"What null/non-existent should show up as in tables, by default. This supports Markdown notation.\")": ".setDesc(\"What null/non-existent should show up as in tables, by default. This supports Markdown notation.\")",
    " .setDesc(\"If enabled, inline queries will also be evaluated inside full code blocks.\")": " .setDesc(\"If enabled, inline queries will also be evaluated inside full code blocks.\")",
    ".setDesc(\"If set, queries which return 0 results will render a warning message.\")": ".setDesc(\"If set, queries which return 0 results will render a warning message.\")",
    ".setDesc(\"How long to wait (in milliseconds) for files to stop changing before updating views.\")": ".setDesc(\"How long to wait (in milliseconds) for files to stop changing before updating views.\")",
    ".setDesc(\"The default date format (see Luxon date format options).\" ": ".setDesc(\"The default date format (see Luxon date format options).\" ",
    ".setDesc(\"The default date and time format (see Luxon date format options).\" +": ".setDesc(\"The default date and time format (see Luxon date format options).\" +",
    ".setDesc(\"The name of the default ID column in tables; this is the auto-generated first column that links to the source file.\")": ".setDesc(\"The name of the default ID column in tables; this is the auto-generated first column that links to the source file.\")",
    "setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\"": "setDesc(\"The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column\"",
    ".appendText(\"If enabled, Dataview will automatically append tasks with their completion date when they are checked in Dataview views.\");": ".appendText(\"If enabled, Dataview will automatically append tasks with their completion date when they are checked in Dataview views.\");",
    ".appendText('If enabled, will use emoji shorthand instead of inline field formatting to fill out implicit task field \"completion\".')": ".appendText('If enabled, will use emoji shorthand instead of inline field formatting to fill out implicit task field \"completion\".')",
    ".appendText(\"Disable this to customize the completion date format or field name, or to use Dataview inline field formatting.\");": ".appendText(\"Disable this to customize the completion date format or field name, or to use Dataview inline field formatting.\");",
    ".appendText('Only available when \"automatic task completion tracking\" is enabled.');": ".appendText('Only available when \"automatic task completion tracking\" is enabled.');",
    ".setDesc('Only available when \"automatic task completion tracking\" is enabled.');": ".setDesc('Only available when \"automatic task completion tracking\" is enabled.');",
    ".setDesc(\"If enabled, completing a task in a Dataview will automatically complete its subtasks too.\")": ".setDesc(\"If enabled, completing a task in a Dataview will automatically complete its subtasks too.\")"
  }
}