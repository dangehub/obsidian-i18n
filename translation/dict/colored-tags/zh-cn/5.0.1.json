{
  "manifest": {
    "translationVersion": 1730386661917,
    "pluginVersion": "5.0.1"
  },
  "description": {
    "original": "Colorizes tags in different colors. Colors of nested tags are mixed with the root tag to improve readability. Text color contrast is automatically matched to comply with AA level of WCAG 2.1.",
    "translation": "Colorizes tags in different colors. Colors of nested tags are mixed with the root tag to improve readability. Text color contrast is automatically matched to comply with AA level of WCAG 2.1."
  },
  "dict": {
    ".setButtonText(\"Reset\")": ".setButtonText(\"Reset\")",
    ".setName(\"Palette\")": ".setName(\"Palette\")",
    ".setName(\"Custom palette\")": ".setName(\"Custom palette\")",
    ".setName(\"Palette shift\")": ".setName(\"Palette shift\")",
    ".setName(\"\\u{1F9BE} Accessibility\")": ".setName(\"\\u{1F9BE} Accessibility\")",
    ".setName(\"High text contrast\")": ".setName(\"High text contrast\")",
    ".setName(\"\\u{1F9EA} Experimental\")": ".setName(\"\\u{1F9EA} Experimental\")",
    ".setName(\"Mix colors\")": ".setName(\"Mix colors\")",
    ".setName(\"Gradient transition\")": ".setName(\"Gradient transition\")",
    ".setName(\"Reset config\")": ".setName(\"Reset config\")",
    ".setDesc(\"Select palette\")": ".setDesc(\"Select palette\")",
    ".setDesc(\"\").addText((text) => {\n        text.inputEl.style.minWidth = \"100%\";\n        text.setValue(\n          this.plugin.settings.palette.custom\n        ).setPlaceholder(\"Paste palette\")": ".setDesc(\"\").addText((text) => {\n        text.inputEl.style.minWidth = \"100%\";\n        text.setValue(\n          this.plugin.settings.palette.custom\n        ).setPlaceholder(\"Paste palette\")",
    ".setDesc(\n      \"If the colors of some tags don't fit, you can shift the palette.\"\n    )": ".setDesc(\n      \"If the colors of some tags don't fit, you can shift the palette.\"\n    )",
    ".setDesc(\"Show accessibility options\")": ".setDesc(\"Show accessibility options\")",
    ".setDesc(\"Use only white and black colors for texts\")": ".setDesc(\"Use only white and black colors for texts\")",
    ".setDesc(\n      \"Dangerous actions or insanely unstable options that could be changed or removed in any time\"\n    )": ".setDesc(\n      \"Dangerous actions or insanely unstable options that could be changed or removed in any time\"\n    )",
    ".setDesc(\"It helps to make text readable\")": ".setDesc(\"It helps to make text readable\")",
    ".setDesc(\n        \"\\u{1F6A8} All colors of all tags will be recalculated as if it was the first launch of the plugin. Requires restart of Obsidian.\"\n      )": ".setDesc(\n        \"\\u{1F6A8} All colors of all tags will be recalculated as if it was the first launch of the plugin. Requires restart of Obsidian.\"\n      )",
    ".setPlaceholder(\"Paste palette\")": ".setPlaceholder(\"Paste palette\")",
    "Notice(\n            `\\u2705 Reset is done\nPlease restart Obsidian`,\n            1e4\n          )": "Notice(\n            `\\u2705 Reset is done\nPlease restart Obsidian`,\n            1e4\n          )",
    "Notice(`\\u2B06\\uFE0F Colored Tags: a new version is available`)": "Notice(`\\u2B06\\uFE0F Colored Tags: a new version is available`)",
    ".log(\"the unthinkable has happened\")": ".log(\"the unthinkable has happened\")",
    "Error(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);": "Error(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);",
    "Error(\"Only Bradford CAT with white points D50 and D65 supported for now.\");": "Error(\"Only Bradford CAT with white points D50 and D65 supported for now.\");",
    "Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);": "Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);",
    "Error(`Duplicate color space registration: '${id}'`);": "Error(`Duplicate color space registration: '${id}'`);",
    "Error(`No color space found with id = \"${space}\"`);": "Error(`No color space found with id = \"${space}\"`);",
    "Error(`${space} is not a valid color space`);": "Error(`${space} is not a valid color space`);",
    "Error(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);": "Error(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);",
    "Error(`No \"${coord}\" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(\", \")}`);": "Error(`No \"${coord}\" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(\", \")}`);",
    "Error(`Cannot parse color(${id}). ` + (didYouMean || \"Missing a plugin?\"));\n    } else {\n      for (let space of ColorSpace.all) {\n        let format = space.getFormat(name);\n        if (format && format.type === \"function\") {\n          let alpha = 1;\n          if (format.lastAlpha || last(env.parsed.args).alpha) {\n            alpha = env.parsed.args.pop();\n          }\n          let coords = env.parsed.args;\n          let types;\n          if (format.coordGrammar) {\n            types = Object.entries(space.coords).map(([id, coordMeta], i) => {\n              var _a2;\n              let coordGrammar2 = format.coordGrammar[i];\n              let providedType = (_a2 = coords[i]) == null ? void 0 : _a2.type;\n              let type2 = coordGrammar2.find((c4) => c4 == providedType);\n              if (!type2) {\n                let coordName = coordMeta.name || id;\n                throw new TypeError(`${providedType} not allowed for ${coordName} in ${name}()`);": "Error(`Cannot parse color(${id}). ` + (didYouMean || \"Missing a plugin?\"));\n    } else {\n      for (let space of ColorSpace.all) {\n        let format = space.getFormat(name);\n        if (format && format.type === \"function\") {\n          let alpha = 1;\n          if (format.lastAlpha || last(env.parsed.args).alpha) {\n            alpha = env.parsed.args.pop();\n          }\n          let coords = env.parsed.args;\n          let types;\n          if (format.coordGrammar) {\n            types = Object.entries(space.coords).map(([id, coordMeta], i) => {\n              var _a2;\n              let coordGrammar2 = format.coordGrammar[i];\n              let providedType = (_a2 = coords[i]) == null ? void 0 : _a2.type;\n              let type2 = coordGrammar2.find((c4) => c4 == providedType);\n              if (!type2) {\n                let coordName = coordMeta.name || id;\n                throw new TypeError(`${providedType} not allowed for ${coordName} in ${name}()`);",
    "Error(`Could not parse ${str} as a color. Missing a plugin?`);": "Error(`Could not parse ${str} as a color. Missing a plugin?`);",
    "Error(\"Empty color reference\");": "Error(\"Empty color reference\");",
    "Error(`format ${formatId} can only be used to parse colors, not for serialization`);": "Error(`format ${formatId} can only be used to parse colors, not for serialization`);",
    "Error(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);": "Error(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);",
    "Error(`Unknown contrast algorithm: ${algorithm}`);": "Error(`Unknown contrast algorithm: ${algorithm}`);",
    "Error(`Unknown deltaE method: ${method}`);": "Error(`Unknown deltaE method: ${method}`);",
    "\"\\u{1F338} Adaptive soft\"": "\"\\u{1F338} Adaptive soft\"",
    "\"\\u{1F33A} Adaptive bright\"": "\"\\u{1F33A} Adaptive bright\"",
    "\"Custom\"": "\"Custom\"",
    "The format is <code>XXXXXX-XXXXXX-XXXXXX</code> for each RGB color.<br/>": "The format is <code>XXXXXX-XXXXXX-XXXXXX</code> for each RGB color.<br/>",
    "You can share the best color palettes or get one <a href=\"https://github.com/pfrankov/obsidian-colored-tags/discussions/18\">from the community</a>.": "You can share the best color palettes or get one <a href=\"https://github.com/pfrankov/obsidian-colored-tags/discussions/18\">from the community</a>."
  }
}