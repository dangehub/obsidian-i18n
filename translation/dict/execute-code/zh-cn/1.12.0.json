{
  "manifest": {
    "translationVersion": -639075600000,
    "pluginVersion": "1.12.0"
  },
  "description": {
    "original": "Allows to execute code snippets within a note. Supported programming languages:  C, CPP, Dart, Golang, Groovy, Kotlin, Java, JavaScript, TypeScript, Lean, Lua, CSharp, Prolog, Rust, Python, R, Ruby, Wolfram Mathematica, Haskell, Scala, Racket, F#, Batch, Shell & Powershell.",
    "translation": "Allows to execute code snippets within a note. Supported programming languages:  C, CPP, Dart, Golang, Groovy, Kotlin, Java, JavaScript, TypeScript, Lean, Lua, CSharp, Prolog, Rust, Python, R, Ruby, Wolfram Mathematica, Haskell, Scala, Racket, F#, Batch, Shell & Powershell."
  },
  "dict": {
    "Notice(`Failed to parse code block arguments from line:\n${firstLineOfCode}\n\nFailed with error:\n${err}`)": "Notice(`Failed to parse code block arguments from line:\n${firstLineOfCode}\n\nFailed with error:\n${err}`)",
    "Notice(`Named export \"${namedImport}\" does not exist but was imported`)": "Notice(`Named export \"${namedImport}\" does not exist but was imported`)",
    "Notice(`Error: named export ${currentArgs.label} exported more than once`)": "Notice(`Error: named export ${currentArgs.label} exported more than once`)",
    "Notice(label)": "Notice(label)",
    "Notice(\"Runtime exited\")": "Notice(\"Runtime exited\")",
    "Notice(\"Error!\")": "Notice(\"Error!\")",
    "Notice(\"Running...\")": "Notice(\"Running...\")",
    "Notice(\"Done!\")": "Notice(\"Done!\")",
    ".log(\"Cling path set to: \" + sanitized)": ".log(\"Cling path set to: \" + sanitized)",
    ".log(\"CPP args set to: \" + value)": ".log(\"CPP args set to: \" + value)",
    ".log(\"Cling std set to: \" + value)": ".log(\"Cling std set to: \" + value)",
    ".log(\"Cpp use main set to: \" + value)": ".log(\"Cpp use main set to: \" + value)",
    ".log(\"gcc / Cling path set to: \" + sanitized)": ".log(\"gcc / Cling path set to: \" + sanitized)",
    ".log(\"gcc / Cling args set to: \" + value)": ".log(\"gcc / Cling args set to: \" + value)",
    ".log(\"C use main set to: \" + value)": ".log(\"C use main set to: \" + value)",
    ".log(\"dotnet path set to: \" + sanitized)": ".log(\"dotnet path set to: \" + sanitized)",
    ".log(\"CSharp args set to: \" + value)": ".log(\"CSharp args set to: \" + value)",
    ".log(\"F# path set to: \" + sanitized)": ".log(\"F# path set to: \" + sanitized)",
    ".log(\"F# args set to: \" + value)": ".log(\"F# args set to: \" + value)",
    ".log(\"F# file extension set to: \" + value)": ".log(\"F# file extension set to: \" + value)",
    ".log(\"Golang path set to: \" + sanitized)": ".log(\"Golang path set to: \" + sanitized)",
    ".log(\"Groovy path set to: \" + sanitized)": ".log(\"Groovy path set to: \" + sanitized)",
    ".log(\"Groovy args set to: \" + value)": ".log(\"Groovy args set to: \" + value)",
    ".log(value ? \"Now using ghci for haskell\" : \"Now using runghc for haskell.\")": ".log(value ? \"Now using ghci for haskell\" : \"Now using runghc for haskell.\")",
    ".log(\"ghci path set to: \" + sanitized)": ".log(\"ghci path set to: \" + sanitized)",
    ".log(\"runghc path set to: \" + sanitized)": ".log(\"runghc path set to: \" + sanitized)",
    ".log(\"ghc path set to: \" + sanitized)": ".log(\"ghc path set to: \" + sanitized)",
    ".log(\"Java path set to: \" + sanitized)": ".log(\"Java path set to: \" + sanitized)",
    ".log(\"Java args set to: \" + value)": ".log(\"Java args set to: \" + value)",
    ".log(\"Node path set to: \" + sanitized)": ".log(\"Node path set to: \" + sanitized)",
    ".log(\"Node args set to: \" + value)": ".log(\"Node args set to: \" + value)",
    ".log(\"Kotlin path set to: \" + sanitized)": ".log(\"Kotlin path set to: \" + sanitized)",
    ".log(\"Kotlin args set to: \" + value)": ".log(\"Kotlin args set to: \" + value)",
    ".log(\"lean path set to: \" + sanitized)": ".log(\"lean path set to: \" + sanitized)",
    ".log(\"Lean args set to: \" + value)": ".log(\"Lean args set to: \" + value)",
    ".log(\"lua path set to: \" + sanitized)": ".log(\"lua path set to: \" + sanitized)",
    ".log(\"Lua args set to: \" + value)": ".log(\"Lua args set to: \" + value)",
    ".log(\"dart path set to: \" + sanitized)": ".log(\"dart path set to: \" + sanitized)",
    ".log(\"Dart args set to: \" + value)": ".log(\"Dart args set to: \" + value)",
    ".log(\"Mathematica path set to: \" + sanitized)": ".log(\"Mathematica path set to: \" + sanitized)",
    ".log(\"Mathematica args set to: \" + value)": ".log(\"Mathematica args set to: \" + value)",
    ".log(\"Powershell path set to: \" + sanitized)": ".log(\"Powershell path set to: \" + sanitized)",
    ".log(\"Powershell args set to: \" + value)": ".log(\"Powershell args set to: \" + value)",
    ".log(\"Powershell file extension set to: \" + value)": ".log(\"Powershell file extension set to: \" + value)",
    ".log(\"Prolog answer limit set to: \" + value)": ".log(\"Prolog answer limit set to: \" + value)",
    ".log(value ? \"Embedding Plots into Notes.\" : \"Not embedding Plots into Notes.\")": ".log(value ? \"Embedding Plots into Notes.\" : \"Not embedding Plots into Notes.\")",
    ".log(\"Python path set to: \" + sanitized)": ".log(\"Python path set to: \" + sanitized)",
    ".log(\"Python args set to: \" + value)": ".log(\"Python args set to: \" + value)",
    ".log(value ? \"Embedding R Plots into Notes.\" : \"Not embedding R Plots into Notes.\")": ".log(value ? \"Embedding R Plots into Notes.\" : \"Not embedding R Plots into Notes.\")",
    ".log(\"R path set to: \" + sanitized)": ".log(\"R path set to: \" + sanitized)",
    ".log(\"R args set to: \" + value)": ".log(\"R args set to: \" + value)",
    ".log(\"ruby path set to: \" + sanitized)": ".log(\"ruby path set to: \" + sanitized)",
    ".log(\"ruby args set to: \" + value)": ".log(\"ruby args set to: \" + value)",
    ".log(\"Cargo path set to: \" + sanitized)": ".log(\"Cargo path set to: \" + sanitized)",
    ".log(\"scala path set to: \" + sanitized)": ".log(\"scala path set to: \" + sanitized)",
    ".log(\"Scala args set to: \" + value)": ".log(\"Scala args set to: \" + value)",
    ".log(\"racket path set to: \" + sanitized)": ".log(\"racket path set to: \" + sanitized)",
    ".log(\"Racket args set to: \" + value)": ".log(\"Racket args set to: \" + value)",
    ".log(\"Shell path set to: \" + sanitized)": ".log(\"Shell path set to: \" + sanitized)",
    ".log(\"Shell args set to: \" + value)": ".log(\"Shell args set to: \" + value)",
    ".log(\"Shell file extension set to: \" + value)": ".log(\"Shell file extension set to: \" + value)",
    ".log(\"Batch path set to: \" + sanitized)": ".log(\"Batch path set to: \" + sanitized)",
    ".log(\"Batch args set to: \" + value)": ".log(\"Batch args set to: \" + value)",
    ".log(\"Batch file extension set to: \" + value)": ".log(\"Batch file extension set to: \" + value)",
    ".log(\"ts-node path set to: \" + sanitized)": ".log(\"ts-node path set to: \" + sanitized)",
    ".log(\"TypeScript args set to: \" + value)": ".log(\"TypeScript args set to: \" + value)",
    ".log(\"SQL args set to: \" + value)": ".log(\"SQL args set to: \" + value)",
    ".log(\"Octave path set to: \" + sanitized)": ".log(\"Octave path set to: \" + sanitized)",
    ".log(\"Octave args set to: \" + value)": ".log(\"Octave args set to: \" + value)",
    ".log(\"Maxima path set to: \" + sanitized)": ".log(\"Maxima path set to: \" + sanitized)",
    ".log(\"Maxima args set to: \" + value)": ".log(\"Maxima args set to: \" + value)",
    ".log(\"Applescript path set to: \" + sanitized)": ".log(\"Applescript path set to: \" + sanitized)",
    ".log(\"Applescript args set to: \" + value)": ".log(\"Applescript args set to: \" + value)",
    ".log(\"zig path set to: \" + sanitized)": ".log(\"zig path set to: \" + sanitized)",
    ".log(\"zig args set to: \" + value)": ".log(\"zig args set to: \" + value)",
    ".log(\"ocaml path set to: \" + sanitized)": ".log(\"ocaml path set to: \" + sanitized)",
    ".log(\"ocaml args set to: \" + value)": ".log(\"ocaml args set to: \" + value)",
    ".log(\"Swift path set to: \" + sanitized)": ".log(\"Swift path set to: \" + sanitized)",
    ".log(\"Swift args set to: \" + value)": ".log(\"Swift args set to: \" + value)",
    ".log(\"Timeout set to: \" + value)": ".log(\"Timeout set to: \" + value)",
    ".log(\"Allow Input set to: \" + value)": ".log(\"Allow Input set to: \" + value)",
    ".log(\"WSL Mode set to: \" + value)": ".log(\"WSL Mode set to: \" + value)",
    ".log(\"Only Show Current Block Log set to: \" + value)": ".log(\"Only Show Current Block Log set to: \" + value)",
    ".log(`${language} inject set to ${value}`)": ".log(`${language} inject set to ${value}`)",
    ".log('\" + TOGGLE_HTML_SIGIL + image + TOGGLE_HTML_SIGIL + \"')": ".log('\" + TOGGLE_HTML_SIGIL + image + TOGGLE_HTML_SIGIL + \"')",
    ".log(source)": ".log(source)",
    ".log(${toggle})": ".log(${toggle})",
    ".log(${html})": ".log(${html})",
    ".log(\"setup\")": ".log(\"setup\")",
    ".log(\"Unloaded plugin: Execute Code\")": ".log(\"Unloaded plugin: Execute Code\")",
    "<error(\\n)": "<error(\\n)",
    ".error(new Term(\"throw\", [expr.value])": ".error(new Term(\"throw\", [expr.value])",
    "_error(answer)": "_error(answer)",
    ".error(answer)": ".error(answer)",
    ".error(\n                new Term(\"throw\", [\n                  pl.error.syntax(\n                    token ? token : tokens[expr_position - 1],\n                    token && token.error ? token.error : \". or operator expected\",\n                    !token\n                  )": ".error(\n                new Term(\"throw\", [\n                  pl.error.syntax(\n                    token ? token : tokens[expr_position - 1],\n                    token && token.error ? token.error : \". or operator expected\",\n                    !token\n                  )",
    "_error(pl.error.type(\"module\", closure.args[0], atom.indicator)": "_error(pl.error.type(\"module\", closure.args[0], atom.indicator)",
    "_error(pl.error.instantiation(atom.indicator)": "_error(pl.error.instantiation(atom.indicator)",
    "_error(pl.error.type(\"callable\", closure, atom.indicator)": "_error(pl.error.type(\"callable\", closure, atom.indicator)",
    "_error(pl.error.type(\"callable\", goal, atom.indicator)": "_error(pl.error.type(\"callable\", goal, atom.indicator)",
    ".error(ex)": ".error(ex)",
    ".error(pl.error.existence(\"source_sink\", new Term(string)": ".error(pl.error.existence(\"source_sink\", new Term(string)",
    "_error(error)": "_error(error)",
    "_error(pl.error.type(\"module\", context_module, this.level.indicator)": "_error(pl.error.type(\"module\", context_module, this.level.indicator)",
    "_error(pl.error.existence(\"procedure\", atom.indicator, this.level.indicator)": "_error(pl.error.existence(\"procedure\", atom.indicator, this.level.indicator)",
    "_error(pl.error.instantiation(this.level.indicator)": "_error(pl.error.instantiation(this.level.indicator)",
    "_error(pl.error.type(\"callable\", term, this.level.indicator)": "_error(pl.error.type(\"callable\", term, this.level.indicator)",
    "_error(this.head_point()": "_error(this.head_point()",
    "_error(this.points.pop()": "_error(this.points.pop()",
    ".error(error2)": ".error(error2)",
    ".error(pl.error.existence(\"module\", module_id, atom.indicator)": ".error(pl.error.existence(\"module\", module_id, atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"operator\", operator, atom.indicator)": "_error(pl.error.permission(\"modify\", \"operator\", operator, atom.indicator)",
    "_error(pl.error.type(\"variable\", variable, atom.indicator)": "_error(pl.error.type(\"variable\", variable, atom.indicator)",
    "_error(pl.error.type(\"atom\", module3, atom.indicator)": "_error(pl.error.type(\"atom\", module3, atom.indicator)",
    "_error(pl.error.type(\"integer\", priority, atom.indicator)": "_error(pl.error.type(\"integer\", priority, atom.indicator)",
    "_error(pl.error.type(\"atom\", type, atom.indicator)": "_error(pl.error.type(\"atom\", type, atom.indicator)",
    "_error(pl.error.type(\"list\", operators, atom.indicator)": "_error(pl.error.type(\"list\", operators, atom.indicator)",
    "_error(pl.error.permission(\"create\", \"operator\", operators, atom.indicator)": "_error(pl.error.permission(\"create\", \"operator\", operators, atom.indicator)",
    "_error(pl.error.type(\"atom\", operator, atom.indicator)": "_error(pl.error.type(\"atom\", operator, atom.indicator)",
    "_error(pl.error.domain(\"operator_priority\", priority, atom.indicator)": "_error(pl.error.domain(\"operator_priority\", priority, atom.indicator)",
    "_error(pl.error.permission(\"create\", \"operator\", operator, atom.indicator)": "_error(pl.error.permission(\"create\", \"operator\", operator, atom.indicator)",
    "_error(pl.error.domain(\"operator_specifier\", type, atom.indicator)": "_error(pl.error.domain(\"operator_specifier\", type, atom.indicator)",
    "_error(pl.error.type(\"atom\", specifier, atom.indicator)": "_error(pl.error.type(\"atom\", specifier, atom.indicator)",
    "_error(pl.error.domain(\"operator_specifier\", specifier, atom.indicator)": "_error(pl.error.domain(\"operator_specifier\", specifier, atom.indicator)",
    "_error(pl.error.instantiation(thread.level.indicator)": "_error(pl.error.instantiation(thread.level.indicator)",
    "_error(answer.args[0])": "_error(answer.args[0])",
    "_error(pl.error.type(\"callable\", call, atom.indicator)": "_error(pl.error.type(\"callable\", call, atom.indicator)",
    "_error(pl.error.type(\"callable\", cleanup, atom.indicator)": "_error(pl.error.type(\"callable\", cleanup, atom.indicator)",
    "_error(pl.error.type(\"callable\", setup, atom.indicator)": "_error(pl.error.type(\"callable\", setup, atom.indicator)",
    "_error(pl.error.type(\"list\", instances, atom.indicator)": "_error(pl.error.type(\"list\", instances, atom.indicator)",
    "_error(pl.error.type(\"list\", tail, atom.indicator)": "_error(pl.error.type(\"list\", tail, atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[2], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[2], atom.indicator)",
    "_error(pl.error.type(\"atomic\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"atomic\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[2], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[2], atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[0], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[0], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[0], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"compound\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"compound\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"list\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"list\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"non_empty_list\", atom.args[1], atom.indicator)": "_error(pl.error.domain(\"non_empty_list\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atomic\", atom.args[1].args[0], atom.indicator)": "_error(pl.error.type(\"atomic\", atom.args[1].args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[1].args[0], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[1].args[0], atom.indicator)",
    "_error(pl.error.type(\"list\", vars, atom.indicator)": "_error(pl.error.type(\"list\", vars, atom.indicator)",
    "_error(pl.error.type(\"integer\", start, atom.indicator)": "_error(pl.error.type(\"integer\", start, atom.indicator)",
    "_error(pl.error.type(\"integer\", end, atom.indicator)": "_error(pl.error.type(\"integer\", end, atom.indicator)",
    "_error(pl.error.type(\"module\", head.args[0], atom.indicator)": "_error(pl.error.type(\"module\", head.args[0], atom.indicator)",
    "_error(pl.error.type(\"callable\", head, atom.indicator)": "_error(pl.error.type(\"callable\", head, atom.indicator)",
    "_error(pl.error.type(\"callable\", body, atom.indicator)": "_error(pl.error.type(\"callable\", body, atom.indicator)",
    "_error(pl.error.permission(\"access\", \"private_procedure\", str_indicator(head.indicator)": "_error(pl.error.permission(\"access\", \"private_procedure\", str_indicator(head.indicator)",
    "_error(pl.error.permission(\"modify\", \"static_procedure\", str_indicator(head.indicator)": "_error(pl.error.permission(\"modify\", \"static_procedure\", str_indicator(head.indicator)",
    "_error(pl.error.type(\"module\", indicator2.args[0], atom.indicator)": "_error(pl.error.type(\"module\", indicator2.args[0], atom.indicator)",
    "_error(pl.error.type(\"predicate_indicator\", indicator2, atom.indicator)": "_error(pl.error.type(\"predicate_indicator\", indicator2, atom.indicator)",
    "_error(pl.error.type(\"atom\", indicator2.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", indicator2.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", indicator2.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", indicator2.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", indicator2.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", indicator2.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", module_id, atom.indicator)": "_error(pl.error.type(\"atom\", module_id, atom.indicator)",
    "_error(pl.error.domain(\"predicate_property\", property, atom.indicator)": "_error(pl.error.domain(\"predicate_property\", property, atom.indicator)",
    "_error(pl.error.type(\"list\", expected, atom.indicator)": "_error(pl.error.type(\"list\", expected, atom.indicator)",
    "_error(pl.error.type(\"list\", list, atom.indicator)": "_error(pl.error.type(\"list\", list, atom.indicator)",
    "_error(pl.error.type(\"pair\", elem, atom.indicator)": "_error(pl.error.type(\"pair\", elem, atom.indicator)",
    "_error(pl.error.type(\"pair\", head, atom.indicator)": "_error(pl.error.type(\"pair\", head, atom.indicator)",
    "_error(pl.error.type(\"callable\", clause, atom.indicator)": "_error(pl.error.type(\"callable\", clause, atom.indicator)",
    "_error(pl.error.type(\"module\", module_atom, atom.indicator)": "_error(pl.error.type(\"module\", module_atom, atom.indicator)",
    "_error(pl.error.type(\"module\", predicate.args[0], atom.indicator)": "_error(pl.error.type(\"module\", predicate.args[0], atom.indicator)",
    "_error(pl.error.type(\"predicate_indicator\", predicate, atom.indicator)": "_error(pl.error.type(\"predicate_indicator\", predicate, atom.indicator)",
    "_error(pl.error.type(\"atom\", predicate.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", predicate.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", predicate.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", predicate.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", predicate.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", predicate.args[1], atom.indicator)",
    "_error(pl.error.representation(\"max_arity\", atom.indicator)": "_error(pl.error.representation(\"max_arity\", atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"static_procedure\", atom.args[0], atom.indicator)": "_error(pl.error.permission(\"modify\", \"static_procedure\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", start, atom.indicator)": "_error(pl.error.type(\"atom\", start, atom.indicator)",
    "_error(pl.error.type(\"atom\", end, atom.indicator)": "_error(pl.error.type(\"atom\", end, atom.indicator)",
    "_error(pl.error.type(\"atom\", whole, atom.indicator)": "_error(pl.error.type(\"atom\", whole, atom.indicator)",
    "_error(pl.error.type(\"atom\", atom1, atom.indicator)": "_error(pl.error.type(\"atom\", atom1, atom.indicator)",
    "_error(pl.error.type(\"integer\", before, atom.indicator)": "_error(pl.error.type(\"integer\", before, atom.indicator)",
    "_error(pl.error.type(\"integer\", length, atom.indicator)": "_error(pl.error.type(\"integer\", length, atom.indicator)",
    "_error(pl.error.type(\"integer\", after, atom.indicator)": "_error(pl.error.type(\"integer\", after, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", before, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", before, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", length, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", length, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", after, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", after, atom.indicator)",
    "_error(pl.error.type(\"atom\", subatom, atom.indicator)": "_error(pl.error.type(\"atom\", subatom, atom.indicator)",
    "_error(pl.error.type(\"character\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"character\", pointer.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"integer\", pointer.args[0], atom.indicator)",
    "_error(pl.error.representation(\"character_code\", atom.indicator)": "_error(pl.error.representation(\"character_code\", atom.indicator)",
    "_error(pl.error.type(\"character\", char, atom.indicator)": "_error(pl.error.type(\"character\", char, atom.indicator)",
    "_error(pl.error.type(\"integer\", code, atom.indicator)": "_error(pl.error.type(\"integer\", code, atom.indicator)",
    "_error(pl.error.type(\"number\", num, atom.indicator)": "_error(pl.error.type(\"number\", num, atom.indicator)",
    "_error(pl.error.syntax_by_predicate(\"parseable_number\", atom.indicator)": "_error(pl.error.syntax_by_predicate(\"parseable_number\", atom.indicator)",
    "_error(pl.error.type(\"atom\", original, atom.indicator)": "_error(pl.error.type(\"atom\", original, atom.indicator)",
    "_error(pl.error.type(\"atom\", upcase, atom.indicator)": "_error(pl.error.type(\"atom\", upcase, atom.indicator)",
    "_error(pl.error.type(\"atom\", downcase, atom.indicator)": "_error(pl.error.type(\"atom\", downcase, atom.indicator)",
    "_error(pl.error.type(\"atomic\", atomic1, atom.indicator)": "_error(pl.error.type(\"atomic\", atomic1, atom.indicator)",
    "_error(pl.error.type(\"atomic\", atomic2, atom.indicator)": "_error(pl.error.type(\"atomic\", atomic2, atom.indicator)",
    "_error(pl.error.type(\"atom\", concat, atom.indicator)": "_error(pl.error.type(\"atom\", concat, atom.indicator)",
    "_error(pl.error.type(\"atomic\", separator, atom.indicator)": "_error(pl.error.type(\"atomic\", separator, atom.indicator)",
    "_error(pl.error.type(\"atomic\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"atomic\", pointer.args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", order, atom.indicator)": "_error(pl.error.type(\"atom\", order, atom.indicator)",
    "_error(pl.error.domain(\"order\", order, atom.indicator)": "_error(pl.error.domain(\"order\", order, atom.indicator)",
    "_error(op)": "_error(op)",
    "_error(pl.error.type(\"integer\", lower, atom.indicator)": "_error(pl.error.type(\"integer\", lower, atom.indicator)",
    "_error(pl.error.type(\"integer\", upper, atom.indicator)": "_error(pl.error.type(\"integer\", upper, atom.indicator)",
    "_error(pl.error.type(\"integer\", bet, atom.indicator)": "_error(pl.error.type(\"integer\", bet, atom.indicator)",
    "_error(pl.error.type(\"integer\", n, atom.indicator)": "_error(pl.error.type(\"integer\", n, atom.indicator)",
    "_error(pl.error.type(\"integer\", m, atom.indicator)": "_error(pl.error.type(\"integer\", m, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", n, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", n, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", m, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", m, atom.indicator)",
    "_error(cmp)": "_error(cmp)",
    "_error(pl.error.domain(\"stream\", stream, atom.indicator)": "_error(pl.error.domain(\"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", input, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", input, atom.indicator)",
    "_error(pl.error.existence(\"stream\", input, atom.indicator)": "_error(pl.error.existence(\"stream\", input, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"stream\", input, atom.indicator)": "_error(pl.error.permission(\"input\", \"stream\", input, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", output, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", output, atom.indicator)",
    "_error(pl.error.existence(\"stream\", output, atom.indicator)": "_error(pl.error.existence(\"stream\", output, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"stream\", output, atom.indicator)": "_error(pl.error.permission(\"output\", \"stream\", output, atom.indicator)",
    "_error(pl.error.type(\"atom\", mode, atom.indicator)": "_error(pl.error.type(\"atom\", mode, atom.indicator)",
    "_error(pl.error.type(\"list\", options, atom.indicator)": "_error(pl.error.type(\"list\", options, atom.indicator)",
    "_error(pl.error.uninstantiation(stream, atom.indicator)": "_error(pl.error.uninstantiation(stream, atom.indicator)",
    "_error(pl.error.domain(\"source_sink\", dest, atom.indicator)": "_error(pl.error.domain(\"source_sink\", dest, atom.indicator)",
    "_error(pl.error.domain(\"io_mode\", mode, atom.indicator)": "_error(pl.error.domain(\"io_mode\", mode, atom.indicator)",
    "_error(pl.error.domain(\"stream_option\", property, atom.indicator)": "_error(pl.error.domain(\"stream_option\", property, atom.indicator)",
    "_error(pl.error.permission(\"open\", \"source_sink\", new Term(\"alias\", [new Term(alias, [])": "_error(pl.error.permission(\"open\", \"source_sink\", new Term(\"alias\", [new Term(alias, [])",
    "_error(pl.error.permission(\"open\", \"source_sink\", dest, atom.indicator)": "_error(pl.error.permission(\"open\", \"source_sink\", dest, atom.indicator)",
    "_error(pl.error.existence(\"source_sink\", dest, atom.indicator)": "_error(pl.error.existence(\"source_sink\", dest, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", stream, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", stream, atom.indicator)",
    "_error(pl.error.existence(\"stream\", stream, atom.indicator)": "_error(pl.error.existence(\"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"close_option\", property, atom.indicator)": "_error(pl.error.domain(\"close_option\", property, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"stream_property\", property, atom.indicator)": "_error(pl.error.domain(\"stream_property\", property, atom.indicator)",
    "_error(pl.error.domain(\"stream_position\", position, atom.indicator)": "_error(pl.error.domain(\"stream_position\", position, atom.indicator)",
    "_error(pl.error.type(\"atom\", field, atom.indicator)": "_error(pl.error.type(\"atom\", field, atom.indicator)",
    "_error(pl.error.type(\"integer\", value, atom.indicator)": "_error(pl.error.type(\"integer\", value, atom.indicator)",
    "_error(pl.error.permission(\"reposition\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"reposition\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.type(\"in_character\", char, atom.indicator)": "_error(pl.error.type(\"in_character\", char, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"binary_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"binary_stream\", stream, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"past_end_of_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"past_end_of_stream\", stream, atom.indicator)",
    "_error(pl.error.representation(\"character\", atom.indicator)": "_error(pl.error.representation(\"character\", atom.indicator)",
    "_error(pl.error.representation(\"in_character_code\", atom.indicator)": "_error(pl.error.representation(\"in_character_code\", atom.indicator)",
    "_error(pl.error.permission(\"output\", \"binary_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"binary_stream\", stream, atom.indicator)",
    "_error(pl.error.type(\"in_byte\", byte, atom.indicator)": "_error(pl.error.type(\"in_byte\", byte, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"text_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"text_stream\", stream, atom.indicator)",
    "_error(pl.error.representation(\"byte\", atom.indicator)": "_error(pl.error.representation(\"byte\", atom.indicator)",
    "_error(pl.error.type(\"byte\", byte, atom.indicator)": "_error(pl.error.type(\"byte\", byte, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"text_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"text_stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"read_option\", property, atom.indicator)": "_error(pl.error.domain(\"read_option\", property, atom.indicator)",
    "_error(pl.error.syntax(last_token, \"unexpected end of file\", false)": "_error(pl.error.syntax(last_token, \"unexpected end of file\", false)",
    "_error(pl.error.syntax(last_token, \"token not found\", true)": "_error(pl.error.syntax(last_token, \"token not found\", true)",
    "_error(pl.error.syntax(tokens[expr.len], \"unexpected token\", false)": "_error(pl.error.syntax(tokens[expr.len], \"unexpected token\", false)",
    "_error(expr.value)": "_error(expr.value)",
    "_error(pl.error.permission(\"output\", \"past_end_of_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"past_end_of_stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"write_option\", property, atom.indicator)": "_error(pl.error.domain(\"write_option\", property, atom.indicator)",
    "_error(pl.error.type(\"integer\", int, atom.indicator)": "_error(pl.error.type(\"integer\", int, atom.indicator)",
    "_error(pl.error.type(\"atom\", flag, atom.indicator)": "_error(pl.error.type(\"atom\", flag, atom.indicator)",
    "_error(pl.error.domain(\"prolog_flag\", flag, atom.indicator)": "_error(pl.error.domain(\"prolog_flag\", flag, atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"flag\", flag, atom.indicator)": "_error(pl.error.permission(\"modify\", \"flag\", flag, atom.indicator)",
    "_error(pl.error.domain(\"flag_value\", new Term(\"+\", [flag, value])": "_error(pl.error.domain(\"flag_value\", new Term(\"+\", [flag, value])",
    "_error(pl.error.type(\"atom\", src, atom.indicator)": "_error(pl.error.type(\"atom\", src, atom.indicator)",
    "_error(err)": "_error(err)",
    "_error(pl.error.type(\"number\", time, atom.indicator)": "_error(pl.error.type(\"number\", time, atom.indicator)",
    "_error(pl.error.domain(\"time_property\", property, atom.indicator)": "_error(pl.error.domain(\"time_property\", property, atom.indicator)",
    "_error(pl.error.type(\"integer\", year, atom.indicator)": "_error(pl.error.type(\"integer\", year, atom.indicator)",
    "_error(pl.error.type(\"integer\", month, atom.indicator)": "_error(pl.error.type(\"integer\", month, atom.indicator)",
    "_error(pl.error.type(\"callable\", grbody, atom.indicator)": "_error(pl.error.type(\"callable\", grbody, atom.indicator)",
    ".error(\"Invalid encoding. \" + value + 'Please use one of the following encodings: \"ascii\", \"utf8\", \"utf-8\", \"utf16le\", \"ucs2\", \"ucs-2\", \"base64\", \"latin1\", \"binary\", \"hex\"')": ".error(\"Invalid encoding. \" + value + 'Please use one of the following encodings: \"ascii\", \"utf8\", \"utf-8\", \"utf16le\", \"ucs2\", \"ucs-2\", \"base64\", \"latin1\", \"binary\", \"hex\"')",
    ".error(errorMSG)": ".error(errorMSG)",
    ".error(e)": ".error(e)",
    ".error(\"Error in 'Obsidian Execute Code' Plugin while removing file: \" + err)": ".error(\"Error in 'Obsidian Execute Code' Plugin while removing file: \" + err)",
    ".error(err)": ".error(err)",
    "name: \"lexical\"": "name: \"lexical\"",
    "name : \"/\"": "name : \"/\"",
    "name: \"Open Code Runtime Management\"": "name: \"Open Code Runtime Management\"",
    "name: \"Run all Code Blocks in Current File\"": "name: \"Run all Code Blocks in Current File\"",
    "text: \"C++ Settings\"": "text: \"C++ Settings\"",
    "text: \"C Settings\"": "text: \"C Settings\"",
    "text: \"CSharp Settings\"": "text: \"CSharp Settings\"",
    "text: \"F# Settings\"": "text: \"F# Settings\"",
    "text: \"Golang Settings\"": "text: \"Golang Settings\"",
    "text: \"Groovy Settings\"": "text: \"Groovy Settings\"",
    "text: \"Haskell Settings\"": "text: \"Haskell Settings\"",
    "text: \"Java Settings\"": "text: \"Java Settings\"",
    "text: \"JavaScript / Node Settings\"": "text: \"JavaScript / Node Settings\"",
    "text: \"Kotlin Settings\"": "text: \"Kotlin Settings\"",
    "text: \"Lean Settings\"": "text: \"Lean Settings\"",
    "text: \"Lua Settings\"": "text: \"Lua Settings\"",
    "text: \"Dart Settings\"": "text: \"Dart Settings\"",
    "text: \"Wolfram Mathematica Settings\"": "text: \"Wolfram Mathematica Settings\"",
    "text: \"Powershell Settings\"": "text: \"Powershell Settings\"",
    "text: \"Prolog Settings\"": "text: \"Prolog Settings\"",
    "text: \"Python Settings\"": "text: \"Python Settings\"",
    "text: \"R Settings\"": "text: \"R Settings\"",
    "text: \"Ruby Settings\"": "text: \"Ruby Settings\"",
    "text: \"Rust Settings\"": "text: \"Rust Settings\"",
    "text: \"Scala Settings\"": "text: \"Scala Settings\"",
    "text: \"Racket Settings\"": "text: \"Racket Settings\"",
    "text: \"Shell Settings\"": "text: \"Shell Settings\"",
    "text: \"Batch Settings\"": "text: \"Batch Settings\"",
    "text: \"TypeScript Settings\"": "text: \"TypeScript Settings\"",
    "text: \"SQL Settings\"": "text: \"SQL Settings\"",
    "text: \"Octave Settings\"": "text: \"Octave Settings\"",
    "text: \"Maxima Settings\"": "text: \"Maxima Settings\"",
    "text: \"Applescript Settings\"": "text: \"Applescript Settings\"",
    "text: \"Zig Settings\"": "text: \"Zig Settings\"",
    "text: \"OCaml Settings\"": "text: \"OCaml Settings\"",
    "text: \"Swift Settings\"": "text: \"Swift Settings\"",
    "text: \"Settings for the Code Execution Plugin.\"": "text: \"Settings for the Code Execution Plugin.\"",
    "text: \"General Settings\"": "text: \"General Settings\"",
    ".setText(\"Clear\")": ".setText(\"Clear\")",
    ".setName(\"Cling path\")": ".setName(\"Cling path\")",
    ".setName(\"Cling arguments for C++\")": ".setName(\"Cling arguments for C++\")",
    ".setName(\"Cling std\")": ".setName(\"Cling std\")",
    ".setName(\"Use main function\")": ".setName(\"Use main function\")",
    ".setName(\"gcc / Cling path\")": ".setName(\"gcc / Cling path\")",
    ".setName(\"gcc / Cling arguments for C\")": ".setName(\"gcc / Cling arguments for C\")",
    ".setName(\"Cling std (ignored for gcc)\")": ".setName(\"Cling std (ignored for gcc)\")",
    ".setName(\"Use main function (mandatory for gcc)\")": ".setName(\"Use main function (mandatory for gcc)\")",
    ".setName(\"dotnet path\")": ".setName(\"dotnet path\")",
    ".setName(\"CSharp arguments\")": ".setName(\"CSharp arguments\")",
    ".setName(\"F# path\")": ".setName(\"F# path\")",
    ".setName(\"F# arguments\")": ".setName(\"F# arguments\")",
    ".setName(\"F# file extension\")": ".setName(\"F# file extension\")",
    ".setName(\"Golang Path\")": ".setName(\"Golang Path\")",
    ".setName(\"Groovy path\")": ".setName(\"Groovy path\")",
    ".setName(\"Groovy arguments\")": ".setName(\"Groovy arguments\")",
    ".setName(\"Use Ghci\")": ".setName(\"Use Ghci\")",
    ".setName(\"Ghci path\")": ".setName(\"Ghci path\")",
    ".setName(\"Rungch path\")": ".setName(\"Rungch path\")",
    ".setName(\"Ghc path\")": ".setName(\"Ghc path\")",
    ".setName(\"Java path (Java 11 or higher)\")": ".setName(\"Java path (Java 11 or higher)\")",
    ".setName(\"Java arguments\")": ".setName(\"Java arguments\")",
    ".setName(\"Node path\")": ".setName(\"Node path\")",
    ".setName(\"Node arguments\")": ".setName(\"Node arguments\")",
    ".setName(\"Run Javascript blocks in Notebook Mode\")": ".setName(\"Run Javascript blocks in Notebook Mode\")",
    ".setName(\"Kotlin path\")": ".setName(\"Kotlin path\")",
    ".setName(\"Kotlin arguments\")": ".setName(\"Kotlin arguments\")",
    ".setName(\"lean path\")": ".setName(\"lean path\")",
    ".setName(\"Lean arguments\")": ".setName(\"Lean arguments\")",
    ".setName(\"lua path\")": ".setName(\"lua path\")",
    ".setName(\"Lua arguments\")": ".setName(\"Lua arguments\")",
    ".setName(\"dart path\")": ".setName(\"dart path\")",
    ".setName(\"Dart arguments\")": ".setName(\"Dart arguments\")",
    ".setName(\"Mathematica path\")": ".setName(\"Mathematica path\")",
    ".setName(\"Mathematica arguments\")": ".setName(\"Mathematica arguments\")",
    ".setName(\"Powershell path\")": ".setName(\"Powershell path\")",
    ".setName(\"Powershell arguments\")": ".setName(\"Powershell arguments\")",
    ".setName(\"Powershell file extension\")": ".setName(\"Powershell file extension\")",
    ".setName(\"PowerShell script encoding\")": ".setName(\"PowerShell script encoding\")",
    ".setName(\"Prolog Answer Limit\")": ".setName(\"Prolog Answer Limit\")",
    ".setName(\"Embed Python Plots\")": ".setName(\"Embed Python Plots\")",
    ".setName(\"Python path\")": ".setName(\"Python path\")",
    ".setName(\"Python arguments\")": ".setName(\"Python arguments\")",
    ".setName(\"Run Python blocks in Notebook Mode\")": ".setName(\"Run Python blocks in Notebook Mode\")",
    ".setName(\"Embed R Plots created via `plot()` into Notes\")": ".setName(\"Embed R Plots created via `plot()` into Notes\")",
    ".setName(\"Rscript path\")": ".setName(\"Rscript path\")",
    ".setName(\"R arguments\")": ".setName(\"R arguments\")",
    ".setName(\"Run R blocks in Notebook Mode\")": ".setName(\"Run R blocks in Notebook Mode\")",
    ".setName(\"ruby path\")": ".setName(\"ruby path\")",
    ".setName(\"ruby arguments\")": ".setName(\"ruby arguments\")",
    ".setName(\"Cargo Path\")": ".setName(\"Cargo Path\")",
    ".setName(\"scala path\")": ".setName(\"scala path\")",
    ".setName(\"Scala arguments\")": ".setName(\"Scala arguments\")",
    ".setName(\"racket path\")": ".setName(\"racket path\")",
    ".setName(\"Racket arguments\")": ".setName(\"Racket arguments\")",
    ".setName(\"Shell path\")": ".setName(\"Shell path\")",
    ".setName(\"Shell arguments\")": ".setName(\"Shell arguments\")",
    ".setName(\"Shell file extension\")": ".setName(\"Shell file extension\")",
    ".setName(\"Shell WSL mode\")": ".setName(\"Shell WSL mode\")",
    ".setName(\"Batch path\")": ".setName(\"Batch path\")",
    ".setName(\"Batch arguments\")": ".setName(\"Batch arguments\")",
    ".setName(\"Batch file extension\")": ".setName(\"Batch file extension\")",
    ".setName(\"ts-node path\")": ".setName(\"ts-node path\")",
    ".setName(\"TypeScript arguments\")": ".setName(\"TypeScript arguments\")",
    ".setName(\"SQL path\")": ".setName(\"SQL path\")",
    ".setName(\"SQL arguments\")": ".setName(\"SQL arguments\")",
    ".setName(\"Octave path\")": ".setName(\"Octave path\")",
    ".setName(\"Octave arguments\")": ".setName(\"Octave arguments\")",
    ".setName(\"Maxima path\")": ".setName(\"Maxima path\")",
    ".setName(\"Maxima arguments\")": ".setName(\"Maxima arguments\")",
    ".setName(\"Osascript path\")": ".setName(\"Osascript path\")",
    ".setName(\"Applescript arguments\")": ".setName(\"Applescript arguments\")",
    ".setName(\"zig path\")": ".setName(\"zig path\")",
    ".setName(\"zig arguments\")": ".setName(\"zig arguments\")",
    ".setName(\"ocaml path\")": ".setName(\"ocaml path\")",
    ".setName(\"ocaml arguments\")": ".setName(\"ocaml arguments\")",
    ".setName(\"Swift path\")": ".setName(\"Swift path\")",
    ".setName(\"Swift arguments\")": ".setName(\"Swift arguments\")",
    ".setName(\"Timeout (in seconds)\")": ".setName(\"Timeout (in seconds)\")",
    ".setName(\"Allow Input\")": ".setName(\"Allow Input\")",
    ".setName(\"WSL Mode\")": ".setName(\"WSL Mode\")",
    ".setName(\"Only Current Log\")": ".setName(\"Only Current Log\")",
    ".setName(\"Language-Specific Settings\")": ".setName(\"Language-Specific Settings\")",
    ".setName(`Inject ${languageAlt} code`)": ".setName(`Inject ${languageAlt} code`)",
    ".setDesc(\"The path to your Cling installation.\")": ".setDesc(\"The path to your Cling installation.\")",
    ".setDesc(\"If enabled, will use a main() function as the code block entrypoint.\")": ".setDesc(\"If enabled, will use a main() function as the code block entrypoint.\")",
    ".setDesc(\"The path to your gcc / Cling installation.\")": ".setDesc(\"The path to your gcc / Cling installation.\")",
    ".setDesc(\"The path to dotnet.\")": ".setDesc(\"The path to dotnet.\")",
    ".setDesc(\"Changes the file extension for generated F# scripts.\")": ".setDesc(\"Changes the file extension for generated F# scripts.\")",
    ".setDesc(\"The path to your Golang installation.\")": ".setDesc(\"The path to your Golang installation.\")",
    ".setDesc(\"The path to your Groovy installation.\")": ".setDesc(\"The path to your Groovy installation.\")",
    ".setDesc(\"Run haskell code with ghci instead of runghc\")": ".setDesc(\"Run haskell code with ghci instead of runghc\")",
    ".setDesc(\"The path to your ghci installation.\")": ".setDesc(\"The path to your ghci installation.\")",
    ".setDesc(\"The path to your runghc installation.\")": ".setDesc(\"The path to your runghc installation.\")",
    ".setDesc(\"The Ghc path your runghc installation will call.\")": ".setDesc(\"The Ghc path your runghc installation will call.\")",
    ".setDesc(\"The path to your Java installation.\")": ".setDesc(\"The path to your Java installation.\")",
    ".setDesc(\"The path to your Kotlin installation.\")": ".setDesc(\"The path to your Kotlin installation.\")",
    ".setDesc(\"The path to your Mathematica installation.\")": ".setDesc(\"The path to your Mathematica installation.\")",
    ".setDesc(\"The path to Powershell.\")": ".setDesc(\"The path to Powershell.\")",
    ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you don't want to use PowerShell.\")": ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you don't want to use PowerShell.\")",
    ".setDesc(\"Maximal number of answers to be returned by the Prolog engine. tab is to prevent creating too huge texts in the notebook.\")": ".setDesc(\"Maximal number of answers to be returned by the Prolog engine. tab is to prevent creating too huge texts in the notebook.\")",
    ".setDesc(\"The path to your Python installation.\")": ".setDesc(\"The path to your Python installation.\")",
    ".setDesc(\"The path to your Rscript installation. Ensure you provide the Rscript binary instead of the ordinary R binary.\")": ".setDesc(\"The path to your Rscript installation. Ensure you provide the Rscript binary instead of the ordinary R binary.\")",
    ".setDesc(\"Path to your ruby installation\")": ".setDesc(\"Path to your ruby installation\")",
    ".setDesc(\"The path to your Cargo installation.\")": ".setDesc(\"The path to your Cargo installation.\")",
    ".setDesc(\"Path to your scala installation\")": ".setDesc(\"Path to your scala installation\")",
    ".setDesc(\"Path to your racket installation\")": ".setDesc(\"Path to your racket installation\")",
    ".setDesc(\"The path to shell. Default is Bash but you can use any shell you want, e.g. bash, zsh, fish, ...\")": ".setDesc(\"The path to shell. Default is Bash but you can use any shell you want, e.g. bash, zsh, fish, ...\")",
    ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you want to use a shell other than bash.\")": ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you want to use a shell other than bash.\")",
    ".setDesc('Run the shell script in Windows Subsystem for Linux. This option is used if the global \"WSL Mode\" is disabled.')": ".setDesc('Run the shell script in Windows Subsystem for Linux. This option is used if the global \"WSL Mode\" is disabled.')",
    ".setDesc(\"The path to the terminal. Default is command prompt.\")": ".setDesc(\"The path to the terminal. Default is command prompt.\")",
    ".setDesc(\"Changes the file extension for generated batch scripts. Default is .bat\")": ".setDesc(\"Changes the file extension for generated batch scripts. Default is .bat\")",
    ".setDesc(\"Path to your SQL installation. You can select the SQL dialect you prefer but you need to set the right arguments by yourself.\")": ".setDesc(\"Path to your SQL installation. You can select the SQL dialect you prefer but you need to set the right arguments by yourself.\")",
    ".setDesc(\"Set the right arguments for your database.\")": ".setDesc(\"Set the right arguments for your database.\")",
    ".setDesc(\"The path to your Octave installation.\")": ".setDesc(\"The path to your Octave installation.\")",
    ".setDesc(\"The path to your Maxima installation.\")": ".setDesc(\"The path to your Maxima installation.\")",
    ".setDesc(\"The path to your osascript installation (only available on MacOS).\")": ".setDesc(\"The path to your osascript installation (only available on MacOS).\")",
    ".setDesc(\"Path to your zig installation\")": ".setDesc(\"Path to your zig installation\")",
    ".setDesc(\"Path to your ocaml installation\")": ".setDesc(\"Path to your ocaml installation\")",
    ".setDesc(\"The path to your Swift installation.\")": ".setDesc(\"The path to your Swift installation.\")",
    ".setDesc(\"The time after which a program gets shut down automatically. This is to prevent infinite loops. \")": ".setDesc(\"The time after which a program gets shut down automatically. This is to prevent infinite loops. \")",
    ".setDesc(\"Whether or not to include a stdin input box when running blocks. In order to apply changes to this, Obsidian must be refreshed. \")": ".setDesc(\"Whether or not to include a stdin input box when running blocks. In order to apply changes to this, Obsidian must be refreshed. \")",
    ".setDesc(\"Whether or not to run code in the Windows Subsystem for Linux. If you don't have WSL installed, don't turn this on!\")": ".setDesc(\"Whether or not to run code in the Windows Subsystem for Linux. If you don't have WSL installed, don't turn this on!\")",
    ".setDesc(\"Whether or not show print log only in current code block.\")": ".setDesc(\"Whether or not show print log only in current code block.\")",
    ".setDesc(\"Pick a language to edit its language-specific settings\")": ".setDesc(\"Pick a language to edit its language-specific settings\")",
    ".setDesc(`Code to add to the top of every ${languageAlt} code block before running.`)": ".setDesc(`Code to add to the top of every ${languageAlt} code block before running.`)",
    ".renderMarkdown(\"```\" + l + \"\\n\" + src + (src.endsWith(\"\\n\")": ".renderMarkdown(\"```\" + l + \"\\n\" + src + (src.endsWith(\"\\n\")",
    ".setName(\"gcc / Cling arguments for C \")": ".setName(\"gcc / Cling arguments for C \")",
    "": ""
  }
}