{
  "manifest": {
    "translationVersion": 1732790740449,
    "pluginVersion": "1.0.3"
  },
  "description": {
    "original": "Supercharge your notes with real-time calculations without AI fuss. From dates ('Now + 20 days'), percentages ('10% of 120'), units of measurement ('100cm + 2m'), arithmetic ('10 + 5') and more!",
    "translation": "Supercharge your notes with real-time calculations without AI fuss. From dates ('Now + 20 days'), percentages ('10% of 120'), units of measurement ('100cm + 2m'), arithmetic ('10 + 5') and more!"
  },
  "dict": {
    "Notice(\"Solve: Failed to commit, no result found on the current line.\")": "Notice(\"Solve: Failed to commit, no result found on the current line.\")",
    "Notice(\"Solve: Failed to commit, no text selected.\")": "Notice(\"Solve: Failed to commit, no text selected.\")",
    "name:\"Anno Domini\"": "name:\"Anno Domini\"",
    "name:\"Before Christ\"": "name:\"Before Christ\"",
    "name:\"Commit result on current line\"": "name:\"Commit result on current line\"",
    "name:\"Commit all visible results\"": "name:\"Commit all visible results\"",
    "name:\"Commit results in selection\"": "name:\"Commit results in selection\"",
    "description:\"any character\"": "description:\"any character\"",
    "description:\"end of input\"": "description:\"end of input\"",
    "description:\"a lowercase letter\"": "description:\"a lowercase letter\"",
    "description:\"an uppercase letter\"": "description:\"an uppercase letter\"",
    "description:\"a Unicode character in Lt, Lm, or Lo\"": "description:\"a Unicode character in Lt, Lm, or Lo\"",
    "description:\"a space\"": "description:\"a space\"",
    ".setName(\"Introduction\")": ".setName(\"Introduction\")",
    ".setName(\"Engine\")": ".setName(\"Engine\")",
    ".setName(\"Explicit mode\")": ".setName(\"Explicit mode\")",
    ".setName(\"Inline Solve\")": ".setName(\"Inline Solve\")",
    ".setName(\"Include expression when committing\")": ".setName(\"Include expression when committing\")",
    ".setName(\"Include backticks when committing\")": ".setName(\"Include backticks when committing\")",
    ".setName(\"Include equals when committing\")": ".setName(\"Include equals when committing\")",
    ".setName(\"Variable\")": ".setName(\"Variable\")",
    ".setName(\"Show variable result\")": ".setName(\"Show variable result\")",
    ".setName(\"Provider Management\")": ".setName(\"Provider Management\")",
    ".setName(\"Arithmetic\")": ".setName(\"Arithmetic\")",
    ".setName(\"Function Arithmetic\")": ".setName(\"Function Arithmetic\")",
    ".setName(\"Vector Arithmetic\")": ".setName(\"Vector Arithmetic\")",
    ".setName(\"Percentage\")": ".setName(\"Percentage\")",
    ".setName(\"Datetime\")": ".setName(\"Datetime\")",
    ".setName(\"Unit of Measurement\")": ".setName(\"Unit of Measurement\")",
    ".setName(\"Dice\")": ".setName(\"Dice\")",
    ".setName(\"Binary (BigInteger)\")": ".setName(\"Binary (BigInteger)\")",
    ".setName(\"Interface\")": ".setName(\"Interface\")",
    ".setName(\"Show result at end of line\")": ".setName(\"Show result at end of line\")",
    ".setName(\"Show status bar companion\")": ".setName(\"Show status bar companion\")",
    ".setName(\"Animate results\")": ".setName(\"Animate results\")",
    ".setName(\"Animation transition\")": ".setName(\"Animation transition\")",
    ".setName(\"Animation duration\")": ".setName(\"Animation duration\")",
    ".setName(\"Arithmetic Provider\")": ".setName(\"Arithmetic Provider\")",
    ".setName(\"Show = before the result\")": ".setName(\"Show = before the result\")",
    ".setName(\"Datetime Provider\")": ".setName(\"Datetime Provider\")",
    ".setName(\"Parsing format\")": ".setName(\"Parsing format\")",
    ".setName(\"Number Result (Shared)\")": ".setName(\"Number Result (Shared)\")",
    ".setName(\"Decimal seperator\")": ".setName(\"Decimal seperator\")",
    ".setName(\"Integer Result\")": ".setName(\"Integer Result\")",
    ".setName(\"Display thousand separators\")": ".setName(\"Display thousand separators\")",
    ".setName(\"Float Result\")": ".setName(\"Float Result\")",
    ".setName(\"Decimal places\")": ".setName(\"Decimal places\")",
    ".setName(\"Percentage Result\")": ".setName(\"Percentage Result\")",
    ".setName(\"Datetime Result\")": ".setName(\"Datetime Result\")",
    ".setName(\"Format\")": ".setName(\"Format\")",
    ".setName(\"Hex Result\")": ".setName(\"Hex Result\")",
    ".setName(\"Value padding\")": ".setName(\"Value padding\")",
    ".setName(\"Padding zeros\")": ".setName(\"Padding zeros\")",
    ".setName(\"Unit of Measurement Result\")": ".setName(\"Unit of Measurement Result\")",
    ".setName(\"Show unit name\")": ".setName(\"Show unit name\")",
    ".setName(\"Style\")": ".setName(\"Style\")",
    ".setDesc(`Solve will only display results for sentences ending with '=' sign. Default is ${b.engine.explicitMode}`)": ".setDesc(`Solve will only display results for sentences ending with '=' sign. Default is ${b.engine.explicitMode}`)",
    ".setDesc(`Solve will include the expression in the format \\`EXPRESSION = RESULT\\` when committing e.g. '2 + 2 = 4'. Default is ${b.inlineSolve.includeExpressionOnCommit}`)": ".setDesc(`Solve will include the expression in the format \\`EXPRESSION = RESULT\\` when committing e.g. '2 + 2 = 4'. Default is ${b.inlineSolve.includeExpressionOnCommit}`)",
    ".setDesc(`Solve will enclose the committed expression in backticks when committing. Default is ${b.inlineSolve.includeBackticksOnCommit}`)": ".setDesc(`Solve will enclose the committed expression in backticks when committing. Default is ${b.inlineSolve.includeBackticksOnCommit}`)",
    ".setDesc(`Solve will include the equals when committing. Has no effect if solve is set to include the expression. Default is ${b.inlineSolve.includeBackticksOnCommit}`)": ".setDesc(`Solve will include the equals when committing. Has no effect if solve is set to include the expression. Default is ${b.inlineSolve.includeBackticksOnCommit}`)",
    ".setDesc(`Solve will display results at the end of variables. Default is ${b.variable.renderResult}`)": ".setDesc(`Solve will display results at the end of variables. Default is ${b.variable.renderResult}`)",
    ".setDesc(`Enable the arithmetic provider e.g. 10 + 2. Default is ${b.arithmeticProvider.enabled}`)": ".setDesc(`Enable the arithmetic provider e.g. 10 + 2. Default is ${b.arithmeticProvider.enabled}`)",
    ".setDesc(`Enable the function arithmetic provider e.g. sin(), cos(). Default is ${b.functionArithmeticProvider.enabled}`)": ".setDesc(`Enable the function arithmetic provider e.g. sin(), cos(). Default is ${b.functionArithmeticProvider.enabled}`)",
    ".setDesc(`Enable the vector arithmetic provider e.g. (10, 22.3), vec3(1.0, 23, 18.3). Default is ${b.vectorArithmeticProvider.enabled}`)": ".setDesc(`Enable the vector arithmetic provider e.g. (10, 22.3), vec3(1.0, 23, 18.3). Default is ${b.vectorArithmeticProvider.enabled}`)",
    ".setDesc(`Enable the percentage provider e.g. 10% of 200, increase 20 by 10%. Default is ${b.percentageArithmeticProvider.enabled}`)": ".setDesc(`Enable the percentage provider e.g. 10% of 200, increase 20 by 10%. Default is ${b.percentageArithmeticProvider.enabled}`)",
    ".setDesc(`Enable the datetime provider e.g. today + 20 days, last monday. Default is ${b.datetimeProvider.enabled}`)": ".setDesc(`Enable the datetime provider e.g. today + 20 days, last monday. Default is ${b.datetimeProvider.enabled}`)",
    ".setDesc(`Enable the unit of measurement provider e.g. 10cm + 20, 200cm to m. Default is ${b.unitOfMeasurementProvider.enabled}`)": ".setDesc(`Enable the unit of measurement provider e.g. 10cm + 20, 200cm to m. Default is ${b.unitOfMeasurementProvider.enabled}`)",
    ".setDesc(`Enable the dice provider e.g. roll(1, 100), roll between 1 and 12. Default is ${b.diceProvider.enabled}`)": ".setDesc(`Enable the dice provider e.g. roll(1, 100), roll between 1 and 12. Default is ${b.diceProvider.enabled}`)",
    ".setDesc(`Enable the binary (BigInteger) provider e.g. 0b10101 >> 4, right shift. Default is ${b.bigIntegerArithmeticProvider.enabled}`)": ".setDesc(`Enable the binary (BigInteger) provider e.g. 0b10101 >> 4, right shift. Default is ${b.bigIntegerArithmeticProvider.enabled}`)",
    ".setDesc(`Position results at the conclusion of lines, not text's termination. Be cautious when using this setting, as it may cause overlap between the displayed result and the text on the same line. Default is ${b.interface.renderResultEndOfLine}`)": ".setDesc(`Position results at the conclusion of lines, not text's termination. Be cautious when using this setting, as it may cause overlap between the displayed result and the text on the same line. Default is ${b.interface.renderResultEndOfLine}`)",
    ".setDesc(`Show the Solve companion in the status bar. Default is ${b.interface.showStatusBarCompanion}`)": ".setDesc(`Show the Solve companion in the status bar. Default is ${b.interface.showStatusBarCompanion}`)",
    ".setDesc(`Enable animate results on the current active line that is being solved. Default is ${b.interface.animateResults}`)": ".setDesc(`Enable animate results on the current active line that is being solved. Default is ${b.interface.animateResults}`)",
    ".setDesc(`Specify the transition class name from Animate.css to use on animated results. Default is ${b.interface.animationClass.replace(\"animate__\",\"\")}`)": ".setDesc(`Specify the transition class name from Animate.css to use on animated results. Default is ${b.interface.animationClass.replace(\"animate__\",\"\")}`)",
    ".setDesc(`Specify the animation duration (CSS format) to use for animated results. Default is ${b.interface.animationDuration}`)": ".setDesc(`Specify the animation duration (CSS format) to use for animated results. Default is ${b.interface.animationDuration}`)",
    ".setDesc(`Adds the equals sign before arithmetic results to improve the natural reading of expressions. Default is ${b.arithmeticProvider.renderEqualsBeforeResult}`)": ".setDesc(`Adds the equals sign before arithmetic results to improve the natural reading of expressions. Default is ${b.arithmeticProvider.renderEqualsBeforeResult}`)",
    ".setDesc(\"Specify the format to be used for parsing datetime values.\")": ".setDesc(\"Specify the format to be used for parsing datetime values.\")",
    ".setDesc(\"Specify the seperator format to be used for decimals. Default is English\")": ".setDesc(\"Specify the seperator format to be used for decimals. Default is English\")",
    ".setDesc(`Adds thousand separators to integer results. Default is ${b.integerResult.enableSeperator}`)": ".setDesc(`Adds thousand separators to integer results. Default is ${b.integerResult.enableSeperator}`)",
    ".setDesc(`Adds thousand separators to float results. Default is ${b.floatResult.enableSeperator}`)": ".setDesc(`Adds thousand separators to float results. Default is ${b.floatResult.enableSeperator}`)",
    ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.floatResult.decimalPlaces}`)": ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.floatResult.decimalPlaces}`)",
    ".setDesc(`Adds thousand separators to percentage results. Default is ${b.percentageResult.enableSeperator}`)": ".setDesc(`Adds thousand separators to percentage results. Default is ${b.percentageResult.enableSeperator}`)",
    ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.percentageResult.decimalPlaces}`)": ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.percentageResult.decimalPlaces}`)",
    ".setDesc(`The format to use when displaying a date in the result. Default is ${b.datetimeResult.format}`)": ".setDesc(`The format to use when displaying a date in the result. Default is ${b.datetimeResult.format}`)",
    ".setDesc(`Enable or disable padding the start of hex values with zeros for consistency. Default is ${b.hexResult.enablePadding}`)": ".setDesc(`Enable or disable padding the start of hex values with zeros for consistency. Default is ${b.hexResult.enablePadding}`)",
    ".setDesc(`Specify the number of leading zeros to pad hex values with for a uniform appearance. Default is ${b.hexResult.paddingZeros}`)": ".setDesc(`Specify the number of leading zeros to pad hex values with for a uniform appearance. Default is ${b.hexResult.paddingZeros}`)",
    ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.unitOfMeasurementResult.decimalPlaces}`)": ".setDesc(`Adjust the number of decimal places, setting to reveal more digits for accuracy or fewer digits for simplicity in number displays. Default is ${b.unitOfMeasurementResult.decimalPlaces}`)",
    ".setDesc(`Show the unit name in the result instead of the unit abbreviation. Default is ${b.unitOfMeasurementResult.unitNames}`)": ".setDesc(`Show the unit name in the result instead of the unit abbreviation. Default is ${b.unitOfMeasurementResult.unitNames}`)",
    ".setDesc(\"The font family and font size settings are inherited from the Obsidian text font. For more advanced styling options, consider using the Style Settings plugin by @mgmeyers.\")": ".setDesc(\"The font family and font size settings are inherited from the Obsidian text font. For more advanced styling options, consider using the Style Settings plugin by @mgmeyers.\")",
    ".setDesc(\"Solve is an unobtrusive Obsidian plugin that quietly processes equations and patterns in real time, inspired by NoteMaster's Smart Mode. With solid engineering at its core, Solve enhances note-taking without relying on ChatGPT. For instance, effortlessly calculates date and time expressions (e.g., 'Now + 20 days'), performs arithmetic (e.g., '10 + 5'), and more features are coming soon.\")": ".setDesc(\"Solve is an unobtrusive Obsidian plugin that quietly processes equations and patterns in real time, inspired by NoteMaster's Smart Mode. With solid engineering at its core, Solve enhances note-taking without relying on ChatGPT. For instance, effortlessly calculates date and time expressions (e.g., 'Now + 20 days'), performs arithmetic (e.g., '10 + 5'), and more features are coming soon.\")"
  }
}