{
  "manifest": {
    "translationVersion": 1737956607669,
    "pluginVersion": "1.44.2"
  },
  "description": {
    "original": "Advanced modes for Obsidian URI",
    "translation": "Advanced modes for Obsidian URI"
  },
  "dict": {
    ".setName(\"Open file on write\")": ".setName(\"Open file on write\")",
    ".setName(\"Open file on write in a new pane\")": ".setName(\"Open file on write in a new pane\")",
    ".setName(\"Open daily note in a new pane\")": ".setName(\"Open daily note in a new pane\")",
    ".setName(\"Open file without write in new pane\")": ".setName(\"Open file without write in new pane\")",
    ".setName(\"Use UID instead of file paths\")": ".setName(\"Use UID instead of file paths\")",
    ".setName(\"Include vault name/ID parameter\")": ".setName(\"Include vault name/ID parameter\")",
    ".setName(\"Vault identifying parameter\")": ".setName(\"Vault identifying parameter\")",
    ".setName(\"Add filepath parameter\")": ".setName(\"Add filepath parameter\")",
    ".setName(\"UID field in frontmatter\")": ".setName(\"UID field in frontmatter\")",
    ".setName(\"Allow executing arbitrary code via eval\")": ".setName(\"Allow executing arbitrary code via eval\")",
    ".setName(\"Donate\")": ".setName(\"Donate\")",
    ".setDesc(\"Choose whether to use the vault Name or its internal ID as the identifying parameter.\")": ".setDesc(\"Choose whether to use the vault Name or its internal ID as the identifying parameter.\")",
    ".setDesc(\"When using UID instead of file paths, you can still add the filepath parameter to know what this URI is about. It's NOT actually used.\")": ".setDesc(\"When using UID instead of file paths, you can still add the filepath parameter to know what this URI is about. It's NOT actually used.\")",
    ".setDesc(\"\\u26A0\\uFE0F This can be dangerous as it allows executing arbitrary code. Only enable this if you trust the source of the URIs you are using and know what you are doing. \\u26A0\\uFE0F\")": ".setDesc(\"\\u26A0\\uFE0F This can be dangerous as it allows executing arbitrary code. Only enable this if you trust the source of the URIs you are using and know what you are doing. \\u26A0\\uFE0F\")",
    ".setDesc(\"If you like this Plugin, consider donating to support continued development.\")": ".setDesc(\"If you like this Plugin, consider donating to support continued development.\")",
    ".setPlaceholder(\"Type your data to be written to the file or leave it empty to just open it\")": ".setPlaceholder(\"Type your data to be written to the file or leave it empty to just open it\")",
    ".setPlaceholder(\"Replacement text\")": ".setPlaceholder(\"Replacement text\")",
    ".setPlaceholder(\"Searched text. RegEx is supported\")": ".setPlaceholder(\"Searched text. RegEx is supported\")",
    ".setPlaceholder(\"Choose a workspace\")": ".setPlaceholder(\"Choose a workspace\")",
    ".setTitle(\"Copy Advanced URI\")": ".setTitle(\"Copy Advanced URI\")",
    "name:\"Copy URI for file with options\"": "name:\"Copy URI for file with options\"",
    "name:\"Copy URI for current file\"": "name:\"Copy URI for current file\"",
    "name:\"Copy URI for daily note\"": "name:\"Copy URI for daily note\"",
    "name:\"Copy URI for search and replace\"": "name:\"Copy URI for search and replace\"",
    "name:\"Copy URI for command\"": "name:\"Copy URI for command\"",
    "name:\"Copy URI for current block\"": "name:\"Copy URI for current block\"",
    "name:\"Copy URI for workspace\"": "name:\"Copy URI for workspace\"",
    "name:\"Copy URI for selected canvas nodes\"": "name:\"Copy URI for selected canvas nodes\"",
    "name:\"Copy URI for current canvas viewport\"": "name:\"Copy URI for current canvas viewport\"",
    ".addOption(\"name\",\"Name\")": ".addOption(\"name\",\"Name\")",
    "Notice(\"Advanced URI copied to your clipboard\")": "Notice(\"Advanced URI copied to your clipboard\")",
    "Notice(\"Cannot find Hover Editor plugin. Please file an issue.\")": "Notice(\"Cannot find Hover Editor plugin. Please file an issue.\")",
    "Notice(\"Unable to create new file.\")": "Notice(\"Unable to create new file.\")",
    "Notice(\"Can't find heading\")": "Notice(\"Can't find heading\")",
    "Notice(\"Workspaces plugin is not enabled\")": "Notice(\"Workspaces plugin is not enabled\")",
    "Notice(\"Cannot find file\")": "Notice(\"Cannot find file\")",
    "Notice(\"Active view is not a canvas\")": "Notice(\"Active view is not a canvas\")",
    "Notice(\"Failed to read the daily note template\")": "Notice(\"Failed to read the daily note template\")",
    "Notice(\"File already exists\")": "Notice(\"File already exists\")",
    "Notice(\"Checking for updates\\u2026\")": "Notice(\"Checking for updates\\u2026\")",
    "Notice(\"Daily notes plugin is not loaded\")": "Notice(\"Daily notes plugin is not loaded\")",
    "\"Choose a file\"": "\"Choose a file\"",
    "\"Select a file to be opened before executing the command\"": "\"Select a file to be opened before executing the command\"",
    "Don't specify a file": "Don't specify a file",
    "Current file": "Current file",
    "`Open in ${i} mode`": "`Open in ${i} mode`",
    "a=\"Open\"": "a=\"Open\"",
    "\"Used file for search and replace\"": "\"Used file for search and replace\"",
    "`As RegEx: ${e}`": "`As RegEx: ${e}`",
    "\"Empty text (replace with nothing)\"": "\"Empty text (replace with nothing)\"",
    "Notice(`Enabled ${e}`)": "Notice(`Enabled ${e}`)",
    "Notice(`Disabled ${e}`)": "Notice(`Disabled ${e}`)",
    "Notice(`Saved current workspace to ${t}`)": "Notice(`Saved current workspace to ${t}`)",
    "Notice(\"Eval is not allowed. Please enable it in the settings.\")": "Notice(\"Eval is not allowed. Please enable it in the settings.\")",
    "Notice(`Can't parse ${n.searchregex} as RegEx`)": "Notice(`Can't parse ${n.searchregex} as RegEx`)",
    "Notice(\"No file opened\")": "Notice(\"No file opened\")",
    ".log(\"error reading FileCache (empty file?)": ".log(\"error reading FileCache (empty file?)",
    ".error(`Failed to read the daily note template '${t}'`,i)": ".error(`Failed to read the daily note template '${t}'`,i)",
    ".error(`Failed to create file: '${d}'`,p)": ".error(`Failed to create file: '${d}'`,p)",
    ".error(`Failed to create file: '${c}'`,s)": ".error(`Failed to create file: '${c}'`,s)"
  }
}