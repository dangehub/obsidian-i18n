{
  "manifest": {
    "translationVersion": 1734358644878,
    "pluginVersion": "2.4.0"
  },
  "description": {
    "original": "Successor to darakah's Timelines plugin: Generate a chronological timeline in which all 'events' are notes that include a specific tag or set of tags.",
    "translation": "Successor to darakah's Timelines plugin: Generate a chronological timeline in which all 'events' are notes that include a specific tag or set of tags."
  },
  "dict": {
    "Notice(`No date found for ${file.name}`)": "Notice(`No date found for ${file.name}`)",
    ".log(message, object !== null && object !== void 0 ? object : '')": ".log(message, object !== null && object !== void 0 ? object : '')",
    ".log(other)": ".log(other)",
    ".log(array)": ".log(array)",
    ".log(pulled)": ".log(pulled)",
    ".log(evens)": ".log(evens)",
    ".log(value)": ".log(value)",
    ".log(key)": ".log(key)",
    ".log(_.now()": ".log(_.now()",
    ".log('done saving!')": ".log('done saving!')",
    ".log(text)": ".log(text)",
    ".log(_.castArray(array)": ".log(_.castArray(array)",
    ".log(shallow[0] === objects[0])": ".log(shallow[0] === objects[0])",
    ".log(el === document.body)": ".log(el === document.body)",
    ".log(el.nodeName)": ".log(el.nodeName)",
    ".log(el.childNodes.length)": ".log(el.childNodes.length)",
    ".log(deep[0] === objects[0])": ".log(deep[0] === objects[0])",
    ".log(object.a[0].b.c)": ".log(object.a[0].b.c)",
    ".log(object.x[0].y.z)": ".log(object.x[0].y.z)",
    ".log(object)": ".log(object)",
    ".log('clicked ' + this.label)": ".log('clicked ' + this.label)",
    ".log(objects)": ".log(objects)",
    ".log(objects[0] === objects[1])": ".log(objects[0] === objects[1])",
    ".log(_.identity(object)": ".log(_.identity(object)",
    ".log(arrays)": ".log(arrays)",
    ".log(arrays[0] === arrays[1])": ".log(arrays[0] === arrays[1])",
    " log(min)": " log(min)",
    " log(max)": " log(max)",
    " log(\n          'Invalid option detected in \"' +\n            option +\n            '\".' +\n            \" Allowed values are:\" +\n            Validator.print(refOptionType)": " log(\n          'Invalid option detected in \"' +\n            option +\n            '\".' +\n            \" Allowed values are:\" +\n            Validator.print(refOptionType)",
    " log(\n        'Invalid type received for \"' +\n          option +\n          '\". Expected: ' +\n          Validator.print(Object.keys(refOptionObj)": " log(\n        'Invalid type received for \"' +\n          option +\n          '\". Expected: ' +\n          Validator.print(Object.keys(refOptionObj)",
    ".log('event', event, properties)": ".log('event', event, properties)",
    ".log('ids', ids)": ".log('ids', ids)",
    ".log('item1', item1)": ".log('item1', item1)",
    ".log('filtered items', items)": ".log('filtered items', items)",
    ".log(ids)": ".log(ids)",
    ".log(\"Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:\", hiddenDates[i].repeat)": ".log(\"Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:\", hiddenDates[i].repeat)",
    ".log('WARNING: infinite loop in redraw?')": ".log('WARNING: infinite loop in redraw?')",
    ".log(100 / scale)": ".log(100 / scale)",
    ".log(granularity)": ".log(granularity)",
    ".log('%c' + message + Validator.printLocation(path, option)": ".log('%c' + message + Validator.printLocation(path, option)",
    " log('Invalid option detected in \"' + option + '\".' +\n          ' Allowed values are:' + Validator.print(refOptionType)": " log('Invalid option detected in \"' + option + '\".' +\n          ' Allowed values are:' + Validator.print(refOptionType)",
    " log('Invalid type received for \"' + option +\n        '\". Expected: ' + Validator.print(Object.keys(refOptionObj)": " log('Invalid type received for \"' + option +\n        '\". Expected: ' + Validator.print(Object.keys(refOptionObj)",
    ".log('%cUnknown option detected: \"' + option + '\"' + msg, printStyle)": ".log('%cUnknown option detected: \"' + option + '\"' + msg, printStyle)",
    ".log('%cErrors have been found in the supplied options object.', printStyle)": ".log('%cErrors have been found in the supplied options object.', printStyle)",
    ".log(range)": ".log(range)",
    ".log(group.id + \": Unknown shading group target given:\" + subGroupId)": ".log(group.id + \": Unknown shading group target given:\" + subGroupId)",
    ".log(`Initializing Plugin: ${this.pluginName}`)": ".log(`Initializing Plugin: ${this.pluginName}`)",
    ".log(`Loaded Plugin: ${this.pluginName}`)": ".log(`Loaded Plugin: ${this.pluginName}`)",
    ".log(`Unloaded Plugin: ${this.pluginName}`)": ".log(`Unloaded Plugin: ${this.pluginName}`)",
    ".error(\"buildTimelineDate | Couldn't create a luxon date string!\")": ".error(\"buildTimelineDate | Couldn't create a luxon date string!\")",
    ".error(`Invalid timeframe: ${timeframe}`)": ".error(`Invalid timeframe: ${timeframe}`)",
    ".error(t)": ".error(t)",
    ".error(t,e)": ".error(t,e)",
    ".error(\"If you see this, report it please.\")": ".error(\"If you see this, report it please.\")",
    ".error(\"dont know how to handle\", item, subObj, newPath)": ".error(\"dont know how to handle\", item, subObj, newPath)",
    ".error(\n        \"%c\" + message + Validator.printLocation(path, option)": ".error(\n        \"%c\" + message + Validator.printLocation(path, option)",
    ".error(\n      '%cUnknown option detected: \"' + option + '\"' + msg,\n      VALIDATOR_PRINT_STYLE$1\n    )": ".error(\n      '%cUnknown option detected: \"' + option + '\"' + msg,\n      VALIDATOR_PRINT_STYLE$1\n    )",
    ".error(\n        'Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time'\n      )": ".error(\n        'Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time'\n      )",
    ".error('dont know how to handle', item, subObj, newPath)": ".error('dont know how to handle', item, subObj, newPath)",
    ".error(\"Couldn't build a start date for timeline on vertical timeline\")": ".error(\"Couldn't build a start date for timeline on vertical timeline\")",
    ".error(\"There's no last timeline date\")": ".error(\"There's no last timeline date\")",
    ".error(\"Cannot normalize the event's start date! Skipping\")": ".error(\"Cannot normalize the event's start date! Skipping\")",
    "name: '+name);\n\t    };\n\n\t    input$5.autodetect.push({\n\t        p: 5,\n\t        test: function (h) {\n\t            var rest = [], len = arguments.length - 1;\n\t            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n\t            if (!rest.length && type$c(h) === '": "name: '+name);\n\t    };\n\n\t    input$5.autodetect.push({\n\t        p: 5,\n\t        test: function (h) {\n\t            var rest = [], len = arguments.length - 1;\n\t            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n\t            if (!rest.length && type$c(h) === '",
    "name:\"isRegisteredSymbol\"": "name:\"isRegisteredSymbol\"",
    "name:\"isWellKnownSymbol\"": "name:\"isWellKnownSymbol\"",
    "name:\"flush\"": "name:\"flush\"",
    "name: 'Anno Domini'": "name: 'Anno Domini'",
    "name: 'Before Christ'": "name: 'Before Christ'",
    "name: \"flush\"": "name: \"flush\"",
    "name: 'Render static timeline'": "name: 'Render static timeline'",
    "name: 'Insert timeline event'": "name: 'Insert timeline event'",
    "name: 'Insert timeline event (frontmatter)'": "name: 'Insert timeline event (frontmatter)'",
    "name: 'Reload current note'": "name: 'Reload current note'",
    "description: '',\n                startDate: '": "description: '',\n                startDate: '",
    "text: 'item 1'": "text: 'item 1'",
    "text: 'item 2'": "text: 'item 2'",
    "text: 'item 3'": "text: 'item 3'",
    "text: 'item 4'": "text: 'item 4'",
    "text: 'item without an id'": "text: 'item without an id'",
    "text: 'item 2 (updated)'": "text: 'item 2 (updated)'",
    "text: 'item 4 (new)'": "text: 'item 4 (new)'",
    "text:'',style:'": "text:'',style:'",
    "text: 'Customize frontmatter keys'": "text: 'Customize frontmatter keys'",
    "text: `Specify the front matter keys used to extract start dates, end dates,\n         and titles for the timeline notes. Defaults to 'start-date', 'end-date', and 'title'.`": "text: `Specify the front matter keys used to extract start dates, end dates,\n         and titles for the timeline notes. Defaults to 'start-date', 'end-date', and 'title'.`",
    "text: 'Developer tools'": "text: 'Developer tools'",
    "text: '', });\n            this.updateStatusBarText(plugin);\n            plugin.registerEvent(plugin.app.workspace.on('": "text: '', });\n            this.updateStatusBarText(plugin);\n            plugin.registerEvent(plugin.app.workspace.on('",
    ".setText('New Event')": ".setText('New Event')",
    ".setName('Default timeline tag')": ".setName('Default timeline tag')",
    ".setName('Chronological direction')": ".setName('Chronological direction')",
    ".setName('Event element tag (HTML)')": ".setName('Event element tag (HTML)')",
    ".setName('Maximum padding on dates')": ".setName('Maximum padding on dates')",
    ".setName('Show event counter')": ".setName('Show event counter')",
    ".setName('Display note preview on hover')": ".setName('Display note preview on hover')",
    ".setName('Vertical Timeline Date Display Format')": ".setName('Vertical Timeline Date Display Format')",
    ".setName('Start date keys')": ".setName('Start date keys')",
    ".setName('End date keys')": ".setName('End date keys')",
    ".setName('Title keys')": ".setName('Title keys')",
    ".setName('Debug mode')": ".setName('Debug mode')",
    ".setDesc('Tag to specify which notes to include in created timelines e.g. timeline for #timeline tag')": ".setDesc('Tag to specify which notes to include in created timelines e.g. timeline for #timeline tag')",
    ".setDesc('When enabled, events will be sorted from old to new. Turn this setting off to sort from new to old.')": ".setDesc('When enabled, events will be sorted from old to new. Turn this setting off to sort from new to old.')",
    ".setDesc(`Default: div. Acceptable values are: ${acceptableValuesString}`)": ".setDesc(`Default: div. Acceptable values are: ${acceptableValuesString}`)",
    ".setDesc(`Default: on. Adds an element to the editor status bar showing the total number\n        of events in the current file. Helpful for vaults with lots of events.`)": ".setDesc(`Default: on. Adds an element to the editor status bar showing the total number\n        of events in the current file. Helpful for vaults with lots of events.`)",
    ".setDesc('When enabled, linked notes will display as a pop up when hovering over an event in the timeline.')": ".setDesc('When enabled, linked notes will display as a pop up when hovering over an event in the timeline.')",
    ".setDesc(`Specify the format for the date displayed in the vertical timeline. Check the docs\n        for information on acceptable formatting tokens.`)": ".setDesc(`Specify the format for the date displayed in the vertical timeline. Check the docs\n        for information on acceptable formatting tokens.`)",
    ".setDesc('Comma-separated list of frontmatter keys for start date. Example: start-date,fc-date')": ".setDesc('Comma-separated list of frontmatter keys for start date. Example: start-date,fc-date')",
    ".setDesc('Comma-separated list of frontmatter keys for end date.')": ".setDesc('Comma-separated list of frontmatter keys for end date.')",
    ".setDesc('Comma-separated list of frontmatter keys for title.')": ".setDesc('Comma-separated list of frontmatter keys for title.')",
    ".setDesc(`If you are having an issue or have been asked to look at the logs, turn this on to see logs in the console.\n        Debug mode will default to off on plugin load and the current value will not be saved.`)": ".setDesc(`If you are having an issue or have been asked to look at the logs, turn this on to see logs in the console.\n        Debug mode will default to off on plugin load and the current value will not be saved.`)",
    ".innerText = \"Error: your browser does not support HTML canvas\"": ".innerText = \"Error: your browser does not support HTML canvas\"",
    ".innerText = \"brightness:\"": ".innerText = \"brightness:\"",
    ".innerText = \"opacity:\"": ".innerText = \"opacity:\"",
    ".innerText = \"new\"": ".innerText = \"new\"",
    ".innerText = \"initial\"": ".innerText = \"initial\"",
    ".innerText = \"cancel\"": ".innerText = \"cancel\"",
    ".innerText = \"apply\"": ".innerText = \"apply\"",
    ".innerText = \"save\"": ".innerText = \"save\"",
    ".innerText = \"load last\"": ".innerText = \"load last\"",
    ".innerText = \"generate options\"": ".innerText = \"generate options\""
  }
}