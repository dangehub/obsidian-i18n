{
  "manifest": {
    "translationVersion": 1730260690552,
    "pluginVersion": "1.0.38"
  },
  "description": {
    "original": "Sync TickTick tasks to Obsidian, and Obsidian tasks to TickTick",
    "translation": "Sync TickTick tasks to Obsidian, and Obsidian tasks to TickTick"
  },
  "dict": {
    ".setPlaceholder(\"User Name\"": ".setPlaceholder(\"User Name\"",
    ".setPlaceholder(\"Password\"": ".setPlaceholder(\"Password\"",
    ".setPlaceholder(\"Sync interval\"": ".setPlaceholder(\"Sync interval\"",
    ".setPlaceholder(\"Example: folder1/folder2\"": ".setPlaceholder(\"Example: folder1/folder2\"",
    ".setDesc(\"Select home server\"": ".setDesc(\"Select home server\"",
    ".setDesc(\"Please login here.\"": ".setDesc(\"Please login here.\"",
    ".setDesc(\"New tasks are automatically synced to the default project. You can modify the project here.\"": ".setDesc(\"New tasks are automatically synced to the default project. You can modify the project here.\"",
    ".setDesc(\"To limit the tasks TickTickSync will synchronize from TickTick to Obsidian select a tag and/or project(list) below. If a tag is entered, only tasks with that tag will be synchronized. If a project(list) is selected, only tasks in that project will be synchronized. If both are chosen the behavior will be determined by your settings. See result below.\"": ".setDesc(\"To limit the tasks TickTickSync will synchronize from TickTick to Obsidian select a tag and/or project(list) below. If a tag is entered, only tasks with that tag will be synchronized. If a project(list) is selected, only tasks in that project will be synchronized. If both are chosen the behavior will be determined by your settings. See result below.\"",
    ".setDesc(\"Only tasks in this project will be synchronized.\"": ".setDesc(\"Only tasks in this project will be synchronized.\"",
    ".setDesc(\"Determine how Tags will be handled.\"": ".setDesc(\"Determine how Tags will be handled.\"",
    ".setDesc('Tag value, no \"#\"'": ".setDesc('Tag value, no \"#\"'",
    ".setDesc(\"Please specify the desired interval time, with seconds as the default unit. The default setting is 300 seconds, which corresponds to syncing once every 5 minutes. You can customize it, but it cannot be lower than 20 seconds.\"": ".setDesc(\"Please specify the desired interval time, with seconds as the default unit. The default setting is 300 seconds, which corresponds to syncing once every 5 minutes. You can customize it, but it cannot be lower than 20 seconds.\"",
    ".setDesc(\"By default, only tasks marked with #TickTick are synchronized. If this option is turned on, all tasks in the vault will be synchronized.**NOTE: This includes all tasks that are currently Items of a task.**\"": ".setDesc(\"By default, only tasks marked with #TickTick are synchronized. If this option is turned on, all tasks in the vault will be synchronized.**NOTE: This includes all tasks that are currently Items of a task.**\"",
    ".setDesc(\"Manually perform a synchronization task.\"": ".setDesc(\"Manually perform a synchronization task.\"",
    ".setDesc(\"Check for possible issues: sync error, file renaming not updated, or missed tasks not synchronized.\"": ".setDesc(\"Check for possible issues: sync error, file renaming not updated, or missed tasks not synchronized.\"",
    ".setDesc(\"After enabling this option, all log information will be output to the console, which can help check for errors.\"": ".setDesc(\"After enabling this option, all log information will be output to the console, which can help check for errors.\"",
    ".setDesc(\"Click to backup TickTick data, The backed-up files will be stored in the root directory of the Obsidian vault.\"": ".setDesc(\"Click to backup TickTick data, The backed-up files will be stored in the root directory of the Obsidian vault.\"",
    ".setDesc(\"Folder to be used for TickTick Tasks.\"": ".setDesc(\"Folder to be used for TickTick Tasks.\"",
    ".Notice(\"Please login from Settings.\"": ".Notice(\"Please login from Settings.\"",
    ".Notice(\"Login failed, please login through settings.\"": ".Notice(\"Login failed, please login through settings.\"",
    ".Notice(\"Unable to get Tasks: \"": ".Notice(\"Unable to get Tasks: \"",
    ".Notice(`Login failed: ${error}\nPlease login again`)": ".Notice(`Login failed: ${error}\nPlease login again`)",
    ".Notice(`new Item ${content} ${action}`)": ".Notice(`new Item ${content} ${action}`)",
    "Notice(`Duplicate check failed:  ${Error2}`, 0)": "Notice(`Duplicate check failed:  ${Error2}`, 0)",
    "Notice(\"Unable to get Tasks: \" + errorString, 0)": "Notice(\"Unable to get Tasks: \" + errorString, 0)",
    "Notice(\"An error occurred:\", error)": "Notice(\"An error occurred:\", error)",
    ".Notice(\"Please fill in both User Name and Password\"": ".Notice(\"Please fill in both User Name and Password\"",
    ".Notice(\"Logged in! Fetching projects\"": ".Notice(\"Logged in! Fetching projects\"",
    ".Notice(\"Project Fetch complete.\"": ".Notice(\"Project Fetch complete.\"",
    ".Notice(\"Unable to create file for selected default project \"": ".Notice(\"Unable to create file for selected default project \"",
    ".Notice(`Wrong type,please enter a number.`": ".Notice(`Wrong type,please enter a number.`",
    ".Notice(`The synchronization interval time cannot be less than 20 seconds.`": ".Notice(`The synchronization interval time cannot be less than 20 seconds.`",
    ".Notice(\"The synchronization interval must be an integer.\"": ".Notice(\"The synchronization interval must be an integer.\"",
    ".Notice(\"Settings have been updated.\"": ".Notice(\"Settings have been updated.\"",
    ".Notice(\"Full vault sync is enabled.\"": ".Notice(\"Full vault sync is enabled.\"",
    ".Notice(\"Full vault sync not enabled.\"": ".Notice(\"Full vault sync not enabled.\"",
    ".Notice(\"Full vault sync is disabled.\"": ".Notice(\"Full vault sync is disabled.\"",
    ".Notice(`Please log in from settings first`": ".Notice(`Please log in from settings first`",
    ".Notice(`Sync completed..`": ".Notice(`Sync completed..`",
    ".Notice(`An error occurred while syncing.:${error}`": ".Notice(`An error occurred while syncing.:${error}`",
    ".Notice(`All files have been scanned.`": ".Notice(`All files have been scanned.`",
    ".Notice(`New folder ${newFolderFile.path} created.`": ".Notice(`New folder ${newFolderFile.path} created.`",
    ".Notice(`Folder ${new_folder} creation failed: ${error}. Please correct and try again.`": ".Notice(`Folder ${new_folder} creation failed: ${error}. Please correct and try again.`",
    ".Notice(`Default folder is now ${newFolderFile.path}.`": ".Notice(`Default folder is now ${newFolderFile.path}.`",
    ".Notice(\"Cannot postpone a null date\"": ".Notice(\"Cannot postpone a null date\"",
    ".Notice(\"Error downloading projects: \"": ".Notice(\"Error downloading projects: \"",
    ".Notice(\"New Tasks will be added to TickTick on next Sync.\"": ".Notice(\"New Tasks will be added to TickTick on next Sync.\"",
    ".Notice(`Creating new file: ${folder.path}/${taskFile}`": ".Notice(`Creating new file: ${folder.path}/${taskFile}`",
    ".Notice(\"Tasks will not be deleted. Please rectify the issue before the next sync.\"": ".Notice(\"Tasks will not be deleted. Please rectify the issue before the next sync.\"",
    ".Notice(`new task ${newTask.title} id is ${newTask.id}`": ".Notice(`new task ${newTask.title} id is ${newTask.id}`",
    ".Notice(`There is no task ${lineTask.id}, ${lineTask.title} in the local cache. It will be deleted`": ".Notice(`There is no task ${lineTask.id}, ${lineTask.title} in the local cache. It will be deleted`",
    ".Notice(`Task Status for ${lineTask_ticktick_id} updated `": ".Notice(`Task Status for ${lineTask_ticktick_id} updated `",
    ".Notice(`new Item ${content} ${action}`": ".Notice(`new Item ${content} ${action}`",
    ".Notice(`Task ${taskId} is closed.`": ".Notice(`Task ${taskId} is closed.`",
    ".Notice(`Task ${taskId} is reopened.`": ".Notice(`Task ${taskId} is reopened.`",
    ".Notice(`Task ${taskId} is deleted.`": ".Notice(`Task ${taskId} is deleted.`",
    ".Notice(`Task ${e.object_id} is closed.`": ".Notice(`Task ${e.object_id} is closed.`",
    ".Notice(`Task ${e.object_id} is reopened.`": ".Notice(`Task ${e.object_id} is reopened.`",
    ".Notice(`TickTick backup data is saved in the path ${name}`": ".Notice(`TickTick backup data is saved in the path ${name}`",
    ".Notice(\"An error occurred while creating TickTick backup\"": ".Notice(\"An error occurred while creating TickTick backup\"",
    ".Notice(\"Settings failed to load. Please reload the TickTickSync plugin.\"": ".Notice(\"Settings failed to load. Please reload the TickTickSync plugin.\"",
    ".Notice(`TickTickSync plugin initialization failed, please check userID and password in settings.`": ".Notice(`TickTickSync plugin initialization failed, please check userID and password in settings.`",
    ".Notice(`error creating user data folder`": ".Notice(`error creating user data folder`",
    ".Notice(`TickTickSync initialization successful. TickTick data has been backed up.`": ".Notice(`TickTickSync initialization successful. TickTick data has been backed up.`",
    ".Notice(`TickTickSync loaded successfully.`": ".Notice(`TickTickSync loaded successfully.`",
    ".Notice(`Task will be updated as ${bOpenTask ? \"closed\" : \"opened\"} on next Sync`": ".Notice(`Task will be updated as ${bOpenTask ? \"closed\" : \"opened\"} on next Sync`",
    ".Notice(`Please login from settings.`": ".Notice(`Please login from settings.`",
    ".Notice(`Duplicate check failed:  ${Error2}`": ".Notice(`Duplicate check failed:  ${Error2}`",
    ".Notice(\"An error occurred:\"": ".Notice(\"An error occurred:\"",
    ".log(`${this.constructor.name} merged ${left2} and ${right2} into ${mergedResult}`)": ".log(`${this.constructor.name} merged ${left2} and ${right2} into ${mergedResult}`)",
    ".log(`Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`)": ".log(`Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`)",
    ".log(`Extracting timezone: '${match[0]}' into : ${result}`)": ".log(`Extracting timezone: '${match[0]}' into : ${result}`)",
    ".log(`Forward yearly adjusted for ${result} (${result.start})": ".log(`Forward yearly adjusted for ${result} (${result.start})",
    ".log(`Forward yearly adjusted for ${result} (${result.end})": ".log(`Forward yearly adjusted for ${result} (${result.end})",
    ".log(`Forward weekly adjusted for ${result} (${result.start})": ".log(`Forward weekly adjusted for ${result} (${result.start})",
    ".log(`Forward weekly adjusted for ${result} (${result.end})": ".log(`Forward weekly adjusted for ${result} (${result.end})",
    ".log(`Removing unlikely result '${result.text}'`)": ".log(`Removing unlikely result '${result.text}'`)",
    ".log(`Removing invalid result: ${result} (${result.start})": ".log(`Removing invalid result: ${result} (${result.start})",
    ".log(`Removing invalid result: ${result} (${result.end})": ".log(`Removing invalid result: ${result} (${result.end})",
    ".log(`(Strict)": ".log(`(Strict)",
    ".log(`${parser.constructor.name} extracted result ${parsedResult}`)": ".log(`${parser.constructor.name} extracted result ${parsedResult}`)",
    ".log(\"Signed in Response: \", response)": ".log(\"Signed in Response: \", response)",
    ".log(\"Got: \", response[\"syncTaskBean\"].update.length)": ".log(\"Got: \", response[\"syncTaskBean\"].update.length)",
    ".log(\"Bad JSON response\")": ".log(\"Bad JSON response\")",
    ".log(\"Trying Text.\")": ".log(\"Trying Text.\")",
    ".log(\"Bad text response\")": ".log(\"Bad text response\")",
    ".log(\"No error message.\")": ".log(\"No error message.\")",
    ".log(`Logged In: ${apiInitialized}`)": ".log(`Logged In: ${apiInitialized}`)",
    ".log(\"Last Error: \", api.lastError)": ".log(\"Last Error: \", api.lastError)",
    ".log(\"checking file metadata\")": ".log(\"checking file metadata\")",
    ".log(\"Number of files: \", fileNum)": ".log(\"Number of files: \", fileNum)",
    ".log(\"File Metadata rebuild.\")": ".log(\"File Metadata rebuild.\")",
    ".log(\"checking deleted tasks\")": ".log(\"checking deleted tasks\")",
    ".log(\"checking renamed files -- This operation takes a while, please be patient.\")": ".log(\"checking renamed files -- This operation takes a while, please be patient.\")",
    ".log(\"Checking Renamed: \", key)": ".log(\"Checking Renamed: \", key)",
    ".log(\"Done File Rename check.\")": ".log(\"Done File Rename check.\")",
    ".log(\"checking unsynced tasks\")": ".log(\"checking unsynced tasks\")",
    ".log(\"Now looking at: \", v)": ".log(\"Now looking at: \", v)",
    ".log(`Scanning file ${v.path}`)": ".log(`Scanning file ${v.path}`)",
    ".log(\"updated folder: \", updatedFolder)": ".log(\"updated folder: \", updatedFolder)",
    ".log(\"trace\", message, objects)": ".log(\"trace\", message, objects)",
    ".log(\"debug\", message, objects)": ".log(\"debug\", message, objects)",
    ".log(\"info\", message, objects)": ".log(\"info\", message, objects)",
    ".log(\"warn\", message, objects)": ".log(\"warn\", message, objects)",
    ".log(\"error\", message, objects)": ".log(\"error\", message, objects)",
    ".log(`The timestamps are ${days} days, ${hours} hours, and ${minutes} minutes apart.`)": ".log(`The timestamps are ${days} days, ${hours} hours, and ${minutes} minutes apart.`)",
    ".log(`The timestamps are ${hours} hours and ${minutes} minutes apart.`)": ".log(`The timestamps are ${hours} hours and ${minutes} minutes apart.`)",
    ".log(`The timestamps are ${minutes} minutes apart.`)": ".log(`The timestamps are ${minutes} minutes apart.`)",
    ".log(`The timestamps are different, but not calculatable..`)": ".log(`The timestamps are different, but not calculatable..`)",
    ".log(getTabIndentation(\" - [x] This is a task without tabs\")": ".log(getTabIndentation(\" - [x] This is a task without tabs\")",
    ".log(getTabIndentation(\"\\t\\t- [x] This is a task with two tabs\")": ".log(getTabIndentation(\"\\t\\t- [x] This is a task with two tabs\")",
    ".log(\"Found duplicate lists:\")": ".log(\"Found duplicate lists:\")",
    ".log(\"in file: :\", file)": ".log(\"in file: :\", file)",
    ".log(\"breaking\")": ".log(\"breaking\")",
    ".log(\"found\")": ".log(\"found\")",
    ".log(\"not found\")": ".log(\"not found\")",
    ".log(\"===\", projectTasks, result ? \"Completed add task.\" : \"Failed add task\")": ".log(\"===\", projectTasks, result ? \"Completed add task.\" : \"Failed add task\")",
    ".log(\"Duplicate check Skipping \", file, \" because it's not found.\")": ".log(\"Duplicate check Skipping \", file, \" because it's not found.\")",
    ".log(\"Duplicate check Skipping \", file, \" because it's a folder.\")": ".log(\"Duplicate check Skipping \", file, \" because it's a folder.\")",
    ".log(\"Duplicate check Skipping \", file, \" because it's not readable.\")": ".log(\"Duplicate check Skipping \", file, \" because it's not readable.\")",
    ".log(\"Child \", childId, \" not found for parent: \", newTask.id)": ".log(\"Child \", childId, \" not found for parent: \", newTask.id)",
    ".log(\"Child not found: \", childId)": ".log(\"Child not found: \", childId)",
    ".log(`Title modified for task ${lineTask_ticktick_id}\n\"New:\" ${lineTask.title}\n\"Cached:\" ${savedTask.title}`)": ".log(`Title modified for task ${lineTask_ticktick_id}\n\"New:\" ${lineTask.title}\n\"Cached:\" ${savedTask.title}`)",
    ".log(`Tags modified for task ${lineTask_ticktick_id}, , ${lineTask.tags}, ${savedTask.tags}`)": ".log(`Tags modified for task ${lineTask_ticktick_id}, , ${lineTask.tags}, ${savedTask.tags}`)",
    ".log(`Due date modified for task ${lineTask_ticktick_id}`)": ".log(`Due date modified for task ${lineTask_ticktick_id}`)",
    ".log(\"new: \", lineTask.dueDate, \"old: \", savedTask.dueDate)": ".log(\"new: \", lineTask.dueDate, \"old: \", savedTask.dueDate)",
    ".log(\"Project Modified\")": ".log(\"Project Modified\")",
    ".log(\"Project Moved\")": ".log(\"Project Moved\")",
    ".log(\"Number of items changed: \", lineTask.items?.length, savedTask.items?.length)": ".log(\"Number of items changed: \", lineTask.items?.length, savedTask.items?.length)",
    ".log(`Status modified for task ${lineTask_ticktick_id}`)": ".log(`Status modified for task ${lineTask_ticktick_id}`)",
    ".log(`task completed`)": ".log(`task completed`)",
    ".log(`task not completed`)": ".log(`task not completed`)",
    ".log(\"Task Changed: \", lineTask.id, \"\\n\", message)": ".log(\"Task Changed: \", lineTask.id, \"\\n\", message)",
    ".log(`parent didn't have items.`)": ".log(`parent didn't have items.`)",
    ".log(`${itemId} Not found.`)": ".log(`${itemId} Not found.`)",
    ".log(\"Task not deleted\")": ".log(\"Task not deleted\")",
    ".log(\"We have: \", tasksFromTickTic.length, \" tasks on \" + this.plugin.tickTickRestAPI?.api?.apiUrl)": ".log(\"We have: \", tasksFromTickTic.length, \" tasks on \" + this.plugin.tickTickRestAPI?.api?.apiUrl)",
    ".log(\"openTasks\", openTasks.length, \"closedTasks\", closedTasks.length)": ".log(\"openTasks\", openTasks.length, \"closedTasks\", closedTasks.length)",
    ".log(\"No tasks found.\")": ".log(\"No tasks found.\")",
    ".log(\"There are: \", tasksInCache.length, \" tasks in Cache.\")": ".log(\"There are: \", tasksInCache.length, \" tasks in Cache.\")",
    ".log(\"There are no tasks in cache.\")": ".log(\"There are no tasks in cache.\")",
    ".log(\"Tasks with no associated file found.\")": ".log(\"Tasks with no associated file found.\")",
    ".log(bModifiedFileSystem ? \"File System Modified.\" : \"No synchronization changes.\")": ".log(bModifiedFileSystem ? \"File System Modified.\" : \"No synchronization changes.\")",
    ".log(`${this.manifest.name} ${this.manifest.version} loaded!`)": ".log(`${this.manifest.name} ${this.manifest.version} loaded!`)",
    ".log(`TickTickSync unloaded!`)": ".log(`TickTickSync unloaded!`)",
    ".log(\"We're locked. Returning.\")": ".log(\"We're locked. Returning.\")",
    ".log('Second: Checked: ', bOpenTask)": ".log('Second: Checked: ', bOpenTask)",
    ".log('it\\'s open, close it.')": ".log('it\\'s open, close it.')",
    ".log('it\\'s closed, open it.')": ".log('it\\'s closed, open it.')",
    ".log('#### TickTick_id not found -- do it the hard way.')": ".log('#### TickTick_id not found -- do it the hard way.')",
    ".log('#### Full text modified??')": ".log('#### Full text modified??')",
    ".log(\"TickTick scheduled synchronization task started at\", new Date()": ".log(\"TickTick scheduled synchronization task started at\", new Date()",
    ".log(\"TickTick scheduled synchronization task completed at\", new Date()": ".log(\"TickTick scheduled synchronization task completed at\", new Date()",
    ".log(\"Metadata Duplicates: \", result.duplicates)": ".log(\"Metadata Duplicates: \", result.duplicates)",
    ".log(\"File \", fileKey, \" was deleted before last sync.\")": ".log(\"File \", fileKey, \" was deleted before last sync.\")",
    ".error(\"Get Inbox Properties failed: \", e)": ".error(\"Get Inbox Properties failed: \", e)",
    ".error(\"Get Project Groups failed: \", e)": ".error(\"Get Project Groups failed: \", e)",
    ".error(\"Get Projects failed: \", e)": ".error(\"Get Projects failed: \", e)",
    ".error(\"Get Project Sections failed: \", e)": ".error(\"Get Project Sections failed: \", e)",
    ".error(\"Get All Resources failed: \", e)": ".error(\"Get All Resources failed: \", e)",
    ".error(\"Get Tasks Details failed: \", e)": ".error(\"Get Tasks Details failed: \", e)",
    ".error(\"Get Tasks failed: \", e)": ".error(\"Get Tasks failed: \", e)",
    ".error(\"Get All Completed Items failed: \", e)": ".error(\"Get All Completed Items failed: \", e)",
    ".error(\"Add Task failed: \", e)": ".error(\"Add Task failed: \", e)",
    ".error(\"Update Task failed: \", e)": ".error(\"Update Task failed: \", e)",
    ".error(\"Delete Task  failed: \", e)": ".error(\"Delete Task  failed: \", e)",
    ".error(\"Export failed: \", e)": ".error(\"Export failed: \", e)",
    ".error(\"Project Move failed: \", e)": ".error(\"Project Move failed: \", e)",
    ".error(\"Parent Move failed: \", e)": ".error(\"Parent Move failed: \", e)",
    ".error(\"Error: \", errorMessage)": ".error(\"Error: \", errorMessage)",
    ".error(\"No Token\")": ".error(\"No Token\")",
    ".error(\"Login failed! \")": ".error(\"Login failed! \")",
    ".error(\"Login failed! \", error)": ".error(\"Login failed! \", error)",
    ".error(\"Error modifying task:\", error)": ".error(\"Error modifying task:\", error)",
    ".error(\"Error open a task:\", error)": ".error(\"Error open a task:\", error)",
    ".error(\"Error closing task:\", error)": ".error(\"Error closing task:\", error)",
    ".error(\"Error get all projects\", error)": ".error(\"Error get all projects\", error)",
    ".error(\"Error: \", lastError.operation, lastError.statusCode, lastError.errorMessage)": ".error(\"Error: \", lastError.operation, lastError.statusCode, lastError.errorMessage)",
    ".error(\"Error get project groups\", error)": ".error(\"Error get project groups\", error)",
    ".error(\"Error get user resources\", error)": ".error(\"Error get user resources\", error)",
    ".error(\"Error get all completed items\", error)": ".error(\"Error get all completed items\", error)",
    ".error(\"Error get all resources\", error)": ".error(\"Error get all resources\", error)",
    ".error(\"Error get all Tasks\", error)": ".error(\"Error get all Tasks\", error)",
    ".error(\"Project Moved Failed: \", this.api?.lastError)": ".error(\"Project Moved Failed: \", this.api?.lastError)",
    ".error(\"Failed to Load\", item.name)": ".error(\"Failed to Load\", item.name)",
    ".error(`An error occurred while loading task cache: ${error.message}`)": ".error(`An error occurred while loading task cache: ${error.message}`)",
    ".error(`An error occurred while loading task ${taskDetail.taskId} from cache: ${error.message}`)": ".error(`An error occurred while loading task ${taskDetail.taskId} from cache: ${error.message}`)",
    ".error(`Task ${taskDetail.id}: ${taskDetail.title} is not found.`)": ".error(`Task ${taskDetail.id}: ${taskDetail.title} is not found.`)",
    ".error(`An error occurred while updating task description: ${error.message}`)": ".error(`An error occurred while updating task description: ${error.message}`)",
    ".error(`An error occurred while check new tasks in the file: ${v.path}, ${error.message}`)": ".error(`An error occurred while check new tasks in the file: ${v.path}, ${error.message}`)",
    ".error(`An error occurred while checking for unsynced tasks.:${Error2}`)": ".error(`An error occurred while checking for unsynced tasks.:${Error2}`)",
    ".error(`An error occurred while scanning the vault.:${error}`)": ".error(`An error occurred while scanning the vault.:${error}`)",
    ".error(\"An error occurred:\", err)": ".error(\"An error occurred:\", err)",
    ".error(\"Converting line to Object, could not find project Id: \", title)": ".error(\"Converting line to Object, could not find project Id: \", title)",
    ".error(\"Attempt to create undefined FileMetaData Entry: \", filepath)": ".error(\"Attempt to create undefined FileMetaData Entry: \", filepath)",
    ".error(\"Not adding \", filepath, \" to Metadata because it's a folder.\")": ".error(\"Not adding \", filepath, \" to Metadata because it's a folder.\")",
    ".error(`${key} does not exist and metadata is empty.`)": ".error(`${key} does not exist and metadata is empty.`)",
    ".error(`Error loading tasks from Cache: ${error}`)": ".error(`Error loading tasks from Cache: ${error}`)",
    ".error(`Error saving tasks to Cache: ${error}`)": ".error(`Error saving tasks to Cache: ${error}`)",
    ".error(`Error appending task to Cache: ${error}`)": ".error(`Error appending task to Cache: ${error}`)",
    ".error(`Error finding task from Cache: ${error}`)": ".error(`Error finding task from Cache: ${error}`)",
    ".error(`Error updating task to Cache: ${error}`)": ".error(`Error updating task to Cache: ${error}`)",
    ".error(`Error open task to Cache file: ${error}`)": ".error(`Error open task to Cache file: ${error}`)",
    ".error(`Error close task to Cache file: ${error}`)": ".error(`Error close task to Cache file: ${error}`)",
    ".error(`Error deleting task from Cache file: ${error}`)": ".error(`Error deleting task from Cache file: ${error}`)",
    ".error(`Error deleting task from Cache : ${error}`)": ".error(`Error deleting task from Cache : ${error}`)",
    ".error(`Error finding project from Cache file: ${error}`)": ".error(`Error finding project from Cache file: ${error}`)",
    ".error(`error downloading projects: ${error}`)": ".error(`error downloading projects: ${error}`)",
    ".error(`Error updating renamed file path to cache: ${error}`)": ".error(`Error updating renamed file path to cache: ${error}`)",
    ".error(\"No tasks to add.\")": ".error(\"No tasks to add.\")",
    ".error(\"File creation failed: \", error)": ".error(\"File creation failed: \", error)",
    ".error(\"Attempting to find existing file\")": ".error(\"Attempting to find existing file\")",
    ".error(\"Error on create file: \", error)": ".error(\"Error on create file: \", error)",
    ".error(`Could not add Tasks to file ${file.path} \n Error: ${error}`)": ".error(`Could not add Tasks to file ${file.path} \n Error: ${error}`)",
    ".error(\"Parent ID: \", task.parentId, \" not found for: \" + task.title)": ".error(\"Parent ID: \", task.parentId, \" not found for: \" + task.title)",
    ".error(\"Parent not found, inserting at: \", lineToInsert)": ".error(\"Parent not found, inserting at: \", lineToInsert)",
    ".error(Fail, errMsg)": ".error(Fail, errMsg)",
    ".error(\"Task Item removal failed: \", error)": ".error(\"Task Item removal failed: \", error)",
    ".error(\"Content not readable.\", currentFileValue, filepath, \" file is possibly open elsewhere?\")": ".error(\"Content not readable.\", currentFileValue, filepath, \" file is possibly open elsewhere?\")",
    ".error(\"Error adding task:\", error)": ".error(\"Error adding task:\", error)",
    ".error(`The error occurred in file: ${filePath}`)": ".error(`The error occurred in file: ${filePath}`)",
    ".error(`File: ${file_path} not found. Removing from Meta Data`)": ".error(`File: ${file_path} not found. Removing from Meta Data`)",
    ".error(`There is no task ${lineTask.id}, ${lineTask.title} in the local cache. It will be deleted`)": ".error(`There is no task ${lineTask.id}, ${lineTask.title} in the local cache. It will be deleted`)",
    ".error(\"Error updating task:\", error)": ".error(\"Error updating task:\", error)",
    ".error(`Task construction failed in line: ${lineText}`)": ".error(`Task construction failed in line: ${lineText}`)",
    ".error(\"item ID\", itemId, \" \", content.trim()": ".error(\"item ID\", itemId, \" \", content.trim()",
    ".error(`Error updating item: ${error}`)": ".error(`Error updating item: ${error}`)",
    ".error(\"Error processing modified content:\", error)": ".error(\"Error processing modified content:\", error)",
    ".error(\"Error:\", error)": ".error(\"Error:\", error)",
    ".error(\"Error opening task:\", error)": ".error(\"Error opening task:\", error)",
    ".error(`Failed to delete task ${taskId}: ${error}`)": ".error(`Failed to delete task ${taskId}: ${error}`)",
    ".error(\"Error synchronizing task status:\", error)": ".error(\"Error synchronizing task status:\", error)",
    ".error(\"probable network connection error.\")": ".error(\"probable network connection error.\")",
    ".error(\"An error occurred while synchronizing:\", err)": ".error(\"An error occurred while synchronizing:\", err)",
    ".error(\"An error occurred while creating TickTick backup\", error)": ".error(\"An error occurred while creating TickTick backup\", error)",
    ".error(\"An error occurred in updateTaskDescription:\", error)": ".error(\"An error occurred in updateTaskDescription:\", error)",
    ".error(\"API Initialization Failed.\")": ".error(\"API Initialization Failed.\")",
    ".error(`An error occurred while deleting tasks: ${error}`)": ".error(`An error occurred while deleting tasks: ${error}`)",
    ".error(`An error occurred while check new task in line: ${error.message}`)": ".error(`An error occurred while check new task in line: ${error.message}`)",
    ".error(\"API Not intialized!\")": ".error(\"API Not intialized!\")",
    ".error(`An error occurred while modifying the file: ${error.message}`)": ".error(`An error occurred while modifying the file: ${error.message}`)",
    ".error(\"Failed to load data:\", error)": ".error(\"Failed to load data:\", error)",
    ".error(\"Settings are empty or invalid, not saving to avoid data loss.\")": ".error(\"Settings are empty or invalid, not saving to avoid data loss.\")",
    ".error(\"Error saving settings:\", error)": ".error(\"Error saving settings:\", error)",
    ".error(`error creating user data folder: ${error}`)": ".error(`error creating user data folder: ${error}`)",
    ".error(`An error occurred while check modified tasks in the file: ${error}`)": ".error(`An error occurred while check modified tasks in the file: ${error}`)",
    ".error(\"TickTick scheduled synchronization task terminated for sync loc at\", new Date()": ".error(\"TickTick scheduled synchronization task terminated for sync loc at\", new Date()",
    ".error(\"An error occurred in syncTickTickToObsidian:\", error)": ".error(\"An error occurred in syncTickTickToObsidian:\", error)",
    ".error(\"TickTick terminated synchronization task at\", new Date()": ".error(\"TickTick terminated synchronization task at\", new Date()",
    ".error(\"An error occurred in saveSettings:\", error)": ".error(\"An error occurred in saveSettings:\", error)",
    ".error(\"An error occurred in fullTextNewTaskCheck:\", error)": ".error(\"An error occurred in fullTextNewTaskCheck:\", error)",
    ".error(\"An error occurred in fullTextModifiedTaskCheck:\", error)": ".error(\"An error occurred in fullTextModifiedTaskCheck:\", error)",
    ".error(\"An error occurred in deletedTaskCheck:\", error)": ".error(\"An error occurred in deletedTaskCheck:\", error)",
    ".error(\"An error occurred:\", error)": ".error(\"An error occurred:\", error)",
    ".setName(\"Username\"": ".setName(\"Username\"",
    ".setName(\"Password\"": ".setName(\"Password\"",
    ".setName(\"Login\"": ".setName(\"Login\"",
    ".setName(\"Default project\"": ".setName(\"Default project\"",
    ".setName(\"Project\"": ".setName(\"Project\"",
    ".setName(\"Tag Behavior\"": ".setName(\"Tag Behavior\"",
    ".setName(\"Tag\"": ".setName(\"Tag\"",
    ".setName(\"Automatic sync interval time\"": ".setName(\"Automatic sync interval time\"",
    ".setName(\"Full vault sync\"": ".setName(\"Full vault sync\"",
    ".setName(\"Manual sync\"": ".setName(\"Manual sync\"",
    ".setName(\"Check database\"": ".setName(\"Check database\"",
    ".setName(\"Debug mode\"": ".setName(\"Debug mode\"",
    ".setName(\"Backup TickTick data\"": ".setName(\"Backup TickTick data\"",
    ".setName(\"Default folder location\"": ".setName(\"Default folder location\"",
    "text: \"Settings\"": "text: \"Settings\"",
    "text: \"Access Control\"": "text: \"Access Control\"",
    "text: \"Sync control\"": "text: \"Sync control\"",
    "text: \"Limit synchronization\"": "text: \"Limit synchronization\"",
    "text: \"Project/Tag selection result.\"": "text: \"Project/Tag selection result.\"",
    "text: \"Manual operations\"": "text: \"Manual operations\"",
    "Text: `${symbols.dueDateSymbol} due date`": "Text: `${symbols.dueDateSymbol} due date`",
    "Text: `${symbols.startDateSymbol} start date`": "Text: `${symbols.startDateSymbol} start date`",
    "Text: `${symbols.scheduledDateSymbol} scheduled date`": "Text: `${symbols.scheduledDateSymbol} scheduled date`",
    "Text: `${symbols.recurrenceSymbol} recurring (repeat)`": "Text: `${symbols.recurrenceSymbol} recurring (repeat)`",
    "Text: `${symbols.createdDateSymbol} created today (${formattedDate})`": "Text: `${symbols.createdDateSymbol} created today (${formattedDate})`",
    "text: \"Set default project for TickTick tasks in the current file\"": "text: \"Set default project for TickTick tasks in the current file\"",
    ".setButtonText(\"Login\"": ".setButtonText(\"Login\"",
    ".setButtonText(\"Sync\"": ".setButtonText(\"Sync\"",
    ".setButtonText(\"Check Database\"": ".setButtonText(\"Check Database\"",
    ".setButtonText(\"Backup\"": ".setButtonText(\"Backup\"",
    ".addRibbonIcon(\"sync\", \"TickTickSync\"": ".addRibbonIcon(\"sync\", \"TickTickSync\"",
    "errMsg = \"Login Failed. \"": "errMsg = \"Login Failed. \"",
    "errmsg = `File path not found for ${projectId}, returning ${filePath} instead. `": "errmsg = `File path not found for ${projectId}, returning ${filePath} instead. `",
    "errMsg = `File [${fileName}] not found, or is locked. If file exists, Please try again later.`": "errMsg = `File [${fileName}] not found, or is locked. If file exists, Please try again later.`",
    "errmsg = `File not found for moved newTask:  ${newTask.id}, ${newTask.title}`": "errmsg = `File not found for moved newTask:  ${newTask.id}, ${newTask.title}`",
    ".setTooltip(\"Click To Login\"": ".setTooltip(\"Click To Login\"",
    ".setTooltip(\"Add folder\"": ".setTooltip(\"Add folder\"",
    ".create(taskFile, `== Added by ${whoAdded} == `)": ".create(taskFile, `== Added by ${whoAdded} == `)",
    "return \"No limitation.\"": "return \"No limitation.\"",
    "return \"Only Tasks in <b>\" + project + \"</b> will be synchronized\";": "return \"Only Tasks in <b>\" + project + \"</b> will be synchronized\";",
    "return \"Only Tasks tagged with <b>#\" + tag + \"</b> tag will be synchronized\";": "return \"Only Tasks tagged with <b>#\" + tag + \"</b> tag will be synchronized\";",
    "return \"Only tasks in <b>\" + project + \"</b> AND tagged with <b>#\" + tag + \"</b> tag will be synchronized\";": "return \"Only tasks in <b>\" + project + \"</b> AND tagged with <b>#\" + tag + \"</b> tag will be synchronized\";",
    "return \"All tasks in <b>\" + project + \"</b> will be synchronized. All tasks tagged with <b>#\" + tag + \"</b> tag will be synchronized\";": "return \"All tasks in <b>\" + project + \"</b> will be synchronized. All tasks tagged with <b>#\" + tag + \"</b> tag will be synchronized\";",
    ".setText(\"Project ID\")": ".setText(\"Project ID\")",
    "name: \"applyStyles\"": "name: \"applyStyles\"",
    "name: \"arrow\"": "name: \"arrow\"",
    "name: \"Set default TickTick project for Tasks in the current file\"": "name: \"Set default TickTick project for Tasks in the current file\"",
    "description: \"Description\"": "description: \"Description\""
  }
}