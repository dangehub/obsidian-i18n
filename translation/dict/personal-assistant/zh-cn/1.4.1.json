{
  "manifest": {
    "translationVersion": 1731317175478,
    "pluginVersion": "1.4.1"
  },
  "description": {
    "original": "Streamline workflows within Obsidian, managing memos and plugins with just one command.",
    "translation": "Streamline workflows within Obsidian, managing memos and plugins with just one command."
  },
  "dict": {
    "Notice(\"AI is not available.\")": "Notice(\"AI is not available.\")",
    "Notice(\"Prepare LLM failed!\",3e3)": "Notice(\"Prepare LLM failed!\",3e3)",
    "Notice(`disable plugin[${r.name}] successfully`)": "Notice(`disable plugin[${r.name}] successfully`)",
    "Notice(`disable plugin[${r.name}] failed, try it again`)": "Notice(`disable plugin[${r.name}] failed, try it again`)",
    "Notice(`enable plugin[${r.name}] successfully`)": "Notice(`enable plugin[${r.name}] successfully`)",
    "Notice(`enable plugin[${r.name}] failed, try it again`)": "Notice(`enable plugin[${r.name}] failed, try it again`)",
    "Notice(\"hover local graph failed\")": "Notice(\"hover local graph failed\")",
    "Notice(`Can't work correctly! Plugin ${n} missing`)": "Notice(`Can't work correctly! Plugin ${n} missing`)",
    "Notice(\"got some network issue when accessing github.com\",500)": "Notice(\"got some network issue when accessing github.com\",500)",
    "Notice(\"Tips: please switch to edit mode to insert\",5e3)": "Notice(\"Tips: please switch to edit mode to insert\",5e3)",
    "Notice(\"Error: not a editable markdown file\",5e3)": "Notice(\"Error: not a editable markdown file\",5e3)",
    "Notice(\"starting obsidian assistant\")": "Notice(\"starting obsidian assistant\")",
    "Notice(\"update metadata command is not enabled in setting tab\")": "Notice(\"update metadata command is not enabled in setting tab\")",
    "name:\"Button\"": "name:\"Button\"",
    "name:\"ActionIcon\"": "name:\"ActionIcon\"",
    "name:\"IconRenderer\"": "name:\"IconRenderer\"",
    "name:\"Text\"": "name:\"Text\"",
    "name:\"Notification\"": "name:\"Notification\"",
    "name:\"Timeline\"": "name:\"Timeline\"",
    "name:\"TimelineItem\"": "name:\"TimelineItem\"",
    "name:\"start\"": "name:\"start\"",
    "name:\"end\"": "name:\"end\"",
    "name:\"error\"": "name:\"error\"",
    "name:\"text\"": "name:\"text\"",
    "name:`${this.getName()}Input`": "name:`${this.getName()}Input`",
    "name:`${this.getName()}Output`": "name:`${this.getName()}Output`",
    "name:\"PBKDF2\"": "name:\"PBKDF2\"",
    "name:\"Open specific note to record\"": "name:\"Open specific note to record\"",
    "name:\"assistant hover memos\"": "name:\"assistant hover memos\"",
    "name:\"hover local graph\"": "name:\"hover local graph\"",
    "name:\"switch on/off plugin according to its status\"": "name:\"switch on/off plugin according to its status\"",
    "name:\"Set graph view colors\"": "name:\"Set graph view colors\"",
    "name:\"Update plugins with one command\"": "name:\"Update plugins with one command\"",
    "name:\"Update themes with one command\"": "name:\"Update themes with one command\"",
    "name:\"Update metadata with one command\"": "name:\"Update metadata with one command\"",
    "name:\"List callout for quickly insert\"": "name:\"List callout for quickly insert\"",
    "name:\"Preview records that are created by `startup-recording` command\"": "name:\"Preview records that are created by `startup-recording` command\"",
    "name:\"Show statistics\"": "name:\"Show statistics\"",
    "name:\"AI Helper\"": "name:\"AI Helper\"",
    "name:\"AI Auto Robot\"": "name:\"AI Auto Robot\"",
    "text:\"Statistics of Obsidian Vault\"": "text:\"Statistics of Obsidian Vault\"",
    "text:\"words of vault named as Anthelion\"": "text:\"words of vault named as Anthelion\"",
    "text:\"+words\"": "text:\"+words\"",
    "text:\"-pages\"": "text:\"-pages\"",
    "text:\"total files/pages of vault named as \"": "text:\"total files/pages of vault named as \"",
    "text:\"total-files\"": "text:\"total-files\"",
    "text:\"total-pages\"": "text:\"total-pages\"",
    "text:\"Settings for Obsidian Assistant\"": "text:\"Settings for Obsidian Assistant\"",
    "text:\"Obsidian Assistant by Shadow Walker, \"": "text:\"Obsidian Assistant by Shadow Walker, \"",
    "text:\"Settings for Record\"": "text:\"Settings for Record\"",
    "text:\"Obsidian Management for Recording in Specific Path\"": "text:\"Obsidian Management for Recording in Specific Path\"",
    "text:\"Settings for Hover Local Graph\"": "text:\"Settings for Hover Local Graph\"",
    "text:\"Obsidian Management for Hover Local Graph\"": "text:\"Obsidian Management for Hover Local Graph\"",
    "text:\"Graph Resize\"": "text:\"Graph Resize\"",
    "text:\"Settings for Memos\"": "text:\"Settings for Memos\"",
    "text:\"Memos Resize\"": "text:\"Memos Resize\"",
    "text:\"Graph Colors\"": "text:\"Graph Colors\"",
    "text:\"Metadata Management\"": "text:\"Metadata Management\"",
    "text:\"Vault Statistics\"": "text:\"Vault Statistics\"",
    "text:\"AI Assistant\"": "text:\"AI Assistant\"",
    "text:\"AI Helper Only Support \\u901A\\u4E49\\u5343\\u95EE LLM\"": "text:\"AI Helper Only Support \\u901A\\u4E49\\u5343\\u95EE LLM\"",
    ".setText(\"Open GitHub repository\")": ".setText(\"Open GitHub repository\")",
    ".setButtonText(\"Change Color\")": ".setButtonText(\"Change Color\")",
    ".setButtonText(\"Add Color\")": ".setButtonText(\"Add Color\")",
    ".setButtonText(\"Add\")": ".setButtonText(\"Add\")",
    ".setName(\"Debug\")": ".setName(\"Debug\")",
    ".setName(\"Target Path\")": ".setName(\"Target Path\")",
    ".setName(\"File Format\")": ".setName(\"File Format\")",
    ".setName(\"Preview Number\")": ".setName(\"Preview Number\")",
    ".setName(\"Type\")": ".setName(\"Type\")",
    ".setName(\"Depth\")": ".setName(\"Depth\")",
    ".setName(\"Show Tags\")": ".setName(\"Show Tags\")",
    ".setName(\"Show Attachment\")": ".setName(\"Show Attachment\")",
    ".setName(\"Show Neighbor\")": ".setName(\"Show Neighbor\")",
    ".setName(\"Collapse\")": ".setName(\"Collapse\")",
    ".setName(\"Auto Local Graph Colors\")": ".setName(\"Auto Local Graph Colors\")",
    ".setName(\"Enable Graph Colors\")": ".setName(\"Enable Graph Colors\")",
    ".setName(\"Enable Updating Metadata\")": ".setName(\"Enable Updating Metadata\")",
    ".setName(\"Add Key:Value in frontmatter\")": ".setName(\"Add Key:Value in frontmatter\")",
    ".setName(\"Meta Updating Exclude Path\")": ".setName(\"Meta Updating Exclude Path\")",
    ".setName(\"Show Statistics\")": ".setName(\"Show Statistics\")",
    ".setName(\"Vault Stats File Path\")": ".setName(\"Vault Stats File Path\")",
    ".setName(\"Animation\")": ".setName(\"Animation\")",
    ".setName(\"Set Model Name\")": ".setName(\"Set Model Name\")",
    ".setName(\"API Token\")": ".setName(\"API Token\")",
    ".setDesc(\"Target directory to do recording\")": ".setDesc(\"Target directory to do recording\")",
    ".setDesc(\"File numbers to preview\")": ".setDesc(\"File numbers to preview\")",
    ".setDesc(\"Type of hover\")": ".setDesc(\"Type of hover\")",
    ".setDesc(\"Depth of link jumps\")": ".setDesc(\"Depth of link jumps\")",
    ".setDesc(\"Show tags in local graph view\")": ".setDesc(\"Show tags in local graph view\")",
    ".setDesc(\"Show attachments in local graph view\")": ".setDesc(\"Show attachments in local graph view\")",
    ".setDesc(\"Show neighbors in local graph view\")": ".setDesc(\"Show neighbors in local graph view\")",
    ".setDesc(\"Collapse local graph view setting\")": ".setDesc(\"Collapse local graph view setting\")",
    ".setDesc(\"Automatically set colors of local graph view.\")": ".setDesc(\"Automatically set colors of local graph view.\")",
    ".setDesc(\"Use personal assistant set colors of graph view.\")": ".setDesc(\"Use personal assistant set colors of graph view.\")",
    ".setDesc(\"This will be the Color used in the graph view.\")": ".setDesc(\"This will be the Color used in the graph view.\")",
    ".setDesc(\"Value now only upport formatted timestamp and regular string.\")": ".setDesc(\"Value now only upport formatted timestamp and regular string.\")",
    ".setDesc(\"Exclude files in the directory to update metadata\")": ".setDesc(\"Exclude files in the directory to update metadata\")",
    ".setDesc(\"Show statistics in the status bar\")": ".setDesc(\"Show statistics in the status bar\")",
    ".setDesc(\"Reload required for change to take effect. The location of the vault statistics file, relative to the vault root.\")": ".setDesc(\"Reload required for change to take effect. The location of the vault statistics file, relative to the vault root.\")",
    ".setDesc(\"Select the model name for AI Helper, only support qwen-max, qwen-turbo, qwen-plus\")": ".setDesc(\"Select the model name for AI Helper, only support qwen-max, qwen-turbo, qwen-plus\")",
    ".setDesc(\"LLM Model related API Token. NOTE: your input token is protected by AES-GCM encryption.\")": ".setDesc(\"LLM Model related API Token. NOTE: your input token is protected by AES-GCM encryption.\")",
    ".setPlaceholder(\"popover\")": ".setPlaceholder(\"popover\")",
    ".setPlaceholder(\"height\")": ".setPlaceholder(\"height\")",
    ".setPlaceholder(\"width\")": ".setPlaceholder(\"width\")",
    ".setPlaceholder(\"key\")": ".setPlaceholder(\"key\")",
    ".setPlaceholder(\"value\")": ".setPlaceholder(\"value\")",
    ".setPlaceholder(\"path strings with comma as separator, e.g. `tmp/,notes/templates`\")": ".setPlaceholder(\"path strings with comma as separator, e.g. `tmp/,notes/templates`\")",
    ".setPlaceholder(\"llm api token\")": ".setPlaceholder(\"llm api token\")",
    ".setPlaceholder(\"Type plugin name to find it\")": ".setPlaceholder(\"Type plugin name to find it\")",
    ".setTooltip(\"Remove\")": ".setTooltip(\"Remove\")",
    ".setTooltip(\"Reset to default\")": ".setTooltip(\"Reset to default\")",
    ".appendText(` Color for #${m.query}`)": ".appendText(` Color for #${m.query}`)",
    ".innerText=`File format which is like Diary setting.\nFor more syntax details, `": ".innerText=`File format which is like Diary setting.\nFor more syntax details, `",
    ".innerText=\"please check moment format.\"": ".innerText=\"please check moment format.\"",
    ".innerText=\"height\"": ".innerText=\"height\"",
    ".innerText=\"width\"": ".innerText=\"width\"",
    ".innerText=\"top\"": ".innerText=\"top\"",
    ".innerText=\"left\"": ".innerText=\"left\"",
    ".innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \"": ".innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \"",
    ".append(\"Content-Type\",l)}this[Nn]={type:\"default\",url:r.url,status:n,statusText:r.statusText||\"\",headers:i,counter:r.counter,highWaterMark:r.highWaterMark}}get type(){return this[Nn].type}get url(){return this[Nn].url||\"\"}get status(){return this[Nn].status}get ok(){return this[Nn].status>=200&&this[Nn].status<300}get redirected(){return this[Nn].counter>0}get statusText(){return this[Nn].statusText}get headers(){return this[Nn].headers}get highWaterMark(){return this[Nn].highWaterMark}clone(){return new t(b0(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(e,r=302){if(!j3(r))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new t(null,{headers:{location:new URL(e).toString()},status:r})}static error(){let e=new t(null,{status:0,statusText:\"\"});return e[Nn].type=\"error\",e}static json(e=void 0,r={}){let n=JSON.stringify(e);if(n===void 0)throw new TypeError(\"data is not JSON serializable\")": ".append(\"Content-Type\",l)}this[Nn]={type:\"default\",url:r.url,status:n,statusText:r.statusText||\"\",headers:i,counter:r.counter,highWaterMark:r.highWaterMark}}get type(){return this[Nn].type}get url(){return this[Nn].url||\"\"}get status(){return this[Nn].status}get ok(){return this[Nn].status>=200&&this[Nn].status<300}get redirected(){return this[Nn].counter>0}get statusText(){return this[Nn].statusText}get headers(){return this[Nn].headers}get highWaterMark(){return this[Nn].highWaterMark}clone(){return new t(b0(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(e,r=302){if(!j3(r))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new t(null,{headers:{location:new URL(e).toString()},status:r})}static error(){let e=new t(null,{status:0,statusText:\"\"});return e[Nn].type=\"error\",e}static json(e=void 0,r={}){let n=JSON.stringify(e);if(n===void 0)throw new TypeError(\"data is not JSON serializable\")",
    ".append(\"id\",o);return dt(e),await(await this.caller.call(je(),`${this.apiUrl}/public/${e}/runs${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async readDatasetSharedSchema(e,r){if(!e&&!r)throw new Error(\"Either datasetId or datasetName must be given\")": ".append(\"id\",o);return dt(e),await(await this.caller.call(je(),`${this.apiUrl}/public/${e}/runs${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async readDatasetSharedSchema(e,r){if(!e&&!r)throw new Error(\"Either datasetId or datasetName must be given\")",
    ".append(\"name\",r);else throw new Error(\"Must provide projectName or projectId\")": ".append(\"name\",r);else throw new Error(\"Must provide projectName or projectId\")",
    ".append(\"include_stats\",n.toString());let o=await this._get(i,l),a;if(Array.isArray(o)){if(o.length===0)throw new Error(`Project[id=${e}, name=${r}] not found`);a=o[0]}else a=o;return a}async getProjectUrl({projectId:e,projectName:r}){if(e===void 0&&r===void 0)throw new Error(\"Must provide either projectName or projectId\")": ".append(\"include_stats\",n.toString());let o=await this._get(i,l),a;if(Array.isArray(o)){if(o.length===0)throw new Error(`Project[id=${e}, name=${r}] not found`);a=o[0]}else a=o;return a}async getProjectUrl({projectId:e,projectName:r}){if(e===void 0&&r===void 0)throw new Error(\"Must provide either projectName or projectId\")",
    ".append(\"id\",u);if(r!==void 0&&s.append(\"name\",r),n!==void 0&&s.append(\"name_contains\",n),i!==void 0)s.append(\"reference_dataset\",i);else if(l!==void 0){let u=await this.readDataset({datasetName:l});s.append(\"reference_dataset\",u.id)}o!==void 0&&s.append(\"reference_free\",o.toString()),a!==void 0&&s.append(\"metadata\",JSON.stringify(a));for await(let u of this._getPaginated(\"/sessions\",s))yield*u}async deleteProject({projectId:e,projectName:r}){let n;if(e===void 0&&r===void 0)throw new Error(\"Must provide projectName or projectId\")": ".append(\"id\",u);if(r!==void 0&&s.append(\"name\",r),n!==void 0&&s.append(\"name_contains\",n),i!==void 0)s.append(\"reference_dataset\",i);else if(l!==void 0){let u=await this.readDataset({datasetName:l});s.append(\"reference_dataset\",u.id)}o!==void 0&&s.append(\"reference_free\",o.toString()),a!==void 0&&s.append(\"metadata\",JSON.stringify(a));for await(let u of this._getPaginated(\"/sessions\",s))yield*u}async deleteProject({projectId:e,projectName:r}){let n;if(e===void 0&&r===void 0)throw new Error(\"Must provide projectName or projectId\")",
    ".append(\"file\",e,r),n.forEach(f=>{u.append(\"input_keys\",f)}),i.forEach(f=>{u.append(\"output_keys\",f)}),l&&u.append(\"description\",l),o&&u.append(\"data_type\",o),a&&u.append(\"name\",a);let c=await this.caller.call(je(),s,{method:\"POST\",headers:this.headers,body:u,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(c,\"upload CSV\")": ".append(\"file\",e,r),n.forEach(f=>{u.append(\"input_keys\",f)}),i.forEach(f=>{u.append(\"output_keys\",f)}),l&&u.append(\"description\",l),o&&u.append(\"data_type\",o),a&&u.append(\"name\",a);let c=await this.caller.call(je(),s,{method:\"POST\",headers:this.headers,body:u,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(c,\"upload CSV\")",
    ".append(\"name\",r);else throw new Error(\"Must provide datasetName or datasetId\")": ".append(\"name\",r);else throw new Error(\"Must provide datasetName or datasetId\")",
    ".append(\"id\",u);i!==void 0&&s.append(\"name\",i),l!==void 0&&s.append(\"name_contains\",l),o!==void 0&&s.append(\"metadata\",JSON.stringify(o));for await(let u of this._getPaginated(a,s))yield*u}async updateDataset(e){let{datasetId:r,datasetName:n,...i}=e;if(!r&&!n)throw new Error(\"Must provide either datasetName or datasetId\")": ".append(\"id\",u);i!==void 0&&s.append(\"name\",i),l!==void 0&&s.append(\"name_contains\",l),o!==void 0&&s.append(\"metadata\",JSON.stringify(o));for await(let u of this._getPaginated(a,s))yield*u}async updateDataset(e){let{datasetId:r,datasetName:n,...i}=e;if(!r&&!n)throw new Error(\"Must provide either datasetName or datasetId\")",
    ".append(\"as_of\",m);let p=o!=null?o:!0;if(f.append(\"inline_s3_urls\",p.toString()),n!==void 0)for(let b of n)f.append(\"id\",b);if(l!==void 0)for(let b of l)f.append(\"splits\",b);if(a!==void 0){let b=JSON.stringify(a);f.append(\"metadata\",b)}s!==void 0&&f.append(\"limit\",s.toString()),u!==void 0&&f.append(\"offset\",u.toString()),c!==void 0&&f.append(\"filter\",c);let v=0;for await(let b of this._getPaginated(\"/examples\",f)){for(let w of b)yield w,v++;if(s!==void 0&&v>=s)break}}async deleteExample(e){dt(e);let r=`/examples/${e}`,n=await this.caller.call(je(),this.apiUrl+r,{method:\"DELETE\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});await ht(n,`delete ${r}`),await n.json()}async updateExample(e,r){dt(e);let n=await this.caller.call(je(),`${this.apiUrl}/examples/${e}`,{method:\"PATCH\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(r),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(n,\"update example\")": ".append(\"as_of\",m);let p=o!=null?o:!0;if(f.append(\"inline_s3_urls\",p.toString()),n!==void 0)for(let b of n)f.append(\"id\",b);if(l!==void 0)for(let b of l)f.append(\"splits\",b);if(a!==void 0){let b=JSON.stringify(a);f.append(\"metadata\",b)}s!==void 0&&f.append(\"limit\",s.toString()),u!==void 0&&f.append(\"offset\",u.toString()),c!==void 0&&f.append(\"filter\",c);let v=0;for await(let b of this._getPaginated(\"/examples\",f)){for(let w of b)yield w,v++;if(s!==void 0&&v>=s)break}}async deleteExample(e){dt(e);let r=`/examples/${e}`,n=await this.caller.call(je(),this.apiUrl+r,{method:\"DELETE\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});await ht(n,`delete ${r}`),await n.json()}async updateExample(e,r){dt(e);let n=await this.caller.call(je(),`${this.apiUrl}/examples/${e}`,{method:\"PATCH\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(r),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(n,\"update example\")",
    ".append(\"as_of\",o),await this._get(`/datasets/${i}/splits`,l)}async updateDatasetSplits({datasetId:e,datasetName:r,splitName:n,exampleIds:i,remove:l=!1}){let o;if(e===void 0&&r===void 0)throw new Error(\"Must provide dataset name or ID\")": ".append(\"as_of\",o),await this._get(`/datasets/${i}/splits`,l)}async updateDatasetSplits({datasetId:e,datasetName:r,splitName:n,exampleIds:i,remove:l=!1}){let o;if(e===void 0&&r===void 0)throw new Error(\"Must provide dataset name or ID\")",
    ".append(\"key\",l);if(n)for(let l of n)i.append(\"source\",l);for await(let l of this._getPaginated(\"/feedback\",i))yield*l}async createPresignedFeedbackToken(e,r,{expiration:n,feedbackConfig:i}={}){let l={run_id:e,feedback_key:r,feedback_config:i};return n?typeof n==\"string\"?l.expires_at=n:(n!=null&&n.hours||n!=null&&n.minutes||n!=null&&n.days)&&(l.expires_in=n):l.expires_in={hours:3},await(await this.caller.call(je(),`${this.apiUrl}/feedback/tokens`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(l),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async createComparativeExperiment({name:e,experimentIds:r,referenceDatasetId:n,createdAt:i,description:l,metadata:o,id:a}){var c;if(r.length===0)throw new Error(\"At least one experiment is required\")": ".append(\"key\",l);if(n)for(let l of n)i.append(\"source\",l);for await(let l of this._getPaginated(\"/feedback\",i))yield*l}async createPresignedFeedbackToken(e,r,{expiration:n,feedbackConfig:i}={}){let l={run_id:e,feedback_key:r,feedback_config:i};return n?typeof n==\"string\"?l.expires_at=n:(n!=null&&n.hours||n!=null&&n.minutes||n!=null&&n.days)&&(l.expires_in=n):l.expires_in={hours:3},await(await this.caller.call(je(),`${this.apiUrl}/feedback/tokens`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(l),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async createComparativeExperiment({name:e,experimentIds:r,referenceDatasetId:n,createdAt:i,description:l,metadata:o,id:a}){var c;if(r.length===0)throw new Error(\"At least one experiment is required\")",
    ".append(\"ids\",s)}),n&&o.append(\"name\",n),i&&o.append(\"name_contains\",i),o.append(\"limit\",(l!==void 0?Math.min(l,100):100).toString());let a=0;for await(let s of this._getPaginated(\"/annotation-queues\",o))if(yield*s,a++,l!==void 0&&a>=l)break}async createAnnotationQueue(e){let{name:r,description:n,queueId:i}=e,l={name:r,description:n,id:i||kr()},o=await this.caller.call(je(),`${this.apiUrl}/annotation-queues`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(Object.fromEntries(Object.entries(l).filter(([s,u])=>u!==void 0))),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(o,\"create annotation queue\")": ".append(\"ids\",s)}),n&&o.append(\"name\",n),i&&o.append(\"name_contains\",i),o.append(\"limit\",(l!==void 0?Math.min(l,100):100).toString());let a=0;for await(let s of this._getPaginated(\"/annotation-queues\",o))if(yield*s,a++,l!==void 0&&a>=l)break}async createAnnotationQueue(e){let{name:r,description:n,queueId:i}=e,l={name:r,description:n,id:i||kr()},o=await this.caller.call(je(),`${this.apiUrl}/annotation-queues`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(Object.fromEntries(Object.entries(l).filter(([s,u])=>u!==void 0))),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(o,\"create annotation queue\")",
    ".append(\"is_archived\",(!!(e!=null&&e.isArchived)).toString()),(e==null?void 0:e.isPublic)!==void 0&&r.append(\"is_public\",e.isPublic.toString()),e!=null&&e.query&&r.append(\"query\",e.query);for await(let i of this._getPaginated(\"/repos\",r,l=>l.repos))yield*i}async getPrompt(e){let[r,n,i]=El(e),l=await this.caller.call(je(),`${this.apiUrl}/repos/${r}/${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});if(l.status===404)return null;await ht(l,\"get prompt\")": ".append(\"is_archived\",(!!(e!=null&&e.isArchived)).toString()),(e==null?void 0:e.isPublic)!==void 0&&r.append(\"is_public\",e.isPublic.toString()),e!=null&&e.query&&r.append(\"query\",e.query);for await(let i of this._getPaginated(\"/repos\",r,l=>l.repos))yield*i}async getPrompt(e){let[r,n,i]=El(e),l=await this.caller.call(je(),`${this.apiUrl}/repos/${r}/${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});if(l.status===404)return null;await ht(l,\"get prompt\")",
    ".addOption(\"string\",\"1 Regular String\")": ".addOption(\"string\",\"1 Regular String\")",
    ".addOption(\"moment\",\"2 Timestamp\")": ".addOption(\"moment\",\"2 Timestamp\")",
    ".addOption(\"daily\",\"Daily Statistcs\")": ".addOption(\"daily\",\"Daily Statistcs\")",
    ".addOption(\"total\",\"Total Statistics\")": ".addOption(\"total\",\"Total Statistics\")",
    "label:\"Daily Words\"": "label:\"Daily Words\"",
    "label:\"Daily Pages\"": "label:\"Daily Pages\"",
    "label:\"Total Files\"": "label:\"Total Files\"",
    "label:\"Total Pages\"": "label:\"Total Pages\"",
    "innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \"": "innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \""
  }
}