{
  "manifest": {
    "translationVersion": 1732350758711,
    "pluginVersion": "1.2.0"
  },
  "description": {
    "original": "Auto Note Mover will automatically move the active notes to their respective folders according to the rules.",
    "translation": "Auto Note Mover will automatically move the active notes to their respective folders according to the rules."
  },
  "dict": {
    "Notice(`[Auto Note Mover]\n\"Error: The destination folder\n\"${settingFolder}\"\ndoes not exist.`)": "Notice(`[Auto Note Mover]\n\"Error: The destination folder\n\"${settingFolder}\"\ndoes not exist.`)",
    "Notice(`[Auto Note Mover]\nError: A file with the same name\n\"${fileFullName}\"\nexists at the destination folder.`)": "Notice(`[Auto Note Mover]\nError: A file with the same name\n\"${fileFullName}\"\nexists at the destination folder.`)",
    "Notice(`[Auto Note Mover]\nMoved the note \"${fileFullName}\"\nto the \"${settingFolder}\".`)": "Notice(`[Auto Note Mover]\nMoved the note \"${fileFullName}\"\nto the \"${settingFolder}\".`)",
    "Notice(`You can set either the tag or the title.`)": "Notice(`You can set either the tag or the title.`)",
    "Notice(\"This tag is already used.\")": "Notice(\"This tag is already used.\")",
    "Notice(\"This pattern is already used.\")": "Notice(\"This pattern is already used.\")",
    "Notice(\"Auto Note Mover is disabled in the frontmatter.\")": "Notice(\"Auto Note Mover is disabled in the frontmatter.\")",
    "Notice(\"[Auto Note Mover]\\nTrigger is Manual.\")": "Notice(\"[Auto Note Mover]\\nTrigger is Manual.\")",
    "Notice(\"[Auto Note Mover]\\nTrigger is Automatic.\")": "Notice(\"[Auto Note Mover]\\nTrigger is Automatic.\")",
    ".log(`[Auto Note Mover] Moved the note \"${fileFullName}\" to the \"${settingFolder}\".`)": ".log(`[Auto Note Mover] Moved the note \"${fileFullName}\" to the \"${settingFolder}\".`)",
    ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)": ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)",
    ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', \"element.\"].join(\" \")": ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', \"element.\"].join(\" \")",
    ".error([\"Popper: The `allowedAutoPlacements` option did not allow any\", \"placements. Ensure the `placement` option matches the variation\", \"of the allowed placements.\", 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(\" \")": ".error([\"Popper: The `allowedAutoPlacements` option did not allow any\", \"placements. Ensure the `placement` option matches the variation\", \"of the allowed placements.\", 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(\" \")",
    ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)": ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', '\"' + String(modifier.enabled)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', '\"' + String(modifier.enabled)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(\", \")": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(\", \")",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', '\"' + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', '\"' + String(modifier.fn)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', '\"' + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', '\"' + String(modifier.fn)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', '\"' + String(modifier.requires)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', '\"' + String(modifier.requires)",
    ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', '\"' + String(modifier.requiresIfExists)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', '\"' + String(modifier.requiresIfExists)",
    ".error('PopperJS: an invalid property has been provided to the \"' + modifier.name + '\" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s)": ".error('PopperJS: an invalid property has been provided to the \"' + modifier.name + '\" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s)",
    ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)": ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)",
    ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', \"present and enabled to work.\"].join(\" \")": ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', \"present and enabled to work.\"].join(\" \")",
    ".error(INVALID_ELEMENT_ERROR)": ".error(INVALID_ELEMENT_ERROR)",
    ".error(INFINITE_LOOP_ERROR)": ".error(INFINITE_LOOP_ERROR)",
    ".error(`[Auto Note Mover] The destination folder \"${settingFolder}\" does not exist.`)": ".error(`[Auto Note Mover] The destination folder \"${settingFolder}\" does not exist.`)",
    ".error(`[Auto Note Mover] Error: A file with the same name \"${fileFullName}\" exists at the destination folder.`)": ".error(`[Auto Note Mover] Error: A file with the same name \"${fileFullName}\" exists at the destination folder.`)",
    "name: \"applyStyles\"": "name: \"applyStyles\"",
    "name: \"arrow\"": "name: \"arrow\"",
    "name: \"computeStyles\"": "name: \"computeStyles\"",
    "name: \"eventListeners\"": "name: \"eventListeners\"",
    "name: \"flip\"": "name: \"flip\"",
    "name: \"hide\"": "name: \"hide\"",
    "name: \"offset\"": "name: \"offset\"",
    "name: \"popperOffsets\"": "name: \"popperOffsets\"",
    "name: \"preventOverflow\"": "name: \"preventOverflow\"",
    "name: \"sameWidth\"": "name: \"sameWidth\"",
    "name: \"Move the note\"": "name: \"Move the note\"",
    "name: \"Toggle Auto-Manual\"": "name: \"Toggle Auto-Manual\"",
    "text: \"reference\"": "text: \"reference\"",
    "text: \"Auto Note Mover\"": "text: \"Auto Note Mover\"",
    "text: \"Automatic \"": "text: \"Automatic \"",
    "text: \"Manual \"": "text: \"Manual \"",
    "text: \"^#tag$\"": "text: \"^#tag$\"",
    "text: \"If you want to use the suggested tags as they are, it is recommended to disable this setting.\"": "text: \"If you want to use the suggested tags as they are, it is recommended to disable this setting.\"",
    "text: \"You can set either the tag or the title. \"": "text: \"You can set either the tag or the title. \"",
    "text: \"first matching rule.\"": "text: \"first matching rule.\"",
    "text: \" # \"": "text: \" # \"",
    "text: \"AutoNoteMover: disable\"": "text: \"AutoNoteMover: disable\"",
    ".setButtonText(\"+\")": ".setButtonText(\"+\")",
    ".setName(\"Trigger\")": ".setName(\"Trigger\")",
    ".setName(\"Use regular expressions to check for tags\")": ".setName(\"Use regular expressions to check for tags\")",
    ".setName(\"Add new rule\")": ".setName(\"Add new rule\")",
    ".setName(\"Use regular expressions to check for excluded folder\")": ".setName(\"Use regular expressions to check for excluded folder\")",
    ".setName(\"Add Excluded Folder\")": ".setName(\"Add Excluded Folder\")",
    ".setName(\"Status Bar Trigger Indicator\")": ".setName(\"Status Bar Trigger Indicator\")",
    ".setDesc(\"Auto Note Mover will automatically move the active notes to their respective folders according to the rules.\")": ".setDesc(\"Auto Note Mover will automatically move the active notes to their respective folders according to the rules.\")",
    ".setPlaceholder(\"Folder\")": ".setPlaceholder(\"Folder\")",
    ".setPlaceholder(\"Tag\")": ".setPlaceholder(\"Tag\")",
    ".setPlaceholder(\"Title by regex\")": ".setPlaceholder(\"Title by regex\")",
    ".setTooltip(\"Add new rule\")": ".setTooltip(\"Add new rule\")",
    ".setTooltip(\"Move up\")": ".setTooltip(\"Move up\")",
    ".setTooltip(\"Move down\")": ".setTooltip(\"Move down\")",
    ".setTooltip(\"Delete\")": ".setTooltip(\"Delete\")",
    ".setTooltip(\"Add Excluded Folders\")": ".setTooltip(\"Add Excluded Folders\")",
    ".append(\"Choose how the trigger will be activated.": ".append(\"Choose how the trigger will be activated.",
    "\"is triggered when you create, edit, or rename a note, and moves the note if it matches the rules.\"": "\"is triggered when you create, edit, or rename a note, and moves the note if it matches the rules.\"",
    "\"You can also activate the trigger with a command.\"": "\"You can also activate the trigger with a command.\"",
    "\"will not automatically move notes.\"": "\"will not automatically move notes.\"",
    "\"You can trigger by command.\"": "\"You can trigger by command.\"",
    "append(\"If enabled, tags will be checked with regular expressions.\"": "append(\"If enabled, tags will be checked with regular expressions.\"",
    "\"For example, if you want to match the #tag, you would write \"": "\"For example, if you want to match the #tag, you would write \"",
    "\"This setting is for a specific purpose, such as specifying nested tags in bulk.\"": "\"This setting is for a specific purpose, such as specifying nested tags in bulk.\"",
    "append(\"1. Set the destination folder.\", descEl.createEl(\"br\"), \"2. Set a tag or title that matches the note you want to move. \"": "append(\"1. Set the destination folder.\", descEl.createEl(\"br\"), \"2. Set a tag or title that matches the note you want to move. \"",
    "\"3. The rules are checked in order from the top. The notes will be moved to the folder with the \"": "\"3. The rules are checked in order from the top. The notes will be moved to the folder with the \"",
    "\"Tag: Be sure to add a\"": "\"Tag: Be sure to add a\"",
    "\"at the beginning.\", descEl.createEl(\"br\"), \"Title: Tested by JavaScript regular expressions.\"": "\"at the beginning.\", descEl.createEl(\"br\"), \"Title: Tested by JavaScript regular expressions.\"",
    "\"1. Attached files will not be moved, but they will still appear in the note.\", descEl.createEl(\"br\"), '2. Auto Note Mover will not move notes that have \"', descEl.createEl(\"strong\"": "\"1. Attached files will not be moved, but they will still appear in the note.\", descEl.createEl(\"br\"), '2. Auto Note Mover will not move notes that have \"', descEl.createEl(\"strong\"",
    "\" in the frontmatter.');": "\" in the frontmatter.');",
    ".append(\"If enabled, excluded folder will be checked with regular expressions.\");": ".append(\"If enabled, excluded folder will be checked with regular expressions.\");",
    "append(\"Notes in the excluded folder will not be moved.\", descEl.createEl(\"br\"), \"This takes precedence over the notes movement rules.\");": "append(\"Notes in the excluded folder will not be moved.\", descEl.createEl(\"br\"), \"This takes precedence over the notes movement rules.\");",
    ".append(\"The status bar will display [A] if the trigger is Automatic, and [M] for Manual.\", descEl.createEl(\"br\"), \"To change the setting, you need to restart Obsidian.\", descEl.createEl(\"br\"), \"Desktop only.\");": ".append(\"The status bar will display [A] if the trigger is Automatic, and [M] for Manual.\", descEl.createEl(\"br\"), \"To change the setting, you need to restart Obsidian.\", descEl.createEl(\"br\"), \"Desktop only.\");"
  }
}